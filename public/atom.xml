<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大洋</title>
  <subtitle>专注于前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://html-js.site/"/>
  <updated>2018-06-19T12:02:54.179Z</updated>
  <id>http://html-js.site/</id>
  
  <author>
    <name>大洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack优化</title>
    <link href="http://html-js.site/2018/06/15/webpack%E4%BC%98%E5%8C%96/"/>
    <id>http://html-js.site/2018/06/15/webpack优化/</id>
    <published>2018-06-15T09:31:37.000Z</published>
    <updated>2018-06-19T12:02:54.179Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="https://www.jianshu.com/p/b9bf995f3712" target="_blank" rel="external">webpack优化之HappyPack 实战</a></li>
<li><a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="external">Webpack 打包优化之体积篇</a></li>
<li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="external">Webpack 打包优化之速度篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/b9bf995f3712&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack优化之HappyPack 实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:
    
    </summary>
    
    
      <category term="webpack" scheme="http://html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack优化之HappyPack 实战</title>
    <link href="http://html-js.site/2018/06/15/webpack%E4%BC%98%E5%8C%96%E4%B9%8BHappyPack-%E5%AE%9E%E6%88%98/"/>
    <id>http://html-js.site/2018/06/15/webpack优化之HappyPack-实战/</id>
    <published>2018-06-15T09:28:26.000Z</published>
    <updated>2018-06-15T09:29:44.757Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/b9bf995f3712" target="_blank" rel="external">https://www.jianshu.com/p/b9bf995f3712</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/b9bf995f3712&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jianshu.com/p/b9bf995f3712&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="webpack" scheme="http://html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack1升2踩坑记</title>
    <link href="http://html-js.site/2018/06/14/webpack1%E5%8D%872%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://html-js.site/2018/06/14/webpack1升2踩坑记/</id>
    <published>2018-06-14T08:56:44.000Z</published>
    <updated>2018-06-20T06:01:25.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-从-v1-升级到-v2"><a href="#webpack-从-v1-升级到-v2" class="headerlink" title="webpack 从 v1 升级到 v2"></a>webpack 从 v1 升级到 v2</h3><p>从 v1 升级到 v2，总体来讲比较简单，跟着官方升级文档做就行了，主要是 <code>module</code> 和 <code>ExtractTextWebpackPlugin</code> 变化比较大</p>
<ul>
<li><a href="https://www.jianshu.com/p/cb8343020833" target="_blank" rel="external">https://www.jianshu.com/p/cb8343020833</a></li>
<li><a href="http://www.css88.com/doc/webpack2/guides/migrating/" target="_blank" rel="external">http://www.css88.com/doc/webpack2/guides/migrating/</a></li>
</ul>
<h3 id="升级后-模块热替换-HMR-失效"><a href="#升级后-模块热替换-HMR-失效" class="headerlink" title="升级后 模块热替换(HMR)失效"></a>升级后 模块热替换(HMR)失效</h3><p>直接看文档</p>
<ul>
<li><a href="http://www.css88.com/doc/webpack2/guides/hmr-react/" target="_blank" rel="external">http://www.css88.com/doc/webpack2/guides/hmr-react/</a></li>
<li><a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">https://github.com/gaearon/react-hot-loader</a></li>
<li><a href="https://www.jianshu.com/p/07c0666e87c7" target="_blank" rel="external">https://www.jianshu.com/p/07c0666e87c7</a></li>
<li><a href="https://segmentfault.com/a/1190000009244530" target="_blank" rel="external">https://segmentfault.com/a/1190000009244530</a></li>
<li><a href="https://github.com/gaearon/react-hot-loader/issues/249" target="_blank" rel="external">https://github.com/gaearon/react-hot-loader/issues/249</a>  这个issue非常有用！！！！</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;webpack-从-v1-升级到-v2&quot;&gt;&lt;a href=&quot;#webpack-从-v1-升级到-v2&quot; class=&quot;headerlink&quot; title=&quot;webpack 从 v1 升级到 v2&quot;&gt;&lt;/a&gt;webpack 从 v1 升级到 v2&lt;/h3&gt;&lt;p&gt;从 
    
    </summary>
    
    
      <category term="webpack" scheme="http://html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React性能优化军规</title>
    <link href="http://html-js.site/2018/05/21/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%86%9B%E8%A7%84/"/>
    <id>http://html-js.site/2018/05/21/React性能优化军规/</id>
    <published>2018-05-21T09:54:21.000Z</published>
    <updated>2018-05-21T09:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发的过程中，将上面所论述的内容，总结成一个基本的军规，铭记于心，就可以保证React应用的性能不至于太差。</p>
<h3 id="渲染相关"><a href="#渲染相关" class="headerlink" title="渲染相关"></a>渲染相关</h3><ul>
<li>提升级项目性能，请使用immutable(props、state、store)</li>
<li>请pure-render-decorator与immutablejs搭配使用</li>
<li>请慎用setState，因其容易导致重新渲染</li>
<li>谨慎将component当作props传入</li>
<li>请将方法的bind一律置于constructor</li>
<li>请只传递component需要的props，避免其它props变化导致重新渲染（慎用spread attributes）</li>
<li>请在你希望发生重新渲染的dom上设置可被react识别的同级唯一key，否则react在某些情况可能不会重新渲染。</li>
<li>请尽量使用const element</li>
</ul>
<h3 id="tap事件"><a href="#tap事件" class="headerlink" title="tap事件"></a>tap事件</h3><ul>
<li>简单的tap事件，请使用react-tap-event-plugin<br>开发环境时，最好引入webpack的环境变量（仅在开发环境中初始化），在container中初始化。生产环境的时候，请将plugin跟react打包到一起（需要打包在一起才能正常使用，因为plugin对react有好多依赖），外链引入。</li>
</ul>
<p>目前参考了这个项目的打包方案：<br><a href="https://github.com/hartmamt/react-with-tap-events" target="_blank" rel="external">https://github.com/hartmamt/react-with-tap-events</a><br>Facebook官方issue: <a href="https://github.com/facebook/react/blob/bef45b0b1a98ea9b472ba664d955a039cf2f8068/src/renderers/dom/client/eventPlugins/TapEventPlugin.js" target="_blank" rel="external">https://github.com/facebook/react/blob/bef45b0b1a98ea9b472ba664d955a039cf2f8068/src/renderers/dom/client/eventPlugins/TapEventPlugin.js</a><br>React-tap-event-plugin github:<br><a href="https://github.com/zilverline/react-tap-event-plugin" target="_blank" rel="external">https://github.com/zilverline/react-tap-event-plugin</a></p>
<ul>
<li>复杂的tap事件，建议使用tap component<br>家校群列表页的每个作业的tap交互都比较复杂，出了普通的tap之外，还需要long tap和swipe。因此我们只好自己封装了一个tap component</li>
</ul>
<h3 id="Debug相关"><a href="#Debug相关" class="headerlink" title="Debug相关"></a>Debug相关</h3><ul>
<li>移动端请慎用redux-devtools，易造成卡顿</li>
<li>Webpack慎用devtools的inline-source-map模式<br>使用此模式会内联一大段便于定位bug的字符串，查错时可以开启，不是查错时建议关闭，否则开发时加载的包会非常大。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发的过程中，将上面所论述的内容，总结成一个基本的军规，铭记于心，就可以保证React应用的性能不至于太差。&lt;/p&gt;
&lt;h3 id=&quot;渲染相关&quot;&gt;&lt;a href=&quot;#渲染相关&quot; class=&quot;headerlink&quot; title=&quot;渲染相关&quot;&gt;&lt;/a&gt;渲染相关&lt;/h3&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript事件循环-event loop</title>
    <link href="http://html-js.site/2018/04/11/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-event-loop/"/>
    <id>http://html-js.site/2018/04/11/JavaScript事件循环-event-loop/</id>
    <published>2018-04-11T08:33:47.000Z</published>
    <updated>2018-04-11T10:02:53.469Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="javascript" scheme="http://html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CleanMyMac3.9.4(支持10.13HighSierra)</title>
    <link href="http://html-js.site/2018/04/10/CleanMyMac3-9-4-%E6%94%AF%E6%8C%8110-13HighSierra/"/>
    <id>http://html-js.site/2018/04/10/CleanMyMac3-9-4-支持10-13HighSierra/</id>
    <published>2018-04-10T07:20:02.000Z</published>
    <updated>2018-04-10T07:25:16.097Z</updated>
    
    <content type="html"><![CDATA[<p>[已更新最新版3.9.4]macOS 10.13 High Sierra 系统垃圾清理神器CleanMyMac 3.9.4最新TNT破解版，对于经济实力允许的用户，请<a href="https://macpaw.com/zh/store/cleanmymac?cs=c" target="_blank" rel="external">支持正版</a>。中文版每年￥99，也还算是挺划算的。</p>
<hr>
<h3 id="应用介绍"><a href="#应用介绍" class="headerlink" title="应用介绍"></a>应用介绍</h3><p><img src="/images/page/CleanMyMac/1.png" alt=""><br>Mac OS X 系统下知名清理软件 CleanMyMac，这种垃圾清理类的软件似乎始终无法上架 Mac App Store，CleanMyMac 3 的宣传力度似乎并不如CleanMyMac 2，想当年 CleanMyMac 2 在MacPaw 网站上得倒计时挂了很久。这次，CleanMyMac 3 作为在 OS X Yosemite 系统下的软件，视觉风格上自然要满足扁平化和简约的设计路线。当然，版本号大升级，也需要拿出一点诚意，增加一些新功能。CleanMyMac 3 优化了清理体验，将复杂的操作和内容隐藏的更好，实际的操作流畅性更好一些。</p>
<h3 id="文件已损坏解决方法"><a href="#文件已损坏解决方法" class="headerlink" title="文件已损坏解决方法"></a>文件已损坏解决方法</h3><p>如果显示文件已损坏，打开终端键入sudo spctl –master-disable</p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>CleanMyMac 3.9.4 By TNT<br>百度云下载链接: <a href="https://pan.baidu.com/s/1brjQKhD" target="_blank" rel="external">https://pan.baidu.com/s/1brjQKhD</a> 密码: awja</p>
<p>CleanMyMac 3.9.3 By TNT<br>百度云下载链接: <a href="https://pan.baidu.com/s/1pLOexdD" target="_blank" rel="external">https://pan.baidu.com/s/1pLOexdD</a> 密码: aepm</p>
<p>CleanMyMac 3.9.2<br>百度云下载链接: <a href="https://pan.baidu.com/s/1eSAPg10" target="_blank" rel="external">https://pan.baidu.com/s/1eSAPg10</a> 密码: bcge</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[已更新最新版3.9.4]macOS 10.13 High Sierra 系统垃圾清理神器CleanMyMac 3.9.4最新TNT破解版，对于经济实力允许的用户，请&lt;a href=&quot;https://macpaw.com/zh/store/cleanmymac?cs=c&quot; 
    
    </summary>
    
    
      <category term="other" scheme="http://html-js.site/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>.eslintrc文件配置</title>
    <link href="http://html-js.site/2018/04/09/eslintrc%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <id>http://html-js.site/2018/04/09/eslintrc文件配置/</id>
    <published>2018-04-09T02:34:14.000Z</published>
    <updated>2018-04-09T02:35:11.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="comment">// 环境定义了预定义的全局变量。</span></div><div class="line">    <span class="string">"env"</span>: &#123;</div><div class="line">        <span class="comment">//环境定义了预定义的全局变量。更多在官网查看</span></div><div class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"node"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"commonjs"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"amd"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"es6"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"mocha"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// JavaScript 语言选项</span></div><div class="line">    <span class="string">"parserOptions"</span>: &#123;</div><div class="line">        <span class="comment">// ECMAScript 版本</span></div><div class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</div><div class="line">        <span class="string">"sourceType"</span>: <span class="string">"module"</span>, <span class="comment">//设置为 "script" (默认) 或 "module"（如果你的代码是 ECMAScript 模块)。</span></div><div class="line">        <span class="comment">//想使用的额外的语言特性:</span></div><div class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</div><div class="line">            <span class="comment">// 允许在全局作用域下使用 return 语句</span></div><div class="line">            <span class="string">"globalReturn"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="comment">// impliedStric</span></div><div class="line">            <span class="string">"impliedStrict"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="comment">// 启用 JSX</span></div><div class="line">            <span class="string">"jsx"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"modules"</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//-----让eslint支持 JSX start</span></div><div class="line">    <span class="string">"plugins"</span>: [</div><div class="line">        <span class="string">"react"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"extends"</span>: [</div><div class="line">        <span class="string">"eslint:recommended"</span>,</div><div class="line">        <span class="string">"plugin:react/recommended"</span></div><div class="line">    ],</div><div class="line">    <span class="comment">//-----让eslint支持 JSX end</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * "off" 或 0 - 关闭规则</div><div class="line">     * "warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出),</div><div class="line">     * "error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</div><div class="line">     */</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line"></div><div class="line">        <span class="comment">////////////////</span></div><div class="line">        <span class="comment">// 可能的错误 //</span></div><div class="line">        <span class="comment">////////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 禁止条件表达式中出现赋值操作符</span></div><div class="line">        <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 console</span></div><div class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在条件中使用常量表达式</span></div><div class="line">        <span class="comment">// if (false) &#123;</span></div><div class="line">        <span class="comment">// doSomethingUnfinished();</span></div><div class="line">        <span class="comment">// &#125; //cuowu</span></div><div class="line">        <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用控制字符 ：new RegExp("\x1f")</span></div><div class="line">        <span class="string">"no-control-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</span></div><div class="line">        <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号</span></div><div class="line">        <span class="string">"comma-dangle"</span>: [<span class="number">1</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 禁用 debugger</span></div><div class="line">        <span class="string">"no-debugger"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 function 定义中出现重名参数</span></div><div class="line">        <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对象字面量中出现重复的 key</span></div><div class="line">        <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止重复的 case 标签</span></div><div class="line">        <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止空语句块</span></div><div class="line">        <span class="string">"no-empty"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在正则表达式中使用空字符集 (/^abc[]/)</span></div><div class="line">        <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></div><div class="line">        <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的布尔转换</span></div><div class="line">        <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的括号 //(a * b) + c;//报错</span></div><div class="line">        <span class="string">"no-extra-parens"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止不必要的分号</span></div><div class="line">        <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 function 声明重新赋值</span></div><div class="line">        <span class="string">"no-func-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在嵌套的块中出现 function 或 var 声明</span></div><div class="line">        <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],</div><div class="line">        <span class="comment">// 禁止 RegExp 构造函数中无效的正则表达式字符串</span></div><div class="line">        <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串和注释之外不规则的空白</span></div><div class="line">        <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在 in 表达式中出现否定的左操作数</span></div><div class="line">        <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止把全局对象 (Math 和 JSON) 作为函数调用 错误：var math = Math();</span></div><div class="line">        <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止直接使用 Object.prototypes 的内置属性</span></div><div class="line">        <span class="string">"no-prototype-builtins"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止正则表达式字面量中出现多个空格</span></div><div class="line">        <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用稀疏数组</span></div><div class="line">        <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现令人困惑的多行表达式</span></div><div class="line">        <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在return、throw、continue 和 break语句之后出现不可达代码</span></div><div class="line">        <span class="string">"no-unreachable"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求使用 isNaN() 检查 NaN</span></div><div class="line">        <span class="string">"use-isnan"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制使用有效的 JSDoc 注释</span></div><div class="line">        <span class="string">"valid-jsdoc"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></div><div class="line">        <span class="comment">// typeof foo === "undefimed" 错误</span></div><div class="line">        <span class="string">"valid-typeof"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// 最佳实践 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 定义对象的set存取器属性时，强制定义get</span></div><div class="line">        <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制数组方法的回调函数中有 return 语句</span></div><div class="line">        <span class="string">"array-callback-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制把变量的使用限制在其定义的作用域范围内</span></div><div class="line">        <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 限制圈复杂度，也就是类似if else能连续接多少个</span></div><div class="line">        <span class="string">"complexity"</span>: [<span class="number">2</span>, <span class="number">9</span>],</div><div class="line">        <span class="comment">// 要求 return 语句要么总是指定返回的值，要么不指定</span></div><div class="line">        <span class="string">"consistent-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制所有控制语句使用一致的括号风格</span></div><div class="line">        <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],</div><div class="line">        <span class="comment">// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告</span></div><div class="line">        <span class="string">"default-case"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制object.key 中 . 的位置，参数:</span></div><div class="line">        <span class="comment">// property，'.'号应与属性在同一行</span></div><div class="line">        <span class="comment">// object, '.' 号应与对象名在同一行</span></div><div class="line">        <span class="string">"dot-location"</span>: [<span class="number">2</span>, <span class="string">"property"</span>],</div><div class="line">        <span class="comment">// 强制使用.号取属性</span></div><div class="line">        <span class="comment">// 参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</span></div><div class="line">        <span class="comment">// false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;"allowKeywords": false&#125;]</span></div><div class="line">        <span class="comment">// allowPattern: 当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;"allowPattern": "^[a-z]+(_[a-z]+)+$"&#125;]</span></div><div class="line">        <span class="string">"dot-notation"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"allowKeywords"</span>: <span class="literal">false</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 使用 === 替代 == allow-null允许null和undefined==</span></div><div class="line">        <span class="string">"eqeqeq"</span>: [<span class="number">2</span>, <span class="string">"allow-null"</span>],</div><div class="line">        <span class="comment">// 要求 for-in 循环中有一个 if 语句</span></div><div class="line">        <span class="string">"guard-for-in"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用 alert、confirm 和 prompt</span></div><div class="line">        <span class="string">"no-alert"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 arguments.caller 或 arguments.callee</span></div><div class="line">        <span class="string">"no-caller"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许在 case 子句中使用词法声明</span></div><div class="line">        <span class="string">"no-case-declarations"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止除法操作符显式的出现在正则表达式开始的位置</span></div><div class="line">        <span class="string">"no-div-regex"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 if 语句中有 return 之后有 else</span></div><div class="line">        <span class="string">"no-else-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。</span></div><div class="line">        <span class="string">"no-empty-function"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用空解构模式no-empty-pattern</span></div><div class="line">        <span class="string">"no-empty-pattern"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在没有类型检查操作符的情况下与 null 进行比较</span></div><div class="line">        <span class="string">"no-eq-null"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用 eval()</span></div><div class="line">        <span class="string">"no-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止扩展原生类型</span></div><div class="line">        <span class="string">"no-extend-native"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .bind() 调用</span></div><div class="line">        <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的标签</span></div><div class="line">        <span class="string">"no-extra-label:"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 case 语句落空</span></div><div class="line">        <span class="string">"no-fallthrough"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></div><div class="line">        <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用短符号进行类型转换(!!fOO)</span></div><div class="line">        <span class="string">"no-implicit-coercion"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在全局范围内使用 var 和命名的 function 声明</span></div><div class="line">        <span class="string">"no-implicit-globals"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁止使用类似 eval() 的方法</span></div><div class="line">        <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止 this 关键字出现在类和类对象之外</span></div><div class="line">        <span class="string">"no-invalid-this"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 __iterator__ 属性</span></div><div class="line">        <span class="string">"no-iterator"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用标签语句</span></div><div class="line">        <span class="string">"no-labels"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的嵌套块</span></div><div class="line">        <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在循环中出现 function 声明和表达式</span></div><div class="line">        <span class="string">"no-loop-func"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用魔术数字(3.14什么的用常量代替)</span></div><div class="line">        <span class="string">"no-magic-numbers"</span>: [<span class="number">1</span>, &#123;</div><div class="line">            <span class="string">"ignore"</span>: [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 禁止使用多个空格</span></div><div class="line">        <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用多行字符串，在 JavaScript 中，可以在新行之前使用斜线创建多行字符串</span></div><div class="line">        <span class="string">"no-multi-str"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对原生对象赋值</span></div><div class="line">        <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在非赋值或条件语句中使用 new 操作符</span></div><div class="line">        <span class="string">"no-new"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 Function 对象使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-func"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用八进制字面量</span></div><div class="line">        <span class="string">"no-octal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止在字符串中使用八进制转义序列</span></div><div class="line">        <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许对 function 的参数进行重新赋值</span></div><div class="line">        <span class="string">"no-param-reassign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 __proto__ 属性</span></div><div class="line">        <span class="string">"no-proto"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用 var 多次声明同一变量</span></div><div class="line">        <span class="string">"no-redeclare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用指定的通过 require 加载的模块</span></div><div class="line">        <span class="string">"no-return-assign"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 javascript: url</span></div><div class="line">        <span class="string">"no-script-url"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止自我赋值</span></div><div class="line">        <span class="string">"no-self-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止自身比较</span></div><div class="line">        <span class="string">"no-self-compare"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用逗号操作符</span></div><div class="line">        <span class="string">"no-sequences"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止抛出非异常字面量</span></div><div class="line">        <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用一成不变的循环条件</span></div><div class="line">        <span class="string">"no-unmodified-loop-condition"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的表达式</span></div><div class="line">        <span class="string">"no-unused-expressions"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用未使用过的标签</span></div><div class="line">        <span class="string">"no-unused-labels"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></div><div class="line">        <span class="string">"no-useless-call"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的字符串字面量或模板字面量的连接</span></div><div class="line">        <span class="string">"no-useless-concat"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用不必要的转义字符</span></div><div class="line">        <span class="string">"no-useless-escape"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 void 操作符</span></div><div class="line">        <span class="string">"no-void"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在注释中使用特定的警告术语</span></div><div class="line">        <span class="string">"no-warning-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 with 语句</span></div><div class="line">        <span class="string">"no-with"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在parseInt()使用基数参数</span></div><div class="line">        <span class="string">"radix"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求所有的 var 声明出现在它们所在的作用域顶部</span></div><div class="line">        <span class="string">"vars-on-top"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 IIFE 使用括号括起来</span></div><div class="line">        <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"any"</span>],</div><div class="line">        <span class="comment">// 要求或禁止 “Yoda” 条件</span></div><div class="line">        <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 要求或禁止使用严格模式指令</span></div><div class="line">        <span class="string">"strict"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// 变量声明 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 要求或禁止 var 声明中的初始化(初值)</span></div><div class="line">        <span class="string">"init-declarations"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许 catch 子句的参数与外层作用域中的变量同名</span></div><div class="line">        <span class="string">"no-catch-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止删除变量</span></div><div class="line">        <span class="string">"no-delete-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许标签与变量同名</span></div><div class="line">        <span class="string">"no-label-var"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用特定的全局变量</span></div><div class="line">        <span class="string">"no-restricted-globals"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 var 声明 与外层作用域的变量同名</span></div><div class="line">        <span class="string">"no-shadow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止覆盖受限制的标识符</span></div><div class="line">        <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></div><div class="line">        <span class="string">"no-undef"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将变量初始化为 undefined</span></div><div class="line">        <span class="string">"no-undef-init"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止将 undefined 作为标识符</span></div><div class="line">        <span class="string">"no-undefined"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止出现未使用过的变量</span></div><div class="line">        <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"vars"</span>: <span class="string">"all"</span>,</div><div class="line">            <span class="string">"args"</span>: <span class="string">"none"</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 不允许在变量定义之前使用它们</span></div><div class="line">        <span class="string">"no-use-before-define"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////////////////</span></div><div class="line">        <span class="comment">// Node.js and CommonJS //</span></div><div class="line">        <span class="comment">//////////////////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// require return statements after callbacks</span></div><div class="line">        <span class="string">"callback-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 require() 出现在顶层模块作用域中</span></div><div class="line">        <span class="string">"global-require"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求回调函数中有容错处理</span></div><div class="line">        <span class="string">"handle-callback-err"</span>: [<span class="number">2</span>, <span class="string">"^(err|error)$"</span>],</div><div class="line">        <span class="comment">// 禁止混合常规 var 声明和 require 调用</span></div><div class="line">        <span class="string">"no-mixed-requires"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止调用 require 时使用 new 操作符</span></div><div class="line">        <span class="string">"no-new-require"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止对 __dirname 和 __filename进行字符串连接</span></div><div class="line">        <span class="string">"no-path-concat"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 process.env</span></div><div class="line">        <span class="string">"no-process-env"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用 process.exit()</span></div><div class="line">        <span class="string">"no-process-exit"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用同步方法</span></div><div class="line">        <span class="string">"no-sync"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// 风格指南 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></div><div class="line">        <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 禁止或强制在单行代码块中使用空格(禁用)</span></div><div class="line">        <span class="string">"block-spacing"</span>: [<span class="number">1</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">//强制使用一致的缩进 第二个参数为 "tab" 时，会使用tab，</span></div><div class="line">        <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></div><div class="line">        <span class="string">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123;</div><div class="line">            <span class="string">"allowSingleLine"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 双峰驼命名格式</span></div><div class="line">        <span class="string">"camelcase"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 控制逗号前后的空格</span></div><div class="line">        <span class="string">"comma-spacing"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"before"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"after"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 控制逗号在行尾出现还是在行首出现 (默认行尾)</span></div><div class="line">        <span class="comment">// http://eslint.org/docs/rules/comma-style</span></div><div class="line">        <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],</div><div class="line">        <span class="comment">//"SwitchCase" (默认：0) 强制 switch 语句中的 case 子句的缩进水平</span></div><div class="line">        <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></div><div class="line">        <span class="string">"computed-property-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</span></div><div class="line">        <span class="comment">// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</span></div><div class="line">        <span class="string">"consistent-this"</span>: [<span class="number">1</span>, <span class="string">"that"</span>],</div><div class="line">        <span class="comment">// 强制使用命名的 function 表达式</span></div><div class="line">        <span class="string">"func-names"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 文件末尾强制换行</span></div><div class="line">        <span class="string">"eol-last"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>, &#123;</div><div class="line">            <span class="string">"SwitchCase"</span>: <span class="number">1</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 强制在对象字面量的属性中键和值之间使用一致的间距</span></div><div class="line">        <span class="string">"key-spacing"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">"afterColon"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 强制使用一致的换行风格</span></div><div class="line">        <span class="string">"linebreak-style"</span>: [<span class="number">1</span>, <span class="string">"unix"</span>],</div><div class="line">        <span class="comment">// 要求在注释周围有空行 ( 要求在块级注释之前有一空行)</span></div><div class="line">        <span class="string">"lines-around-comment"</span>: [<span class="number">1</span>, &#123;</div><div class="line">            <span class="string">"beforeBlockComment"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 强制一致地使用函数声明或函数表达式，方法定义风格，参数：</span></div><div class="line">        <span class="comment">// declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, "declaration"]</span></div><div class="line">        <span class="comment">// expression：强制使用方法表达式的方式，var f = function() &#123;&#125; e.g [2, "expression"]</span></div><div class="line">        <span class="comment">// allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", &#123; "allowArrowFunctions": true &#125;]</span></div><div class="line">        <span class="string">"func-style"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制回调函数最大嵌套深度 5层</span></div><div class="line">        <span class="string">"max-nested-callbacks"</span>: [<span class="number">1</span>, <span class="number">5</span>],</div><div class="line">        <span class="comment">// 禁止使用指定的标识符</span></div><div class="line">        <span class="string">"id-blacklist"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制标识符的最新和最大长度</span></div><div class="line">        <span class="string">"id-length"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求标识符匹配一个指定的正则表达式</span></div><div class="line">        <span class="string">"id-match"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></div><div class="line">        <span class="string">"jsx-quotes"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在关键字前后使用一致的空格 (前后腰需要)</span></div><div class="line">        <span class="string">"keyword-spacing"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制一行的最大长度</span></div><div class="line">        <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">200</span>],</div><div class="line">        <span class="comment">// 强制最大行数</span></div><div class="line">        <span class="string">"max-lines"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制 function 定义中最多允许的参数数量</span></div><div class="line">        <span class="string">"max-params"</span>: [<span class="number">1</span>, <span class="number">7</span>],</div><div class="line">        <span class="comment">// 强制 function 块最多允许的的语句数量</span></div><div class="line">        <span class="string">"max-statements"</span>: [<span class="number">1</span>, <span class="number">200</span>],</div><div class="line">        <span class="comment">// 强制每一行中所允许的最大语句数量</span></div><div class="line">        <span class="string">"max-statements-per-line"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求构造函数首字母大写 （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）</span></div><div class="line">        <span class="string">"new-cap"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"newIsCap"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"capIsNew"</span>: <span class="literal">false</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 要求调用无参构造函数时有圆括号</span></div><div class="line">        <span class="string">"new-parens"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求或禁止 var 声明语句后有一行空行</span></div><div class="line">        <span class="string">"newline-after-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 Array 构造函数</span></div><div class="line">        <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁用按位运算符</span></div><div class="line">        <span class="string">"no-bitwise"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求 return 语句之前有一空行</span></div><div class="line">        <span class="string">"newline-before-return"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求方法链中每个调用都有一个换行符</span></div><div class="line">        <span class="string">"newline-per-chained-call"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 禁用 continue 语句</span></div><div class="line">        <span class="string">"no-continue"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在代码行后使用内联注释</span></div><div class="line">        <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 if 作为唯一的语句出现在 else 语句中</span></div><div class="line">        <span class="string">"no-lonely-if"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止混合使用不同的操作符</span></div><div class="line">        <span class="string">"no-mixed-operators"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许空格和 tab 混合缩进</span></div><div class="line">        <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许多个空行</span></div><div class="line">        <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"max"</span>: <span class="number">2</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 不允许否定的表达式</span></div><div class="line">        <span class="string">"no-negated-condition"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 不允许使用嵌套的三元表达式</span></div><div class="line">        <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用 Object 的构造函数</span></div><div class="line">        <span class="string">"no-new-object"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止使用一元操作符 ++ 和 --</span></div><div class="line">        <span class="string">"no-plusplus"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止使用特定的语法</span></div><div class="line">        <span class="string">"no-restricted-syntax"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 function 标识符和括号之间出现空格</span></div><div class="line">        <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许使用三元操作符</span></div><div class="line">        <span class="string">"no-ternary"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁用行尾空格</span></div><div class="line">        <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止标识符中有悬空下划线_bar</span></div><div class="line">        <span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止可以在有更简单的可替代的表达式时使用三元操作符</span></div><div class="line">        <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止属性前有空白</span></div><div class="line">        <span class="string">"no-whitespace-before-property"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制花括号内换行符的一致性</span></div><div class="line">        <span class="string">"object-curly-newline"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在花括号中使用一致的空格</span></div><div class="line">        <span class="string">"object-curly-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制将对象的属性放在不同的行上</span></div><div class="line">        <span class="string">"object-property-newline"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></div><div class="line">        <span class="string">"one-var"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"initialized"</span>: <span class="string">"never"</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 要求或禁止在 var 声明周围换行</span></div><div class="line">        <span class="string">"one-var-declaration-per-line"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止在可能的情况下要求使用简化的赋值操作符</span></div><div class="line">        <span class="string">"operator-assignment"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制操作符使用一致的换行符</span></div><div class="line">        <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>, &#123;</div><div class="line">            <span class="string">"overrides"</span>: &#123;</div><div class="line">                <span class="string">"?"</span>: <span class="string">"before"</span>,</div><div class="line">                <span class="string">":"</span>: <span class="string">"before"</span></div><div class="line">            &#125;</div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 要求或禁止块内填充</span></div><div class="line">        <span class="string">"padded-blocks"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求对象字面量属性名称用引号括起来</span></div><div class="line">        <span class="string">"quote-props"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></div><div class="line">        <span class="string">"quotes"</span>: [<span class="number">2</span>, <span class="string">"double"</span>, <span class="string">"avoid-escape"</span>],</div><div class="line">        <span class="comment">// 要求使用 JSDoc 注释</span></div><div class="line">        <span class="string">"require-jsdoc"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 要求或禁止使用分号而不是 ASI（这个才是控制行尾部分号的，）</span></div><div class="line">        <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制分号之前和之后使用一致的空格</span></div><div class="line">        <span class="string">"semi-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求同一个声明块中的变量按顺序排列</span></div><div class="line">        <span class="string">"sort-vars"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制在块之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-blocks"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制在 function的左括号之前使用一致的空格</span></div><div class="line">        <span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],</div><div class="line">        <span class="comment">// 强制在圆括号内使用一致的空格</span></div><div class="line">        <span class="string">"space-in-parens"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</div><div class="line">        <span class="comment">// 要求操作符周围有空格</span></div><div class="line">        <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 强制在一元操作符前后使用一致的空格</span></div><div class="line">        <span class="string">"space-unary-ops"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"words"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"nonwords"</span>: <span class="literal">false</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></div><div class="line">        <span class="string">"spaced-comment"</span>: [<span class="number">2</span>, <span class="string">"always"</span>, &#123;</div><div class="line">            <span class="string">"markers"</span>: [<span class="string">"global"</span>, <span class="string">"globals"</span>, <span class="string">"eslint"</span>, <span class="string">"eslint-disable"</span>, <span class="string">"*package"</span>, <span class="string">"!"</span>]</div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 要求或禁止 Unicode BOM</span></div><div class="line">        <span class="string">"unicode-bom"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求正则表达式被括号括起来</span></div><div class="line">        <span class="string">"wrap-regex"</span>: <span class="number">0</span>,</div><div class="line"></div><div class="line">        <span class="comment">//////////////</span></div><div class="line">        <span class="comment">// ES6.相关 //</span></div><div class="line">        <span class="comment">//////////////</span></div><div class="line"></div><div class="line">        <span class="comment">// 要求箭头函数体使用大括号</span></div><div class="line">        <span class="string">"arrow-body-style"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 要求箭头函数的参数使用圆括号</span></div><div class="line">        <span class="string">"arrow-parens"</span>: <span class="number">2</span>,</div><div class="line">        <span class="string">"arrow-spacing"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"before"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"after"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</span></div><div class="line">        <span class="string">"constructor-super"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制 generator 函数中 * 号周围使用一致的空格</span></div><div class="line">        <span class="string">"generator-star-spacing"</span>: [<span class="number">2</span>, &#123;</div><div class="line">            <span class="string">"before"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="string">"after"</span>: <span class="literal">true</span></div><div class="line">        &#125;],</div><div class="line">        <span class="comment">// 禁止修改类声明的变量</span></div><div class="line">        <span class="string">"no-class-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许箭头功能，在那里他们可以混淆的比较</span></div><div class="line">        <span class="string">"no-confusing-arrow"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止修改 const 声明的变量</span></div><div class="line">        <span class="string">"no-const-assign"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止类成员中出现重复的名称</span></div><div class="line">        <span class="string">"no-dupe-class-members"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 不允许复制模块的进口</span></div><div class="line">        <span class="string">"no-duplicate-imports"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止 Symbol 的构造函数</span></div><div class="line">        <span class="string">"no-new-symbol"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 允许指定模块加载时的进口</span></div><div class="line">        <span class="string">"no-restricted-imports"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 禁止在构造函数中，在调用 super() 之前使用 this 或 super</span></div><div class="line">        <span class="string">"no-this-before-super"</span>: <span class="number">2</span>,</div><div class="line">        <span class="comment">// 禁止不必要的计算性能键对象的文字</span></div><div class="line">        <span class="string">"no-useless-computed-key"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用 let 或 const 而不是 var</span></div><div class="line">        <span class="string">"no-var"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止对象字面量中方法和属性使用简写语法</span></div><div class="line">        <span class="string">"object-shorthand"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用箭头函数作为回调</span></div><div class="line">        <span class="string">"prefer-arrow-callback"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></div><div class="line">        <span class="string">"prefer-const"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求在合适的地方使用 Reflect 方法</span></div><div class="line">        <span class="string">"prefer-reflect"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用扩展运算符而非 .apply()</span></div><div class="line">        <span class="string">"prefer-spread"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求使用模板字面量而非字符串连接</span></div><div class="line">        <span class="string">"prefer-template"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// Suggest using the rest parameters instead of arguments</span></div><div class="line">        <span class="string">"prefer-rest-params"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求generator 函数内有 yield</span></div><div class="line">        <span class="string">"require-yield"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// enforce spacing between rest and spread operators and their expressions</span></div><div class="line">        <span class="string">"rest-spread-spacing"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 强制模块内的 import 排序</span></div><div class="line">        <span class="string">"sort-imports"</span>: <span class="number">0</span>,</div><div class="line">        <span class="comment">// 要求或禁止模板字符串中的嵌入表达式周围空格的使用</span></div><div class="line">        <span class="string">"template-curly-spacing"</span>: <span class="number">1</span>,</div><div class="line">        <span class="comment">// 强制在 yield* 表达式中 * 周围使用空格</span></div><div class="line">        <span class="string">"yield-star-spacing"</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;
    
    </summary>
    
    
      <category term="eslint" scheme="http://html-js.site/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>Fetch</title>
    <link href="http://html-js.site/2018/04/08/Fetch/"/>
    <id>http://html-js.site/2018/04/08/Fetch/</id>
    <published>2018-04-08T12:18:01.000Z</published>
    <updated>2018-04-08T13:05:11.619Z</updated>
    
    <content type="html"><![CDATA[<p>由于 Fetch API 是基于 Promise 设计，有必要先学习一下 Promise，推荐阅读 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">MDN Promise</a> 教程。旧浏览器不支持 Promise，需要使用 polyfill <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="external">es6-promise</a> 。</p>
<p>本文不是 Fetch API 科普贴，其实是讲异步处理和 Promise 的。Fetch API 很简单，看文档很快就学会了。推荐 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch" target="_blank" rel="external">MDN Fetch</a> 教程 和 万能的<a href="https://fetch.spec.whatwg.org/" target="_blank" rel="external">WHATWG Fetch</a> 规范</p>
<h3 id="Why-Fetch"><a href="#Why-Fetch" class="headerlink" title="Why Fetch"></a>Why Fetch</h3><p>XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。</p>
<p>Fetch 的出现就是为了解决 XHR 的问题，拿例子说明：</p>
<p>使用 XHR 发送一个 json 请求一般是这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">'GET'</span>, url);</div><div class="line">xhr.responseType = <span class="string">'json'</span>;</div><div class="line"></div><div class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(xhr.response);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xhr.send();</div></pre></td></tr></table></figure></p>
<p>使用 Fetch 后，顿时看起来好一点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> response.json();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用 ES6 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">箭头函数</a> 后：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</div><div class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</div><div class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e))</div></pre></td></tr></table></figure></p>
<p>现在看起来好很多了，但这种 Promise 的写法还是有 Callback 的影子，而且 promise 使用 catch 方法来进行错误处理的方式有点奇怪。不用急，下面使用 async/await 来做最终优化：</p>
<blockquote>
<p>注：async/await 是非常新的 API，属于 ES7，目前尚在 Stage 1(提议) 阶段，这是它的<a href="https://github.com/lukehoban/ecmascript-asyncawait。使用 [Babel](https://babeljs.io/" target="_blank" rel="external">完整规范</a> 开启 <a href="https://babeljs.io/docs/usage/runtime/" target="_blank" rel="external">runtime</a> 模式后可以把 async/await 无痛编译成 ES5 代码。也可以直接使用 <a href="https://github.com/facebook/regenerator" target="_blank" rel="external">regenerator</a> 来编译到 ES5。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</div><div class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.json();</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 注：这段代码如果想运行，外面需要包一个 async function</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>duang~~ 的一声，使用 <code>await</code> 后，<b>写异步代码就像写同步代码一样爽</b>。<code>await</code> 后面可以跟 <code>Promise</code> 对象，表示等待 <code>Promise resolve()</code> 才会继续向下执行，如果 Promise 被 <code>reject()</code> 或抛出异常则会被外面的 <code>try...catch</code> 捕获。</p>
<p>Promise，generator/yield，await/async 都是现在和未来 JS 解决异步的标准做法，可以完美搭配使用。这也是使用标准 Promise 一大好处。最近也把项目中使用第三方 Promise 库的代码全部转成标准 Promise，为以后全面使用 async/await 做准备。</p>
<p>另外，Fetch 也很适合做现在流行的同构应用，有人基于 Fetch 的语法，在 Node 端基于 http 库实现了 <a href="https://github.com/bitinn/node-fetch" target="_blank" rel="external">node-fetch</a>，又有人封装了用于同构应用的 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="external">isomorphic-fetch</a>。</p>
<blockquote>
<p>注：同构(isomorphic/universal)就是使前后端运行同一套代码的意思，后端一般是指 NodeJS 环境。</p>
</blockquote>
<p>总结一下，Fetch 优点主要有：</p>
<ul>
<li>语法简洁，更加语义化</li>
<li>基于标准 Promise 实现，支持 async/await</li>
<li>同构方便，使用 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="external">isomorphic-fetch</a></li>
</ul>
<h3 id="Fetch-启用方法"><a href="#Fetch-启用方法" class="headerlink" title="Fetch 启用方法"></a>Fetch 启用方法</h3><p>下面是重点↓↓↓</p>
<p>先看一下 Fetch 原生支持率：<br><img src="/images/page/fetch/1.png" alt=""></p>
<p>原生支持率并不高，幸运的是，引入下面这些 polyfill 后可以完美支持 IE8+ ：</p>
<ul>
<li>由于 IE8 是 ES3，需要引入 ES5 的 polyfill: <a href="https://github.com/es-shims/es5-shim" target="_blank" rel="external">es5-shim, es5-sham</a></li>
<li>引入 Promise 的 polyfill: <a href="https://github.com/jakearchibald/es6-promise" target="_blank" rel="external">es6-promise</a></li>
<li>引入 fetch 探测库：<a href="https://github.com/camsong/fetch-detector" target="_blank" rel="external">fetch-detector</a></li>
<li>引入 fetch 的 polyfill: <a href="https://github.com/camsong/fetch-ie8" target="_blank" rel="external">fetch-ie8</a></li>
<li>可选：如果你还使用了 jsonp，引入 <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="external">fetch-jsonp</a></li>
<li>可选：开启 Babel 的 runtime 模式，现在就使用 async/await</li>
</ul>
<p>Fetch polyfill 的基本原理是探测是否存在 <code>window.fetch</code> 方法，如果没有则用 XHR 实现。这也是 <a href="https://github.com/github/fetch" target="_blank" rel="external">github/fetch</a> 的做法，但是有些浏览器（Chrome 45）原生支持 Fetch，但响应中有中文时会乱码，老外又不太关心这种问题，所以我自己才封装了 <code>fetch-detector</code> 和 <code>fetch-ie8</code> 只在浏览器稳定支持 Fetch 情况下才使用原生 Fetch。这些库现在 <b>每天有几千万个请求都在使用，绝对靠谱</b> ！</p>
<p>终于，引用了这一堆 polyfill 后，可以愉快地使用 Fetch 了。但要小心，下面有坑：</p>
<h3 id="Fetch-常见坑"><a href="#Fetch-常见坑" class="headerlink" title="Fetch 常见坑"></a>Fetch 常见坑</h3><ul>
<li>Fetch 请求默认是不带 cookie 的，需要设置 fetch(url, {credentials: ‘include’})</li>
<li>服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>
</ul>
<h3 id="IE-使用策略"><a href="#IE-使用策略" class="headerlink" title="IE 使用策略"></a>IE 使用策略</h3><p>所有版本的 IE 均不支持原生 Fetch，fetch-ie8 会自动使用 XHR 做 polyfill。但在跨域时有个问题需要处理。</p>
<p>IE8, 9 的 XHR 不支持 CORS 跨域，虽然提供 <code>XDomainRequest</code>，但这个东西就是玩具，不支持传 Cookie！如果接口需要权限验证，还是乖乖地使用 jsonp 吧，推荐使用 <a href="https://github.com/camsong/fetch-jsonp" target="_blank" rel="external">fetch-jsonp</a>。如果有问题直接提 issue，我会第一时间解决。</p>
<h3 id="Fetch-和标准-Promise-的不足"><a href="#Fetch-和标准-Promise-的不足" class="headerlink" title="Fetch 和标准 Promise 的不足"></a>Fetch 和标准 Promise 的不足</h3><p>由于 Fetch 是典型的异步场景，所以大部分遇到的问题不是 Fetch 的，其实是 Promise 的。ES6 的 Promise 是基于 <a href="https://promisesaplus.com/" target="_blank" rel="external">Promises/A+ </a>标准，为了保持 简单简洁 ，只提供极简的几个 API。如果你用过一些牛 X 的异步库，如 jQuery(不要笑) 、Q.js 或者 RSVP.js，可能会感觉 Promise 功能太少了。</p>
<h4 id="没有-Deferred"><a href="#没有-Deferred" class="headerlink" title="没有 Deferred"></a>没有 Deferred</h4><p><a href="http://api.jquery.com/category/deferred-object/" target="_blank" rel="external">Deferred</a> 可以在创建 Promise 时可以减少一层嵌套，还有就是跨方法使用时很方便。<br>ECMAScript 11 年就有过 <a href="http://wiki.ecmascript.org/doku.php?id=strawman:deferred_functions" target="_blank" rel="external">Deferred 提案</a>，但后来没被接受。其实用 Promise 不到十行代码就能实现 Deferred：<a href="https://github.com/seangenabe/es6-deferred/blob/master/deferred.js" target="_blank" rel="external">es6-deferred</a>。现在有了 async/await，generator/yield 后，deferred 就没有使用价值了。</p>
<h4 id="没有获取状态方法：isRejected，isResolved"><a href="#没有获取状态方法：isRejected，isResolved" class="headerlink" title="没有获取状态方法：isRejected，isResolved"></a>没有获取状态方法：isRejected，isResolved</h4><p>标准 Promise 没有提供获取当前状态 rejected 或者 resolved 的方法。只允许外部传入成功或失败后的回调。我认为这其实是优点，这是一种声明式的接口，更简单。</p>
<h4 id="缺少其它一些方法：always，progress，finally"><a href="#缺少其它一些方法：always，progress，finally" class="headerlink" title="缺少其它一些方法：always，progress，finally"></a>缺少其它一些方法：always，progress，finally</h4><p>always 可以通过在 then 和 catch 里重复调用方法实现。finally 也类似。progress 这种进度通知的功能还没有用过，暂不知道如何替代。</p>
<h4 id="不能中断，没有-abort、terminate、onTimeout-或-cancel-方法"><a href="#不能中断，没有-abort、terminate、onTimeout-或-cancel-方法" class="headerlink" title="不能中断，没有 abort、terminate、onTimeout 或 cancel 方法"></a>不能中断，没有 abort、terminate、onTimeout 或 cancel 方法</h4><p>Fetch 和 Promise 一样，一旦发起，不能中断，也不会超时，只能等待被 resolve 或 reject。幸运的是，whatwg 目前正在尝试解决这个问题 <a href="https://github.com/whatwg/fetch/issues/27" target="_blank" rel="external">whatwg/fetch#27</a></p>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul>
<li><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="external">WHATWG Fetch 规范</a></li>
<li><a href="http://bubkoo.com/2015/05/08/introduction-to-fetch/" target="_blank" rel="external">Fetch API 简介</a></li>
<li><a href="http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html" target="_blank" rel="external">教你驯服 async</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/05/async.html" target="_blank" rel="external">阮一峰介绍 async</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 Fetch API 是基于 Promise 设计，有必要先学习一下 Promise，推荐阅读 &lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objec
    
    </summary>
    
    
      <category term="javascript" scheme="http://html-js.site/tags/javascript/"/>
    
      <category term="fetch" scheme="http://html-js.site/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>React框架精髓</title>
    <link href="http://html-js.site/2018/04/08/React%E6%A1%86%E6%9E%B6%E7%B2%BE%E9%AB%93/"/>
    <id>http://html-js.site/2018/04/08/React框架精髓/</id>
    <published>2018-04-08T06:19:28.000Z</published>
    <updated>2018-04-08T07:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-diff-算法"><a href="#React-diff-算法" class="headerlink" title="React diff 算法"></a>React diff 算法</h2><p>React的<code>diff</code>算法是<code>Virtual DOM</code>之所以任性的最大依仗，大家知道页面的性能 一般是由渲染速度和渲染次数决定，如何最大程度地利用<code>diff</code>算法进行开发？我们先看看它的原理。</p>
<h3 id="传统-diff-算法"><a href="#传统-diff-算法" class="headerlink" title="传统 diff 算法"></a>传统 diff 算法</h3><p>计算一棵树形结构转换成另一棵树形结构的最少操作，传统 <code>diff</code> 算法通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 <code>O(n^3)</code>，其中 <code>n</code> 是树中节点的总数。也就是说如果要展示1000个节点，就要依次执行上十亿次的比较。这个性能消耗对对于前端项目来说是不可接受的。</p>
<h3 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h3><p>如上所见，传统 <code>diff</code> 算法的复杂度为 <code>O(n^3)</code>，显然这是无法满足性能要求的。而<code>React</code>通过制定大胆的策略，将 <code>O(n^3)</code> 复杂度的问题转换成 <code>O(n)</code> 复杂度的问题。他是怎么做到的？</p>
<h3 id="tree-diff"><a href="#tree-diff" class="headerlink" title="tree diff"></a>tree diff</h3><p>Web UI 中 DOM 节点跨层级的移动操作特别少，可以忽略不计。React 对树的算法进行了简洁明了的优化，即对树进行分层比较，两棵树只会对同一层次的节点进行比较。如下图所示：</p>
<p><img src="/images/page/react/2.png" alt=""></p>
<blockquote>
<p>React 通过 updateDepth 对 Virtual DOM 树进行层级控制，只会对相同颜色方框内的 DOM 节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在，则该节点及其子节点会被完全删除掉，不会用于进一步的比较。这样只需要对树进行一次遍历，便能完成整个 DOM 树的比较。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tree diff算法实现</span></div><div class="line">updateChildren: <span class="function"><span class="keyword">function</span>(<span class="params">nextNestedChildrenElements, transaction, context</span>) </span>&#123;</div><div class="line">  updateDepth++;</div><div class="line">  <span class="keyword">var</span> errorThrown = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">this</span>._updateChildren(nextNestedChildrenElements, transaction, context);</div><div class="line">    errorThrown = <span class="literal">false</span>;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    updateDepth--;</div><div class="line">    <span class="keyword">if</span> (!updateDepth) &#123;</div><div class="line">      <span class="keyword">if</span> (errorThrown) &#123;</div><div class="line">        clearQueue();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        processQueue();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="为什么要减少DOM节点的跨层级操作？"><a href="#为什么要减少DOM节点的跨层级操作？" class="headerlink" title="为什么要减少DOM节点的跨层级操作？"></a>为什么要减少DOM节点的跨层级操作？</h3><p>如下图，A 节点（包括其子节点）整个被移动到 D 节点下，由于 React 只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只有创建和删除操作。当根节点发现子节点中 A 消失了，就会直接销毁 A；当 D 发现多了一个子节点 A，则会创建新的 A（包括子节点）作为其子节点。此时，<code>React diff</code> 的执行情况：create A -&gt; create B -&gt; create C -&gt; delete A。</p>
<p><img src="/images/page/react/3.png" alt=""></p>
<p>由此可发现，当出现节点跨层级移动时，并不会出现想象中的移动操作，而是以 A 为根节点的树被整个重新创建，这是一种影响 <code>React</code> 性能的操作。</p>
<h3 id="component-diff"><a href="#component-diff" class="headerlink" title="component diff"></a>component diff</h3><p>拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。</p>
<ul>
<li>如果是同一类型的组件，按照原策略继续比较 <code>virtual DOM tree</code>。</li>
<li>如果不是，则将该组件判断为 <code>dirty component</code>，从而替换整个组件下的所有子节点。</li>
<li>对于同一类型的组件，有可能其 <code>Virtual DOM</code> 没有任何变化，如果能够确切的知道这点那可以节省大量的 diff 运算时间，因此 <code>React</code> 允许用户通过 <code>shouldComponentUpdate()</code> 来判断该组件是否需要进行 diff。</li>
</ul>
<p><img src="/images/page/react/4.png" alt=""></p>
<p>如上图，当 <code>component D</code> 改变为 <code>component G</code> 时，即使这两个 <code>component</code> 结构相似，一旦 <code>React</code> 判断 D 和 G 是不同类型的组件，就不会比较二者的结构，而是直接删除 <code>component D</code>，重新创建 <code>component G</code> 以及其子节点。虽然当两个 <code>component</code> 是不同类型但结构相似时，<code>React diff</code> 会影响性能，但正如 <code>React</code> 官方博客所言：不同类型的 <code>component</code> 是很少存在相似 <code>DOM tree</code> 的机会，因此这种极端因素很难在实现开发过程中造成重大影响的。</p>
<h3 id="element-diff"><a href="#element-diff" class="headerlink" title="element diff"></a>element diff</h3><p>对于同一层级的一组子节点，它们可以通过唯一 id 进行区分。React 提出优化策略：允许开发者对同一层级的同组子节点，添加唯一 key 进行区分，虽然只是小小的改动，性能上却发生了翻天覆地的变化！</p>
<p>新老集合所包含的节点，如下图所示，新老集合进行 diff 差异化对比，通过 key 发现新老集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将老集合中节点的位置进行移动，更新为新集合中节点的位置，此时 React 给出的 diff 结果为：B、D 不做任何操作，A、C 进行移动操作，即可。</p>
<p><img src="/images/page/react/5.png" alt=""></p>
<h3 id="开发建议"><a href="#开发建议" class="headerlink" title="开发建议"></a>开发建议</h3><p>（1）<b>[基于tree diff]</b> 开发组件时，保持稳定的DOM结构有助于维持整体的性能。换而言之，尽可能少地动态操作DOM结构，尤其是移动操作。当节点数过大或者页面更新次数过多时，页面卡顿的现象比较明显。可以通过 CSS 隐藏或显示节点，而不是真的移除或添加 DOM 节点。</p>
<p>（2）<b>[基于component diff]</b> 开发组件时，注意使用 <code>shouldComponentUpdate()</code> 来减少组件不必要的更新。除此之外，对于类似的结构应该尽量封装成组件，既减少代码量，又能减少<code>component diff</code>的性能消耗。</p>
<p>（3）<b>[基于element diff]</b> 对于列表结构，尽量减少类似将最后一个节点移动到列表首部的操作，当节点数量过大或更新操作过于频繁时，在一定程度上会影响 React 的渲染性能。</p>
<h2 id="React-Lifecycle"><a href="#React-Lifecycle" class="headerlink" title="React Lifecycle"></a>React Lifecycle</h2><p>React的生命周期具体可分为四种情况：<br><img src="/images/page/react/6.png" alt=""></p>
<ul>
<li><p>当首次装载组件时，按顺序执行 <code>getDefaultProps</code>、<code>getInitialState</code>、<code>componentWillMount``、render</code> 和 <code>componentDidMount；</code></p>
</li>
<li><p>当卸载组件时，执行 <code>componentWillUnmount</code>；</p>
</li>
<li><p>当重新装载组件时，此时按顺序执行 <code>getInitialState</code>、<code>componentWillMount``、render</code> 和 <code>componentDidMount</code>，但并不执行 <code>getDefaultProps</code>；</p>
</li>
<li><p>当再次渲染组件时，组件接受到更新状态，此时按顺序执行 <code>componentWillReceiveProps</code>、<code>shouldComponentUpdate</code>、<code>componentWillUpdate</code>、<code>render</code> 和 <code>componentDidUpdate</code>。</p>
</li>
</ul>
<h2 id="React组件的3种状态"><a href="#React组件的3种状态" class="headerlink" title="React组件的3种状态"></a>React组件的3种状态</h2><h3 id="状态一：MOUNTING"><a href="#状态一：MOUNTING" class="headerlink" title="状态一：MOUNTING"></a>状态一：MOUNTING</h3><p><code>mountComponent</code> 负责管理生命周期中的 <code>getInitialState</code>、<code>componentWillMount``、render</code> 和 <code>componentDidMount</code>。<br><img src="/images/page/react/7.png" alt=""></p>
<h3 id="状态二：RECEIVE-PROPS"><a href="#状态二：RECEIVE-PROPS" class="headerlink" title="状态二：RECEIVE_PROPS"></a>状态二：RECEIVE_PROPS</h3><p><code>updateComponent</code> 负责管理生命周期中的 <code>componentWillReceiveProps</code>、<code>shouldComponentUpdate</code>、<code>componentWillUpdate</code>、<code>render</code> 和 <code>componentDidUpdate</code>。<br><img src="/images/page/react/8.png" alt=""></p>
<h3 id="状态三：UNMOUNTING"><a href="#状态三：UNMOUNTING" class="headerlink" title="状态三：UNMOUNTING"></a>状态三：UNMOUNTING</h3><p><code>unmountComponent</code> 负责管理生命周期中的 <code>componentWillUnmount</code>。</p>
<p>首先将状态设置为 <code>UNMOUNTING</code>，若存在 <code>componentWillUnmount</code>，则执行；如果此时在 <code>componentWillUnmount</code> 中调用 <code>setState</code>，是不会触发 <code>reRender</code>。更新状态为 <code>NULL</code>，完成组件卸载操作。实现代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 卸载组件</span></div><div class="line">unmountComponent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 设置状态为 UNMOUNTING</span></div><div class="line">  <span class="keyword">this</span>._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;</div><div class="line"></div><div class="line">  <span class="comment">// 如果存在 componentWillUnmount，则触发</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.componentWillUnmount) &#123;</div><div class="line">    <span class="keyword">this</span>.componentWillUnmount();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 更新状态为 null</span></div><div class="line">  <span class="keyword">this</span>._compositeLifeCycleState = <span class="literal">null</span>;</div><div class="line">  <span class="keyword">this</span>._renderedComponent.unmountComponent();</div><div class="line">  <span class="keyword">this</span>._renderedComponent = <span class="literal">null</span>;</div><div class="line"></div><div class="line">  ReactComponent.Mixin.unmountComponent.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="React生命周期总结"><a href="#React生命周期总结" class="headerlink" title="React生命周期总结"></a>React生命周期总结</h2><p><img src="/images/page/react/9.png" alt=""></p>
<p><img src="/images/page/react/10.png" alt=""></p>
<h2 id="setState实现机制"><a href="#setState实现机制" class="headerlink" title="setState实现机制"></a>setState实现机制</h2><p><code>setState</code>是<code>React</code>框架的核心方法之一，下面介绍一下它的原理：<br><img src="/images/page/react/11.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更新 state</span></div><div class="line">setState: <span class="function"><span class="keyword">function</span>(<span class="params">partialState, callback</span>) </span>&#123;</div><div class="line">  <span class="comment">// 合并 _pendingState</span></div><div class="line">  <span class="keyword">this</span>.replaceState(</div><div class="line">    assign(&#123;&#125;, <span class="keyword">this</span>._pendingState || <span class="keyword">this</span>.state, partialState),</div><div class="line">    callback</div><div class="line">  );</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>当调用 <code>setState</code> 时，会对 <code>state</code> 以及 <code>_pendingState</code> 更新队列进行合并操作，但其实真正更新 <code>state</code> 的幕后黑手是<code>replaceState</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更新 state</span></div><div class="line">replaceState: <span class="function"><span class="keyword">function</span>(<span class="params">completeState, callback</span>) </span>&#123;</div><div class="line">  validateLifeCycleOnReplaceState(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 更新队列</span></div><div class="line">  <span class="keyword">this</span>._pendingState = completeState;</div><div class="line"></div><div class="line">  <span class="comment">// 判断状态是否为 MOUNTING，如果不是，即可执行更新</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) &#123;</div><div class="line">    ReactUpdates.enqueueUpdate(<span class="keyword">this</span>, callback);</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p><code>replaceState</code> 会先判断当前状态是否为 MOUNTING，如果不是即会调用 <code>ReactUpdates.enqueueUpdate</code> 执行更新。</p>
<p>当状态不为 <code>MOUNTING</code> 或 <code>RECEIVING_PROPS</code> <code>时，performUpdateIfNecessary</code> 会获取 <code>_pendingElement</code>、<code>_pendingState</code>、<code>_pendingForceUpdate</code>，并调用 <code>updateComponent</code> 进行组件更新。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果存在 _pendingElement、_pendingState、_pendingForceUpdate，则更新组件</span></div><div class="line">performUpdateIfNecessary: <span class="function"><span class="keyword">function</span>(<span class="params">transaction</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> compositeLifeCycleState = <span class="keyword">this</span>._compositeLifeCycleState;</div><div class="line"></div><div class="line">  <span class="comment">// 当状态为 MOUNTING 或 RECEIVING_PROPS时，则不更新</span></div><div class="line">  <span class="keyword">if</span> (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||</div><div class="line">      compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> prevElement = <span class="keyword">this</span>._currentElement;</div><div class="line">  <span class="keyword">var</span> nextElement = prevElement;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._pendingElement != <span class="literal">null</span>) &#123;</div><div class="line">    nextElement = <span class="keyword">this</span>._pendingElement;</div><div class="line">    <span class="keyword">this</span>._pendingElement = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 调用 updateComponent</span></div><div class="line">  <span class="keyword">this</span>.updateComponent(</div><div class="line">    transaction,</div><div class="line">    prevElement,</div><div class="line">    nextElement</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果在 <code>shouldComponentUpdate</code> 或 <code>componentWillUpdate</code> 中调用 <code>setState</code>，此时的状态已经从 <code>RECEIVING_PROPS -&gt; NULL</code>，则 <code>performUpdateIfNecessary</code> 就会调用 <code>updateComponent</code> 进行组件更新，但 <code>updateComponent</code> 又会调用 <code>shouldComponentUpdate</code> 和 <code>componentWillUpdate</code>，因此造成循环调用，使得浏览器内存占满后崩溃。</p>
</blockquote>
<h3 id="开发建议-1"><a href="#开发建议-1" class="headerlink" title="开发建议"></a>开发建议</h3><p>不建议在 <code>getDefaultProps</code>、<code>getInitialState</code>、<code>shouldComponentUpdate</code>、<code>componentWillUpdate</code>、<code>render</code> 和 <code>componentWillUnmount</code> 中调用 <code>setState</code>，特别注意：不能在 <code>shouldComponentUpdate</code> 和 <code>componentWillUpdate</code>中调用 <code>setState</code>，会导致循环调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-diff-算法&quot;&gt;&lt;a href=&quot;#React-diff-算法&quot; class=&quot;headerlink&quot; title=&quot;React diff 算法&quot;&gt;&lt;/a&gt;React diff 算法&lt;/h2&gt;&lt;p&gt;React的&lt;code&gt;diff&lt;/code&gt;算法是
    
    </summary>
    
    
      <category term="react" scheme="http://html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JS中的函数劫持</title>
    <link href="http://html-js.site/2018/04/08/JS%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%8A%AB%E6%8C%81/"/>
    <id>http://html-js.site/2018/04/08/JS中的函数劫持/</id>
    <published>2018-04-08T05:48:31.000Z</published>
    <updated>2018-04-08T05:56:05.057Z</updated>
    
    <content type="html"><![CDATA[<p>说到劫持，第一反应可能是什么不好的东西。函数劫持并不邪恶，关键是看使用的人。虽然这个概念在前端领域使用较少，但是在安全领域、自定义业务等场景下还是有一定的使用价值的。所以，这一篇文章将会和大家一起去了解一下JS中的函数劫持是什么，有什么用。</p>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>函数劫持，顾名思义，即在一个函数运行之前把它劫持下来，添加我们想要的功能。当这个函数实际运行的时候，它已经不是原本的函数了，而是带上了被我们添加上去的功能。这也是我们常见的<code>钩子函数</code>的原理之一。</p>
<p>乍一看上去，这很像是函数的改写。函数的改写也可以理解为是函数劫持的一种，但是这种方式太恶心了。作为一个劫持者，在绑票获得好处以后也应该遵守职业道德，把人原封不动地还回去，所以我们得在合适的地方把函数原本的功能给重新调用回来。</p>
<p>推而广之，其实“劫持”这一概念我们经常会遇到，比方说某网站被运营商劫持了，在浏览该网站的时候会弹出运营商的广告。</p>
<h3 id="举例分析"><a href="#举例分析" class="headerlink" title="举例分析"></a>举例分析</h3><p>现在我们来举个简单的例子，劫持一下<code>alert()</code>函数，为它增添一点小小的功能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> warn = alert</div><div class="line"><span class="built_in">window</span>.alert = <span class="function">(<span class="params">t</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (confirm(<span class="string">'How are you?'</span>)) warn(t)</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(<span class="string">'Help me...!!!'</span>)</div></pre></td></tr></table></figure></p>
<p>可以打开开发者工具尝试一下这个例子，你会发现只有你在 <code>confirm</code> 里面点击了OK，才会弹出 <code>Help me...!!!</code></p>
<p>接下来我们把这部分的内容封装一下，成为一个通用的函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> hijack = <span class="function">(<span class="params">obj, method, fun</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> orig = obj[method]</div><div class="line">  obj[method] = fun(orig)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先我们定义了一个 <code>hijack</code> 函数，它会先把原函数给保存下来，然后执行自定义函数，而原函数将会在自定义函数内部进行调用。</p>
<p>然后我们来劫持 <code>confirm()</code> 函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hijack(<span class="built_in">window</span>, <span class="string">'confirm'</span>, (orig) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</div><div class="line">    alert(<span class="string">'HELP ME PLZ!!!'</span>)</div><div class="line">    <span class="keyword">if</span> (orig.call(<span class="keyword">this</span>, text)) &#123;</div><div class="line">      alert(<span class="string">'YOU SEEMS FINE AND I AM LEAVING, GOOD BYE!'</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      alert(<span class="string">'HOLD ON! I AM COMING!!'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="反劫持"><a href="#反劫持" class="headerlink" title="反劫持"></a>反劫持</h3><p>新建一个页面，打开你的开发者工具控制台，输入 <code>alert</code>，你会看到这样的输出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params"></span>) </span>&#123; [native code] &#125;</div></pre></td></tr></table></figure></p>
<p>然后使用本文开头的那段代码，把<code>alert()</code>劫持一下，再重新在控制台输入alert，你会看到这样的输出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">t</span>) =&gt; </span>&#123;</div><div class="line">    <span class="keyword">if</span> (confirm(<span class="string">'How are you?'</span>)) warn(t)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过上述的例子可以知道，要看一个函数是否被劫持了，只需要直接把它打印出来即可。针对系统原生的函数，<code>[native code]</code>即代表它是纯净无污染的。</p>
<h3 id="函数劫持的作用"><a href="#函数劫持的作用" class="headerlink" title="函数劫持的作用"></a>函数劫持的作用</h3><p>除了为函数增加功能以外，还能够利用函数劫持去追踪恶意用户的信息。一般的<code>XSS</code>攻击会先利用<code>alert()</code>等能够输出信息的方法进行测试，这时候我们可以先对原生<code>alert()</code>进行劫持，向其输入追踪信息的代码，最后才把原函数释放出去。当恶意用户在测试<code>alert()</code>的时候就会立即被我们追踪，而他本人却无从察觉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到劫持，第一反应可能是什么不好的东西。函数劫持并不邪恶，关键是看使用的人。虽然这个概念在前端领域使用较少，但是在安全领域、自定义业务等场景下还是有一定的使用价值的。所以，这一篇文章将会和大家一起去了解一下JS中的函数劫持是什么，有什么用。&lt;/p&gt;
&lt;h3 id=&quot;基本概念
    
    </summary>
    
    
      <category term="javascript" scheme="http://html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>nvm管理不同版本的node与npm</title>
    <link href="http://html-js.site/2018/04/08/nvm%E7%AE%A1%E7%90%86%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E7%9A%84node%E4%B8%8Enpm/"/>
    <id>http://html-js.site/2018/04/08/nvm管理不同版本的node与npm/</id>
    <published>2018-04-08T03:35:05.000Z</published>
    <updated>2018-04-08T04:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>补充说明: Mac 下通过 brew install nvm 所安装的 nvm ，由于安装路径不同，无法正确启用。建议使用 brew uninstall nvm 卸载掉之后，通过本文的方案重新安装一次。</p>
</blockquote>
<p>最近 <code>NodeJS</code> 的版本更新速度有点 Chrome 的迹象，4.0 版本没发布多久，又推出了 5.0 。升级 NodeJS 之后可以很方便的开始使用一些 ES6 的语言特性，但又会导致团队内部的 <code>mz-fis</code> 框架无法更新，因为它暂时只支持 v0.12 版本。于是团队开始试用管理 node 版本的工具  nvm，试用后发现 Mac 下很好用，推荐大家尽快用起来。</p>
<p><code>nvm</code> 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 <code>nvmw</code> 或 <code>nvm-windows</code> 。</p>
<p>以下具体说下 Mac 系统中的安装与使用细节（Windows 系统仅供类比参考）。</p>
<h3 id="一、卸载已安装到全局的-node-npm"><a href="#一、卸载已安装到全局的-node-npm" class="headerlink" title="一、卸载已安装到全局的 node/npm"></a>一、卸载已安装到全局的 node/npm</h3><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>
<p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p>
<p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</div><div class="line"></div><div class="line">sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录</div><div class="line">sudo rm /usr/local/bin/node #删除 node</div><div class="line">cd  /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链</div></pre></td></tr></table></figure></p>
<h3 id="二、安装-nvm"><a href="#二、安装-nvm" class="headerlink" title="二、安装 nvm"></a>二、安装 nvm</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span></div></pre></td></tr></table></figure>
<p>安装完成后请重新打开终端环境，Mac 下推荐使用 <code>oh-my-zsh</code> 代替默认的 <code>bash shell</code>。</p>
<h3 id="三、安装切换各版本-node-npm"><a href="#三、安装切换各版本-node-npm" class="headerlink" title="三、安装切换各版本 node/npm"></a>三、安装切换各版本 node/npm</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">nvm install stable #安装最新稳定版 node，现在是 5.0.0</div><div class="line">nvm install 4.2.2 #安装 4.2.2 版本</div><div class="line">nvm install 0.12.7 #安装 0.12.7 版本</div><div class="line"></div><div class="line"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</div><div class="line">nvm use 0 #切换至 0.12.7 版本</div><div class="line">npm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v0.12.7/lib/mz-fis</div><div class="line">nvm use 4 #切换至 4.2.2 版本</div><div class="line">npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli</div><div class="line"></div><div class="line">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</div></pre></td></tr></table></figure>
<h3 id="四、使用-nvmrc-文件配置项目所使用的-node-版本"><a href="#四、使用-nvmrc-文件配置项目所使用的-node-版本" class="headerlink" title="四、使用 .nvmrc 文件配置项目所使用的 node 版本"></a>四、使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd &lt;项目根目录&gt;  #进入项目根目录</div><div class="line">echo 4 &gt; .nvmrc #添加 .nvmrc 文件</div><div class="line">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</div><div class="line">node -v #查看 node 是否切换为对应版本</div></pre></td></tr></table></figure></p>
<h3 id="五、nvm-与-n-的区别"><a href="#五、nvm-与-n-的区别" class="headerlink" title="五、nvm 与 n 的区别"></a>五、nvm 与 n 的区别</h3><p>node 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</p>
<p>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p>
<p>因此建议各位尽早开始使用 nvm ，以免出现全局模块无法更新的问题。</p>
<p>当然，如果你用的是 windows 操作系统，我只能说 …… 朋友，能不能早点换个 Mac ，做一个有品位的程序猿呢：P</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;补充说明: Mac 下通过 brew install nvm 所安装的 nvm ，由于安装路径不同，无法正确启用。建议使用 brew uninstall nvm 卸载掉之后，通过本文的方案重新安装一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最
    
    </summary>
    
    
      <category term="node" scheme="http://html-js.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>pm2实现负载均衡</title>
    <link href="http://html-js.site/2018/04/08/pm2%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://html-js.site/2018/04/08/pm2实现负载均衡/</id>
    <published>2018-04-08T03:16:03.000Z</published>
    <updated>2018-04-08T03:36:47.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>源码：<a href="https://github.com/Unitech/pm2" target="_blank" rel="external">https://github.com/Unitech/pm2</a></p>
<blockquote>
<p>这里的pm2并不是大气污染物啊</p>
</blockquote>
<p>事实上，pm2 是一个带有负载均衡功能的Node应用的进程管理器，Node实现进程管理的库有很多，forever也是其中一个很强大但是也相对较老的进程管理器。</p>
<h3 id="为什么要使用pm2"><a href="#为什么要使用pm2" class="headerlink" title="为什么要使用pm2"></a>为什么要使用pm2</h3><p>对于这个问题，先说说我的看法，最基本的原因是因为node本身是一个单线程应用，它的特点就是所有方法都是串行一次执行，并且node并没有能力像Java一样独自去创建一个新的线程来实现异步操作，如果在执行I/O中遇到了阻塞就会降低整个应用的执行效率，导致CPU使用率高等不利原因。</p>
<p>因此在这种模式下，一个线程只能处理一个任务，要想提高吞吐量必须通过多线程。虽然单线程的好处有很多比如避免了线程同步或者死锁、状态同步等等之类的问题，但是在应用和计算能力要求日益倍增的今天，单线程最大的弊端就是无法利用多核CPU带来的优势来提升运行效率。</p>
<p>我们知道node可以利用异步I/O来避免线程阻塞，提高利用率等优点:<br><img src="/images/page/pm2/1.png" alt=""></p>
<p>同时为了弥补单线程无法利用多核CPU的问题，提供了“子进程”这个概念，Node.js 实际上是 Javascript 执行线程的单线程，真正的的 I/O 操作，底层 API 调用都是通过多线程执行的。当然在这里我只是指出了这一背景，那么为什么我们要用pm2？</p>
<p>我总结了两个比较简洁的答案：1、pm2可以把你的应用部署到服务器所有的CPU上（$ pm2 start app.js -i max），有效的解决了之前背景里提出的问题。 2、同样是进程管理器，为什么不用forever？我认为最大的区别是在监控欠缺，进程和集群管理有限。在监控以及log方面可以认为forever完败于pm2，为什么，一张图你就知道答案。<br><img src="/images/page/pm2/2.png" alt=""></p>
<p>这是pm2官网给出的Demo，我们可以清晰地看见整个集群的模式、状态，CPU利用率甚至是内存大小，而forever给出的是什么呢？null</p>
<p>如果我要实时监控所有的进程状态呢？<br><img src="/images/page/pm2/3.png" alt=""></p>
<p>这就是pm2的强大之处，多进程管理、监控、负载均衡……</p>
<h3 id="pm2主要特点"><a href="#pm2主要特点" class="headerlink" title="pm2主要特点"></a>pm2主要特点</h3><ul>
<li>内建负载均衡（使用Node cluster 集群模块、子进程，可以参考朴灵的《深入浅出node.js》一书第九章）</li>
<li>线程守护，keep alive</li>
<li>0秒停机重载，维护升级的时候不需要停机.</li>
<li>现在 Linux (stable) &amp; MacOSx (stable) &amp; Windows (stable).多平台支持</li>
<li>停止不稳定的进程（避免无限循环）</li>
<li>控制台检测</li>
<li>提供 HTTP API</li>
<li>远程控制和实时的接口API ( Nodejs 模块,允许和PM2进程管理器交互 )</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ npm install pm2 -g     # 命令行安装 pm2</div><div class="line">$ pm2 start app.js -i 4  #后台运行pm2，启动4个app.js</div><div class="line">                         # 也可以把'max' 参数传递给 start</div><div class="line">                         # 正确的进程数目依赖于Cpu的核心数目</div><div class="line">$ pm2 start app.js --name my-api # 命名进程</div><div class="line">$ pm2 list               # 显示所有进程状态</div><div class="line">$ pm2 monit              # 监视所有进程</div><div class="line">$ pm2 logs               #  显示所有进程日志</div><div class="line">$ pm2 stop all           # 停止所有进程</div><div class="line">$ pm2 restart all        # 重启所有进程</div><div class="line">$ pm2 reload all         # 0秒停机重载进程 (用于 NETWORKED 进程)</div><div class="line">$ pm2 stop 0             # 停止指定的进程</div><div class="line">$ pm2 restart 0          # 重启指定的进程</div><div class="line">$ pm2 startup            # 产生 init 脚本 保持进程活着</div><div class="line">$ pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</div><div class="line">$ pm2 delete 0           # 杀死指定的进程</div><div class="line">$ pm2 delete all         # 杀死全部进程</div><div class="line"></div><div class="line">运行进程的不同方式：</div><div class="line">$ pm2 start app.js -i max  # 根据有效CPU数目启动最大进程数目</div><div class="line">$ pm2 start app.js -i 3      # 启动3个进程</div><div class="line">$ pm2 start app.js -x        #用fork模式启动 app.js 而不是使用 cluster</div><div class="line">$ pm2 start app.js -x -- -a 23   # 用fork模式启动 app.js 并且传递参数 (-a 23)</div><div class="line">$ pm2 start app.js --name serverone  # 启动一个进程并把它命名为 serverone</div><div class="line">$ pm2 stop serverone       # 停止 serverone 进程</div><div class="line">$ pm2 start app.json        # 启动进程, 在 app.json里设置选项</div><div class="line">$ pm2 start app.js -i max -- -a 23                   #在--之后给 app.js 传递参数</div><div class="line">$ pm2 start app.js -i max -e err.log -o out.log  # 启动 并 生成一个配置文件</div><div class="line">你也可以执行用其他语言编写的app  ( fork 模式):</div><div class="line">$ pm2 start my-bash-script.sh    -x --interpreter bash</div><div class="line">$ pm2 start my-python-script.py -x --interpreter python</div></pre></td></tr></table></figure>
<h3 id="附上keymetrics实时监控"><a href="#附上keymetrics实时监控" class="headerlink" title="附上keymetrics实时监控"></a>附上keymetrics实时监控</h3><p>地址：<a href="https://app.keymetrics.io/#/register" target="_blank" rel="external">https://app.keymetrics.io/#/register</a></p>
<p>pm2官方也结合pm2管理提供了一套可视化在线监控平台，有多牛？上图：<br><img src="/images/page/pm2/4.png" alt=""></p>
<p>注册完毕后创建自己的第一个项目工程成功后会得到如图所示口令：<br><img src="/images/page/pm2/5.jpeg" alt=""></p>
<p>系统分配的public key 和secret key。然后，在安装有pm2的服务器端输入以下命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 interact your-secret-key your-public-key</div></pre></td></tr></table></figure></p>
<p>接下来的事情就交给可视化去做吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;源码：&lt;a href=&quot;https://github.com/Unitech/pm2&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
    
      <category term="node" scheme="http://html-js.site/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>ajax-hook原理解析</title>
    <link href="http://html-js.site/2018/03/31/ajax-hook%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://html-js.site/2018/03/31/ajax-hook原理解析/</id>
    <published>2018-03-31T14:07:45.000Z</published>
    <updated>2018-04-08T06:17:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近github上出现了一个神器ajax-hook，它可以拦截所有ajax请求并允许修改请求数据和响应数据！实际项目中它可以用于请求添加统一签名、协议自动解析、接口调用统计等。本文主要分析其源码实现，抛砖引玉了。</p>
</blockquote>
<p>如果你还不知道ajax-hook，请先了解一下：<br>github : <a href="https://github.com/wendux/Ajax-hook" target="_blank" rel="external">https://github.com/wendux/Ajax-hook</a><br>中文介绍：<a href="http://www.jianshu.com/p/9b634f1c9615" target="_blank" rel="external">http://www.jianshu.com/p/9b634f1c9615</a></p>
<h3 id="整体思路－代理模式"><a href="#整体思路－代理模式" class="headerlink" title="整体思路－代理模式"></a>整体思路－代理模式</h3><p>Ajax-hook实现的整体思路是实现一个XMLHttpRequest的代理对象，然后覆盖全局的XMLHttpRequest，这样一但上层调用 new XMLHttpRequest这样的代码时，其实创建的是Ajax-hook的代理对象实例。具体原理图如下：</p>
<p><img src="/images/page/ajaxhook/1.png" alt=""></p>
<p>上图中青色部分为Ajax-hook实现的代理XMLHttpRequest，内部会调用真正的XMLHttpRequest。我们看一下hookAjax的部分源码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ob.hookAjax = <span class="function"><span class="keyword">function</span> (<span class="params">funs</span>) </span>&#123;</div><div class="line">  <span class="comment">//保存真正的XMLHttpRequest对象</span></div><div class="line">  <span class="built_in">window</span>._ahrealxhr = <span class="built_in">window</span>._ahrealxhr || XMLHttpRequest</div><div class="line">  <span class="comment">//1.覆盖全局XMLHttpRequest，代理对象</span></div><div class="line">  XMLHttpRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//创建真正的XMLHttpRequest实例</span></div><div class="line">    <span class="keyword">this</span>.xhr = <span class="keyword">new</span> <span class="built_in">window</span>._ahrealxhr;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> <span class="keyword">this</span>.xhr) &#123;</div><div class="line">      <span class="keyword">var</span> type = <span class="string">""</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        type = <span class="keyword">typeof</span> <span class="keyword">this</span>.xhr[attr]</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">      <span class="keyword">if</span> (type === <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="comment">//2.代理方法</span></div><div class="line">        <span class="keyword">this</span>[attr] = hookfun(attr);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//3.代理属性</span></div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, attr, &#123;</div><div class="line">          <span class="attr">get</span>: getFactory(attr),</div><div class="line">          <span class="attr">set</span>: setFactory(attr)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ......</div></pre></td></tr></table></figure></p>
<p>Ajax-hook 一开始先保存了真正的XMLHttpRequest对象到一个全局对象，然后在注释1处，Ajax-hook覆盖了全局的XMLHttpRequest对象，这就是代理对象的具体实现。在代理对象内部，首先创建真正的XMLHttpRequest实例,记为xhr,然后遍历xhr所有属性和方法，在2处hookfun为xhr的每一个方法生成一个代理方法，在3处，通过defineProperty为每一个属性生成一个代理属性。下面我们重点看一看代理方法和代理属性的实现。</p>
<h3 id="代理方法"><a href="#代理方法" class="headerlink" title="代理方法"></a>代理方法</h3><p>代理方法通过hookfun函数生成，我们看看hookfun的具体实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hookfun</span>(<span class="params">fun</span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>)</div><div class="line">    <span class="comment">//1.如果fun拦截函数存在，则先调用拦截函数</span></div><div class="line">    <span class="keyword">if</span> (funs[fun] &amp;&amp; funs[fun].call(<span class="keyword">this</span>, args, <span class="keyword">this</span>.xhr)) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">   <span class="comment">//2.调用真正的xhr方法</span></div><div class="line">   <span class="keyword">this</span>.xhr[fun].apply(<span class="keyword">this</span>.xhr, args);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>为了叙述清晰，我们假设fun为 send函数，其中funs为用户提供的拦截函数对象。代码很简单，首先会根据用户提供的funs判断用户是否要拦截send, 如果提供了send的拦截方法，记为send_hook, 则上层调用代理对象send方法时，则会先调用send_hook，同时将调用参数和当前的xhr对象传递给send_hook，如果send_hook返回了true, 则调用终止，直接返回，相当于调用被终止了，如果没有返回或返回的是false,则会走到注释2处，此处调用了xhr的send方法，至此ajax send被调用成功。 所以，我们在send_hook中可以拿到调用的参数并修改，因为参数是以数组形式传递，改变会被记录，当然，我们也可以返回true直接终止调用。</p>
<h3 id="代理属性"><a href="#代理属性" class="headerlink" title="代理属性"></a>代理属性</h3><p>属性如onload、onreadystatechange等，上层在调用ajax时通常要设置这些回调以处理请求到的数据，Ajax-hook也能够实现在请求返回时先拿到数据第一个进行处理，然后将处理过的数据传递给用户提供的回调。要实现这个功能，直接的思路就是用户设置回调时将用户提供的回调保存起来，然后设置成代理回调，当数据返回时，代理回调会被调用，然后在代理回调中首先将返回的数据提供给拦截函数处理，然后再将处理后的数据传递给用户真正的回调。那么问题来了，如何捕获用户设置回调的动作？一段典型的用户调用代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xh=<span class="keyword">new</span> XMLHttpRequest;</div><div class="line">xh.open(<span class="string">"https://xxx"</span>)</div><div class="line">xh.onload=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">//1</span></div><div class="line">  <span class="comment">//处理请求到的数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也就是说上面代码1处的赋值时机代理对象怎么捕获？如果在赋值的时候有机会执行代码就好了。我们回过头来看看上面原理图，有没有注意到proxy props后面的小括号里的 es5，答案就在这里！ es5中对于属性引入了setter、getter,详细内容请参考：<br>Javascript getter: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get</a><br>Javascript setter: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set</a></p>
<p>Ajax-hook通过getFactory和setFactory生成setter、getter方法。我们来看看它们的实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFactory</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[attr + <span class="string">"_"</span>] || <span class="keyword">this</span>.xhr[attr]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFactory</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> xhr = <span class="keyword">this</span>.xhr;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="comment">//区分是否回调属性</span></div><div class="line">        <span class="keyword">if</span> (attr.indexOf(<span class="string">"on"</span>) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>[attr + <span class="string">"_"</span>] = f;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (funs[attr]) &#123;</div><div class="line">            xhr[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                funs[attr](that) || f.apply(xhr, <span class="built_in">arguments</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            xhr[attr] = f;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码比较简单，值得注意的是里面的属性加下划线是什么意思？请继续往下看。</p>
<h3 id="属性修改"><a href="#属性修改" class="headerlink" title="属性修改"></a>属性修改</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.responseText = <span class="built_in">JSON</span>.parse(xhr.responseText)</div></pre></td></tr></table></figure>
<p>但是，这里有坑，因为xhr的responseText属性并不是writeable的（详情请移步 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a> ),这也就意味着你无法直接更改xhr.responseText的值，而Ajax-hook也代理了这些原始属性，内部生成了一下原始属性名＋下滑线的代理属性。</p>
<p>至此，Ajax-hook源码分析完毕。下面我们总结一下：</p>
<p>Ajax-hook使用代理的方式对原生XMLHttpRequest的方法及属性进行代理，然后覆盖全局XMLHttpRequest，实现拦截所有Ajax-hook的功能。从代码角度来看，逻辑清晰，思维巧妙，简洁优雅，值得学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近github上出现了一个神器ajax-hook，它可以拦截所有ajax请求并允许修改请求数据和响应数据！实际项目中它可以用于请求添加统一签名、协议自动解析、接口调用统计等。本文主要分析其源码实现，抛砖引玉了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端面试</title>
    <link href="http://html-js.site/2018/03/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    <id>http://html-js.site/2018/03/26/前端面试/</id>
    <published>2018-03-26T06:24:47.000Z</published>
    <updated>2018-06-07T07:17:33.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML-amp-CSS-部分"><a href="#HTML-amp-CSS-部分" class="headerlink" title="HTML &amp; CSS 部分"></a>HTML &amp; CSS 部分</h3><ul>
<li><p>css常用布局<br>定位布局，流布局，浮动布局，flex和grid布局，包括还有三栏布局中的圣杯和双飞翼<br>使用flex实现垂直水平居中</p>
</li>
<li><p>BFC<br>盒模型包括怪异盒模型，如何转换 box-sizing</p>
</li>
<li><p>session、cookie、sessionStorage、localStorage等区别</p>
</li>
<li><p>animation和transiton的相关属性<br>为什么动画推荐用c3而不是js，主要是性能方面….浏览器怎么优化的动画</p>
</li>
</ul>
<h3 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h3><ul>
<li><p>JavaScript闭包</p>
</li>
<li><p>前端跨域<br>CORS怎么实现的</p>
</li>
<li><p>JavaScript继承<br>原型继承、构造函数继承、组合继承、寄生组合继承优缺点和实现方式，es5如何实现super关键字</p>
</li>
<li><p>JavaScript的节流和防抖</p>
</li>
<li><p>js事件执行机制<br>event loop，microtask，task queue : 任务队列、执行栈<br>然后事件委托、捕获、冒泡、目标阶段<br>target和currentTarget</p>
</li>
<li><p>this指向的问题<br>四种绑定规则，new的执行过程以及箭头函数注意事项</p>
</li>
<li><p>es6相关知识点<br>promise的实现方式；<br>generator怎么实现；</p>
</li>
<li><p><a href="https://html-js.site/2017/08/17/JavaScript-%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E9%80%92%E5%BD%92/">JavaScript 中的匿名递归</a></p>
<a id="more"></a>
</li>
</ul>
<h3 id="Vue部分"><a href="#Vue部分" class="headerlink" title="Vue部分"></a>Vue部分</h3><p><a href="https://www.cnblogs.com/sichaoyun/p/8406194.html" target="_blank" rel="external">https://www.cnblogs.com/sichaoyun/p/8406194.html</a></p>
<ul>
<li>插槽是什么，怎么用</li>
</ul>
<h3 id="React部分"><a href="#React部分" class="headerlink" title="React部分"></a>React部分</h3><ul>
<li><p>react部分必考的肯定有生命周期</p>
</li>
<li><p>setState是异步的还是同步的，几个参数，各有什么作用，延伸到componentShouldUpdate;</p>
</li>
<li><p>react-empty是什么</p>
</li>
<li><p>子组件和父组件componentDidMount哪一个先执行</p>
</li>
<li><p>redux的一般流程<br>react-redux的原理、高阶组件、以及redux-saga的实现原理</p>
</li>
<li><p>如何设计一些组件，原则是什么，你写过什么自豪或者眼前一亮的组件<br>组合、复用、重复、测试、维护</p>
</li>
<li><p>全局组件的挂载<br>a组件在b组件内，c组件在a组件内，如何让他渲染出来，a组件和c组件同级</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// react v16+ </span></div><div class="line">ReactDOM.createPortal(<span class="keyword">this</span>.props.children, <span class="keyword">this</span>._container)</div><div class="line"><span class="comment">// react v16- </span></div><div class="line">ReactDOM.unstable_renderSubtreeIntoContainer(</div><div class="line">  parent,</div><div class="line">  getComponent(props),</div><div class="line">  <span class="keyword">this</span>.container,</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (ready) &#123;</div><div class="line">      ready.call(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li><p>react组件的优化<br>pureRenderMixin、ShouldComponentUpdate<br>组件的设计和木偶组建的函数编写方式</p>
</li>
<li><p>react组件的通信<br>prop，context（顺道扯了react-redux的context实现方式）、redux</p>
</li>
<li><p>react 的virtual dom和diff算法的实现方式</p>
</li>
<li><p>MVC、MVVM了解么，数据双向绑定和单向绑定实现方式</p>
</li>
<li><p>react-router实现方式，单页面应用相关东西</p>
</li>
<li><p>react的ssr了解么？大概怎么实现<br>webpack的配置项以及大概的实现思路和注意事项</p>
</li>
<li><p>REACT项目线上问题是怎么调试的</p>
</li>
<li><p>场景问题：移动端列表页面状态保留怎么实现(滚动加载)</p>
</li>
</ul>
<h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul>
<li><p>前端优化一般都做哪些<br>雅虎的军规啥的。以及首屏优化。<br>预加载，http head缓存，懒加载</p>
</li>
<li><p>浏览器缓存<br>200 From cache和200 ok区别，强缓存，302</p>
</li>
<li><p>post、get区别<br><a href="https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&amp;mid=100000054&amp;idx=1&amp;sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd" target="_blank" rel="external">99%的人都理解错了HTTP中GET与POST的区别</a></p>
</li>
</ul>
<h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><ul>
<li>编写过webpack的扩展嘛，Plugin或者loader<br><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="external">深入浅出webpack</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML-amp-CSS-部分&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS-部分&quot; class=&quot;headerlink&quot; title=&quot;HTML &amp;amp; CSS 部分&quot;&gt;&lt;/a&gt;HTML &amp;amp; CSS 部分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;css常用布局&lt;br&gt;定位布局，流布局，浮动布局，flex和grid布局，包括还有三栏布局中的圣杯和双飞翼&lt;br&gt;使用flex实现垂直水平居中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BFC&lt;br&gt;盒模型包括怪异盒模型，如何转换 box-sizing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;session、cookie、sessionStorage、localStorage等区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;animation和transiton的相关属性&lt;br&gt;为什么动画推荐用c3而不是js，主要是性能方面….浏览器怎么优化的动画&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaScript部分&quot;&gt;&lt;a href=&quot;#JavaScript部分&quot; class=&quot;headerlink&quot; title=&quot;JavaScript部分&quot;&gt;&lt;/a&gt;JavaScript部分&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript闭包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前端跨域&lt;br&gt;CORS怎么实现的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript继承&lt;br&gt;原型继承、构造函数继承、组合继承、寄生组合继承优缺点和实现方式，es5如何实现super关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript的节流和防抖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;js事件执行机制&lt;br&gt;event loop，microtask，task queue : 任务队列、执行栈&lt;br&gt;然后事件委托、捕获、冒泡、目标阶段&lt;br&gt;target和currentTarget&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;this指向的问题&lt;br&gt;四种绑定规则，new的执行过程以及箭头函数注意事项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;es6相关知识点&lt;br&gt;promise的实现方式；&lt;br&gt;generator怎么实现；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://html-js.site/2017/08/17/JavaScript-%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E9%80%92%E5%BD%92/&quot;&gt;JavaScript 中的匿名递归&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://html-js.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数节流和函数防抖之间的区别</title>
    <link href="http://html-js.site/2018/03/19/JavaScript%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://html-js.site/2018/03/19/JavaScript函数节流和函数防抖之间的区别/</id>
    <published>2018-03-19T13:12:58.000Z</published>
    <updated>2018-03-19T13:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><p>函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。<br> 大家大概都知道旧款电视机的工作原理，就是一行行得扫描出色彩到屏幕上，然后组成一张张图片。由于肉眼只能分辨出一定频率的变化，当高频率的扫描，人类是感觉不出来的。反而形成一种视觉效果，就是一张图。就像高速旋转的风扇，你看不到扇叶，只看到了一个圆一样。<br> 同理，可以类推到js代码。在一定时间内，代码执行的次数不一定要非常多。达到一定频率就足够了。因为跑得越多，带来的效果也是一样。倒不如，把js代码的执行次数控制在合理的范围。既能节省浏览器CPU资源，又能让页面浏览更加顺畅，不会因为js的执行而发生卡顿。这就是函数节流和函数防抖要做的事。</p>
<p> 函数节流是指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释。<br> 函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。<br><a id="more"></a></p>
<h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>函数节流应用的实际场景，多数在监听页面元素滚动事件的时候会用到。因为滚动事件，是一个高频触发的事件。以下是监听页面元素滚动的示例代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数节流</span></div><div class="line"><span class="keyword">var</span> canRun = <span class="literal">true</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"throttle"</span>).onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!canRun)&#123;</div><div class="line">        <span class="comment">// 判断是否已空闲，如果在执行中，则直接return</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    canRun = <span class="literal">false</span>;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"函数节流"</span>);</div><div class="line">        canRun = <span class="literal">true</span>;</div><div class="line">    &#125;, <span class="number">300</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>函数节流的要点是，声明一个变量当标志位，记录当前代码是否在执行。<br> 如果空闲，则可以正常触发方法执行。<br> 如果代码正在执行，则取消这次方法执行，直接<code>return</code></p>
<p>这个方法的作用是监听ID为<code>throttle</code>元素的滚动事件。<br> 当<code>canRun</code>为<code>true</code>，则代表现在的滚动处理事件是空闲的，可以使用。<br> 通过关卡<code>if(!canRun)</code>，等于就拿到了通行证。然后下一步的操作就是立马将关卡关上<code>canRun=false</code>。这样，其他请求执行滚动事件的方法，就被挡回去了。<br> 接着用<code>setTimeout</code>规定最小的时间间隔300，接着再执行<code>setTimeout</code>方法体里面的内容。<br> 最后，等<code>setTimeout</code>里面的方法都执行完毕，才释放关卡<code>canRun=true</code>，允许下一个访问者进来。</p>
<p>这个函数节流的实现形式，需要注意的是执行的间隔时间<code>是&gt;=300ms</code>。如果具体执行的方法是包含<code>callback</code>的，也可以将<code>canRun=true</code>这一步放到<code>callback</code>中。理解了函数节流的关卡设置重点，其实改起来就简单多了。</p>
<h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p>函数防抖的应用场景，最常见的就是用户注册时候的手机号码验证和邮箱验证了。只有等用户输入完毕后，前端才需要检查格式是否正确，如果不正确，再弹出提示语。以下还是以页面元素滚动监听的例子，来进行解析：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数防抖</span></div><div class="line"><span class="keyword">var</span> timer = <span class="literal">false</span>;</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"debounce"</span>).onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    clearTimeout(timer); <span class="comment">// 清除未执行的代码，重置回初始化状态</span></div><div class="line"></div><div class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"函数防抖"</span>);</div><div class="line">    &#125;, <span class="number">300</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>函数防抖的要点，也是需要一个<code>setTimeout</code>来辅助实现。延迟执行需要跑的代码。<br> 如果方法多次触发，则把上次记录的延迟执行代码用<code>clearTimeout</code>清掉，重新开始。<br> 如果计时完毕，没有方法进来访问触发，则执行代码。</p>
<p>这个方法的作用是监听ID为<code>debounce</code>元素的滚动事件<br> 进入滚动事件方法体的时候，做的第一件事就是清除上次未执行的<code>setTimeout</code>。而<code>setTimeout</code>的引用id由变量timer记录。<br> <code>clearTimeout</code>方法，允许传入无效的值。所以这里直接执行<code>clearTimeout</code>即可。<br> 然后，将需要执行的代码放入<code>setTimeout</code>中，再返回<code>setTimeout</code>引用给timer缓存。<br> 如果倒计时<code>300ms</code>以后，还没有新的方法触发滚动事件，则执行<code>setTimeout</code>中的代码。</p>
<p>函数防抖的实现重点，就是巧用<code>setTimeout</code>做缓存池，而且可以轻易地清除待执行的代码。<br> 其实，用队列的方式也可以做到这种效果。这里就不深入了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念解释&quot;&gt;&lt;a href=&quot;#概念解释&quot; class=&quot;headerlink&quot; title=&quot;概念解释&quot;&gt;&lt;/a&gt;概念解释&lt;/h3&gt;&lt;p&gt;函数节流和函数防抖，两者都是优化高频率执行js代码的一种手段。&lt;br&gt; 大家大概都知道旧款电视机的工作原理，就是一行行得扫描出色彩到屏幕上，然后组成一张张图片。由于肉眼只能分辨出一定频率的变化，当高频率的扫描，人类是感觉不出来的。反而形成一种视觉效果，就是一张图。就像高速旋转的风扇，你看不到扇叶，只看到了一个圆一样。&lt;br&gt; 同理，可以类推到js代码。在一定时间内，代码执行的次数不一定要非常多。达到一定频率就足够了。因为跑得越多，带来的效果也是一样。倒不如，把js代码的执行次数控制在合理的范围。既能节省浏览器CPU资源，又能让页面浏览更加顺畅，不会因为js的执行而发生卡顿。这就是函数节流和函数防抖要做的事。&lt;/p&gt;
&lt;p&gt; 函数节流是指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数节流最形象的解释。&lt;br&gt; 函数防抖是指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React组件库开发:多层嵌套弹层组件</title>
    <link href="http://html-js.site/2018/03/08/React%E7%BB%84%E4%BB%B6%E5%BA%93%E5%BC%80%E5%8F%91-%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E5%BC%B9%E5%B1%82%E7%BB%84%E4%BB%B6/"/>
    <id>http://html-js.site/2018/03/08/React组件库开发-多层嵌套弹层组件/</id>
    <published>2018-03-08T06:52:00.000Z</published>
    <updated>2018-03-26T06:47:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>UI 组件中有很多弹出式组件，常见的如 <code>Dialog</code>，<code>Tooltip</code> 以及 <code>Select</code> 等。这些组件都有一个特点，它们的弹出层通常不是渲染在当前的 <code>DOM</code> 树中，而是直接插入在 <code>body</code> （或者其它类似的地方）上的。这么做的主要目的是方便控制这些弹出层的 <code>z-index</code> ，确保它们能够处于合适的层级上，不至于被遮挡。</p>
<p>我们都知道 React App 的顶层某个地方肯定有这么一行代码：<code>ReactDOM.render(&lt;App /&gt;, mountNode)</code>，这个 API 调用的作用是在 <code>mountNode</code> 的位置创建一棵 React 的渲染树，React 会接管 <code>mountNode</code> 开始的这棵 DOM 树。</p>
<p>在 React 的这种管理模式下，会发现使用弹层似乎不太方便，因为组件树是逐层往下生长的，但React 的 API 中并没有直接提供跳出这棵组件树的方法。</p>
<p>所以，为了实现弹层组件，我们需要先实现一个 <code>Portal</code> 组件，这个组件只做一件事：将组件树中某些节点移出当前的DOM 树，并且渲染到指定的 DOM 节点中, 并且可以维持组件的上下文和事件冒泡。<br><a id="more"></a></p>
<h3 id="那么问题是什么呢？"><a href="#那么问题是什么呢？" class="headerlink" title="那么问题是什么呢？"></a>那么问题是什么呢？</h3><p>别急，我们先聊点别的。</p>
<p>相信大部分 React 开发者都用过 <code>redux</code>（至少听过吧），<code>react-redux</code> 这个 <code>binding</code> 库提供了连接 <code>React</code> 和 <code>redux</code> 的一个桥梁。<code>react-redux</code> 的实现依赖 <code>React</code> 很有用的一个功能<code>Context</code>，简单来说 <code>context</code> 就是提供了一个方便的跨越层级往下传递数据的方式。<br><code>ReactDOM.render</code> 的问题正是在于这个 <code>context</code> 的功能，它无法连接两棵 <code>React</code> 组件树的 <code>context</code>。<br><code>ReactDOM.render</code> 的函数原型中并没有当前组件树的信息，而 <code>context</code> 是跟组件树有关的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">  element,</div><div class="line">  container,</div><div class="line">  [callback]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="解决方案一-ReactDOM-unstable-renderSubtreeIntoContainer"><a href="#解决方案一-ReactDOM-unstable-renderSubtreeIntoContainer" class="headerlink" title="解决方案一 ReactDOM.unstable_renderSubtreeIntoContainer"></a>解决方案一 ReactDOM.unstable_renderSubtreeIntoContainer</h3><p>React 提供了另一个非公开 API：<code>ReactDOM.unstable_renderSubtreeIntoContainer</code>。这个 API 多了一个参数，这个参数就是用来指定新的 React 组件树根节点的父组件的，有了这个参数，两棵本来互不相干的 React 组件树就被联系起来了，同时它们的 <code>context</code> 也连接了起来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ReactDOM.unstable_renderSubtreeIntoContainer(</div><div class="line">  parentComponent,</div><div class="line">  element,</div><div class="line">  container,</div><div class="line">  [callback]</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="解决方案二-ReactDOM-createPortal"><a href="#解决方案二-ReactDOM-createPortal" class="headerlink" title="解决方案二 ReactDOM.createPortal"></a>解决方案二 ReactDOM.createPortal</h3><p>Portals是reactjs16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。<br>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> DemoComponent <span class="keyword">from</span> <span class="string">'./DemoComponent'</span>;</div><div class="line"></div><div class="line">render() &#123;</div><div class="line">  <span class="comment">// react会将DemoComponent组件直接挂载在真真实实的 dom 节点 domNode 上，生命周期还和16版本之前相同。</span></div><div class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</div><div class="line">    &lt;DemoComponent /&gt;,</div><div class="line">    domNode,</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件。<br><a href="https://reactjs.org/docs/portals.html#___gatsby" target="_blank" rel="external">官网portals</a></p>
<h3 id="例子：rc-dialog"><a href="#例子：rc-dialog" class="headerlink" title="例子：rc-dialog"></a>例子：rc-dialog</h3><p><a href="https://github.com/react-component/dialog" target="_blank" rel="external">https://github.com/react-component/dialog</a></p>
<p>DialogWrap.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog'</span>;</div><div class="line"><span class="keyword">import</span> ContainerRender <span class="keyword">from</span> <span class="string">'rc-util/lib/ContainerRender'</span>;</div><div class="line"><span class="keyword">import</span> Portal <span class="keyword">from</span> <span class="string">'rc-util/lib/Portal'</span>;</div><div class="line"><span class="keyword">import</span> IDialogPropTypes <span class="keyword">from</span> <span class="string">'./IDialogPropTypes'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> IS_REACT_16 = !!ReactDOM.createPortal;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DialogWrap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IDialogPropTypes</span>, <span class="title">any</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">visible</span>: <span class="literal">false</span>,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  _component: React.ReactElement&lt;any&gt;;</div><div class="line"></div><div class="line">  renderComponent: <span class="function">(<span class="params">props: any</span>) =&gt;</span> <span class="keyword">void</span>;</div><div class="line"></div><div class="line">  removeContainer: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</div><div class="line"></div><div class="line">  shouldComponentUpdate(&#123; visible &#125;: &#123; <span class="attr">visible</span>: boolean &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> !!(<span class="keyword">this</span>.props.visible || visible);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">if</span> (IS_REACT_16) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible) &#123;</div><div class="line">      <span class="keyword">this</span>.renderComponent(&#123;</div><div class="line">        <span class="attr">afterClose</span>: <span class="keyword">this</span>.removeContainer,</div><div class="line">        onClose() &#123;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">visible</span>: <span class="literal">false</span>,</div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.removeContainer();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  saveDialog = <span class="function">(<span class="params">node: any</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>._component = node;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getComponent = <span class="function">(<span class="params">extra = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Dialog</div><div class="line">        ref=&#123;this.saveDialog&#125;</div><div class="line">        &#123;...this.props&#125;</div><div class="line">        &#123;...extra&#125;</div><div class="line">        key="dialog"</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getContainer = () =&gt; &#123;</div><div class="line">    if (this.props.getContainer) &#123;</div><div class="line">      return this.props.getContainer();</div><div class="line">    &#125;</div><div class="line">    const container = document.createElement('div');</div><div class="line">    document.body.appendChild(container);</div><div class="line">    return container;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    const &#123; visible &#125; = this.props;</div><div class="line"></div><div class="line">    let portal: any = null;</div><div class="line"></div><div class="line">    if (!IS_REACT_16) &#123;</div><div class="line">      return (</div><div class="line">        &lt;ContainerRender</div><div class="line">          parent=&#123;this&#125;</div><div class="line">          visible=&#123;visible&#125;</div><div class="line">          autoDestroy=&#123;false&#125;</div><div class="line">          getComponent=&#123;this.getComponent&#125;</div><div class="line">          getContainer=&#123;this.getContainer&#125;</div><div class="line">        &gt;</div><div class="line">          &#123;(&#123; renderComponent, removeContainer &#125;: &#123; renderComponent: any, removeContainer: any &#125;) =&gt; &#123;</div><div class="line">            this.renderComponent = renderComponent;</div><div class="line">            this.removeContainer = removeContainer;</div><div class="line">            return null;</div><div class="line">          &#125;&#125;</div><div class="line">        &lt;/ContainerRender&gt;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (visible || this._component) &#123;</div><div class="line">      portal = (</div><div class="line">        &lt;Portal getContainer=&#123;this.getContainer&#125;&gt;</div><div class="line">          &#123;this.getComponent()&#125;</div><div class="line">        &lt;/Portal&gt;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return portal;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default DialogWrap;</div></pre></td></tr></table></figure></p>
<p>ContainerRender.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerRender</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">autoMount</span>: PropTypes.bool,</div><div class="line">    <span class="attr">autoDestroy</span>: PropTypes.bool,</div><div class="line">    <span class="attr">visible</span>: PropTypes.bool,</div><div class="line">    <span class="attr">forceRender</span>: PropTypes.bool,</div><div class="line">    <span class="attr">parent</span>: PropTypes.any,</div><div class="line">    <span class="attr">getComponent</span>: PropTypes.func.isRequired,</div><div class="line">    <span class="attr">getContainer</span>: PropTypes.func.isRequired,</div><div class="line">    <span class="attr">children</span>: PropTypes.func.isRequired,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">autoMount</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">autoDestroy</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">forceRender</span>: <span class="literal">false</span>,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoMount) &#123;</div><div class="line">      <span class="keyword">this</span>.renderComponent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoMount) &#123;</div><div class="line">      <span class="keyword">this</span>.renderComponent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoDestroy) &#123;</div><div class="line">      <span class="keyword">this</span>.removeContainer();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  removeContainer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.container) &#123;</div><div class="line">      ReactDOM.unmountComponentAtNode(<span class="keyword">this</span>.container);</div><div class="line">      <span class="keyword">this</span>.container.parentNode.removeChild(<span class="keyword">this</span>.container);</div><div class="line">      <span class="keyword">this</span>.container = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  renderComponent = <span class="function">(<span class="params">props, ready</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123; visible, getComponent, forceRender, getContainer, parent &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">if</span> (visible || parent._component || forceRender) &#123;</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.container) &#123;</div><div class="line">        <span class="keyword">this</span>.container = getContainer();</div><div class="line">      &#125;</div><div class="line">      ReactDOM.unstable_renderSubtreeIntoContainer(</div><div class="line">        parent,</div><div class="line">        getComponent(props),</div><div class="line">        <span class="keyword">this</span>.container,</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (ready) &#123;</div><div class="line">            ready.call(<span class="keyword">this</span>);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children(&#123;</div><div class="line">      <span class="attr">renderComponent</span>: <span class="keyword">this</span>.renderComponent,</div><div class="line">      <span class="attr">removeContainer</span>: <span class="keyword">this</span>.removeContainer,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Portal.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Portal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">getContainer</span>: PropTypes.func.isRequired,</div><div class="line">    <span class="attr">children</span>: PropTypes.node.isRequired,</div><div class="line">    <span class="attr">didUpdate</span>: PropTypes.func,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.createContainer();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate(prevProps) &#123;</div><div class="line">    <span class="keyword">const</span> &#123; didUpdate &#125; = <span class="keyword">this</span>.props;</div><div class="line">    <span class="keyword">if</span> (didUpdate) &#123;</div><div class="line">      didUpdate(prevProps);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="keyword">this</span>.removeContainer();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  createContainer() &#123;</div><div class="line">    <span class="keyword">this</span>._container = <span class="keyword">this</span>.props.getContainer();</div><div class="line">    <span class="keyword">this</span>.forceUpdate();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  removeContainer() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._container) &#123;</div><div class="line">      <span class="keyword">this</span>._container.parentNode.removeChild(<span class="keyword">this</span>._container);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._container) &#123;</div><div class="line">      <span class="keyword">return</span> ReactDOM.createPortal(<span class="keyword">this</span>.props.children, <span class="keyword">this</span>._container);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考链接：<br><a href="https://github.com/react-component/dialog/blob/master/src/DialogWrap.tsx" target="_blank" rel="external">https://github.com/react-component/dialog/blob/master/src/DialogWrap.tsx</a><br><a href="https://github.com/react-component/util/blob/master/src/ContainerRender.js" target="_blank" rel="external">https://github.com/react-component/util/blob/master/src/ContainerRender.js</a><br><a href="https://github.com/react-component/util/blob/master/src/Portal.js" target="_blank" rel="external">https://github.com/react-component/util/blob/master/src/Portal.js</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;UI 组件中有很多弹出式组件，常见的如 &lt;code&gt;Dialog&lt;/code&gt;，&lt;code&gt;Tooltip&lt;/code&gt; 以及 &lt;code&gt;Select&lt;/code&gt; 等。这些组件都有一个特点，它们的弹出层通常不是渲染在当前的 &lt;code&gt;DOM&lt;/code&gt; 树中，而是直接插入在 &lt;code&gt;body&lt;/code&gt; （或者其它类似的地方）上的。这么做的主要目的是方便控制这些弹出层的 &lt;code&gt;z-index&lt;/code&gt; ，确保它们能够处于合适的层级上，不至于被遮挡。&lt;/p&gt;
&lt;p&gt;我们都知道 React App 的顶层某个地方肯定有这么一行代码：&lt;code&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, mountNode)&lt;/code&gt;，这个 API 调用的作用是在 &lt;code&gt;mountNode&lt;/code&gt; 的位置创建一棵 React 的渲染树，React 会接管 &lt;code&gt;mountNode&lt;/code&gt; 开始的这棵 DOM 树。&lt;/p&gt;
&lt;p&gt;在 React 的这种管理模式下，会发现使用弹层似乎不太方便，因为组件树是逐层往下生长的，但React 的 API 中并没有直接提供跳出这棵组件树的方法。&lt;/p&gt;
&lt;p&gt;所以，为了实现弹层组件，我们需要先实现一个 &lt;code&gt;Portal&lt;/code&gt; 组件，这个组件只做一件事：将组件树中某些节点移出当前的DOM 树，并且渲染到指定的 DOM 节点中, 并且可以维持组件的上下文和事件冒泡。&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>AntD Modal组件的实现原理</title>
    <link href="http://html-js.site/2018/03/08/AntD-Modal%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://html-js.site/2018/03/08/AntD-Modal组件的实现原理/</id>
    <published>2018-03-08T06:06:23.000Z</published>
    <updated>2018-03-08T06:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ant Design(AntD)是React的一种UI组件。开发中使用AntD的Modal,在处理用户处理事务,在当前页面弹出一个对话框,承载相应的操作。现在来看看AntD的实现原理</p>
<p>先写列出部分Modal基本用法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Button type="primary" onClick=&#123;this.showModal&#125;&gt;Open a modal dialog&lt;/Button&gt;</div><div class="line">        &lt;Modal title="Basic Modal" visible=&#123;this.state.visible&#125;</div><div class="line">          onOk=&#123;this.handleOk&#125; onCancel=&#123;this.handleCancel&#125;</div><div class="line">        &gt;</div><div class="line">          &lt;p&gt;some contents...&lt;/p&gt;</div><div class="line">          &lt;p&gt;some contents...&lt;/p&gt;</div><div class="line">          &lt;p&gt;some contents...&lt;/p&gt;</div><div class="line">        &lt;/Modal&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"><span class="comment">//----------------</span></div><div class="line">ReactDOM.render(&lt;App /&gt;,mountNode)</div></pre></td></tr></table></figure>
<p>这样即可使用模态对话框组件。<br>打开浏览器的开发者功能可以看到对话框的div始终在body内层中，而不是在mountNode内部。当然模态对话框本就应该存在body内存中，而不是任意其他组件元素内部,否则嵌套效果不好，添加动画会招来性能问题。<br>这是为什么？<br>从AntD的Modal组件源码中(components/modal/index.tsx)，可以看到如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">'./confirm'</span>;</div><div class="line">Modal.success = <span class="function"><span class="keyword">function</span> (<span class="params">props: ModalFuncProps</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> config = assign(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'success'</span>,</div><div class="line">    <span class="attr">iconType</span>: <span class="string">'check-circle'</span>,</div><div class="line">    <span class="attr">okCancel</span>: <span class="literal">false</span>,</div><div class="line">  &#125;, props);</div><div class="line">  <span class="keyword">return</span> confirm(config);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当Modal加载成功后，还需要进一步从confirm(config)获取组件。<br>我们进一步查看confirm,在confirm.tsx(components/modal/confirm.tsx)可以看到如下源码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(div);</div><div class="line"><span class="comment">//......</span></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Dialog</div><div class="line">    className=&#123;classString&#125;</div><div class="line">    onCancel=&#123;close.bind(this, &#123; triggerCancel: true &#125;)&#125;</div><div class="line">    visible</div><div class="line">    title=""</div><div class="line">    transitionName="zoom"</div><div class="line">    footer=""</div><div class="line">    maskTransitionName="fade"</div><div class="line">    maskClosable=&#123;maskClosable&#125;</div><div class="line">    style=&#123;style&#125;</div><div class="line">    width=&#123;width&#125;</div><div class="line">  &gt;</div><div class="line">    &lt;div className=&#123;`$&#123;prefixCls&#125;-body-wrapper`&#125;&gt;</div><div class="line">      &#123;body&#125; &#123;footer&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/Dialog&gt;</div><div class="line">, div);</div></pre></td></tr></table></figure>
<p>最后再次使用ReactDOM.render()在创建的div内部添加对话框。<br>同时这是说明,ReactDOM.render()并不是只有在顶层要嵌入的div中使用。内部同样可以再次使用。</p>
<p>！！！但是，ReactDOM.render()方法，虽然可以实现组件的挂载点脱离父组件，但是组件的事件无法通过冒泡机制传递给父组件，也就是说如果挂载点div脱离了顶层root组件(<code>&lt;App /&gt;</code>)，那么挂载在div上面的组件也没办法使用redux。</p>
<p>那么为什么Antd-Modal到底是怎么实现的呢？ 原因是Antd-Modal里面使用了<a href="https://github.com/react-component/dialog" target="_blank" rel="external">rc-dialog</a> 组件，里面的<code>DialogWrap</code>组件使用了<a href="https://github.com/react-component/util" target="_blank" rel="external">rc-util</a>这个库的<a href="https://github.com/react-component/util/blob/master/src/ContainerRender.js" target="_blank" rel="external">ContainerRender.js</a>和<a href="https://github.com/react-component/util/blob/master/src/Portal.js" target="_blank" rel="external">Portal.js</a>方法，这个库解决了 ‘组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件’ 问题</p>
<p>详情请看下一篇博客&gt;&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ant Design(AntD)是React的一种UI组件。开发中使用AntD的Modal,在处理用户处理事务,在当前页面弹出一个对话框,承载相应的操作。现在来看看AntD的实现原理&lt;/p&gt;
&lt;p&gt;先写列出部分Modal基本用法:&lt;/p&gt;
&lt;figure class=&quot;hi
    
    </summary>
    
    
      <category term="react" scheme="http://html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 学习笔记[精华]</title>
    <link href="http://html-js.site/2017/11/29/Webpack-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://html-js.site/2017/11/29/Webpack-学习笔记/</id>
    <published>2017-11-29T11:21:34.000Z</published>
    <updated>2017-11-30T02:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 是模块打包系统, 代码分割, 加载器, 聪明的解析, 以及插件系统是它的特色<br><a href="https://webpack.github.io/docs/configuration.html" target="_blank" rel="external">https://webpack.github.io/docs/configuration.html</a> //config配置</p>
<h3 id="cli-参数"><a href="#cli-参数" class="headerlink" title="cli 参数"></a>cli 参数</h3><ul>
<li>–hot 代码热更新</li>
<li>–progress 有tab栏</li>
<li>–watch 实时监控</li>
<li>-debug 调试</li>
</ul>
<h3 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h3><p>加载器的使用, 加载器可以配置query参数并可以链式调用, 本质上是纯函数, 遵循单一职责原则<br><a href="https://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">https://webpack.github.io/docs/list-of-loaders.html</a><br><a href="https://webpack.github.io/docs/loader-conventions.html" target="_blank" rel="external">https://webpack.github.io/docs/loader-conventions.html</a></p>
<h3 id="devTools"><a href="#devTools" class="headerlink" title="devTools"></a>devTools</h3><p>webpack-dev-server / webpack-dev-middleware / koa-webpack-dev</p>
<h3 id="codeSplitting-代码分割"><a href="#codeSplitting-代码分割" class="headerlink" title="codeSplitting 代码分割"></a>codeSplitting 代码分割</h3><p>定义分割点<br>CommonJS: require.ensure<br>AMD: require</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([<span class="string">"./file"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">  <span class="built_in">require</span>(<span class="string">"./file2"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// is equal to</span></div><div class="line"></div><div class="line"><span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">  <span class="built_in">require</span>.include(<span class="string">"./file"</span>);</div><div class="line">  <span class="built_in">require</span>(<span class="string">"./file2"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="一些优化"><a href="#一些优化" class="headerlink" title="一些优化"></a>一些优化</h2><h3 id="最小化"><a href="#最小化" class="headerlink" title="最小化"></a>最小化</h3><p>new webpack.optimize.UglifyJsPlugin() // 压缩<br>new webpack.optimize.OccurrenceOrderPlugin() //排序输出</p>
<h3 id="删除重复数据"><a href="#删除重复数据" class="headerlink" title="删除重复数据"></a>删除重复数据</h3><p>new webpack.optimize.DedupePlugin()</p>
<h3 id="设置分块传输大小和数目"><a href="#设置分块传输大小和数目" class="headerlink" title="设置分块传输大小和数目"></a>设置分块传输大小和数目</h3><p>new webpack.optimize.LimitChunkCountPlugin({maxChunks: 15})<br>new webpack.optimize.MinChunkSizePlugin({minChunkSize: 10000})</p>
<h3 id="增量更新"><a href="#增量更新" class="headerlink" title="增量更新"></a>增量更新</h3><p>webpack-dev-server/webpack-dev-middleware/webpack –watch or watch: true</p>
<h3 id="不解析"><a href="#不解析" class="headerlink" title="不解析"></a>不解析</h3><p>noParse</p>
<h3 id="SourceMap-使调试更容易）"><a href="#SourceMap-使调试更容易）" class="headerlink" title="SourceMap (使调试更容易）"></a>SourceMap (使调试更容易）</h3><ul>
<li>devtool: “source-map” 在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的<code>source map</code>，但是它会减慢打包速度；</li>
<li>devtool: “cheap-module-source-map” 在一个单独的文件中生成一个不带列映射的<code>map</code>，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</li>
<li>devtool: “eval-source-map” 使用<code>eval</code>打包源文件模块，在同一个文件中生成干净的完整的<code>source map</code>。这个选项可以在不影响构建速度的前提下生成完整的<code>sourcemap</code>，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</li>
<li>devtool: “cheap-module-eval-source-map” 这是在打包文件时最快的生成<code>source map</code>的方法，生成的<code>Source Map</code> 会和打包后的<code>JavaScript</code>文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点；</li>
</ul>
<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p>
<blockquote>
<p><code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</p>
</blockquote>
<p>对小到中型的项目中，eval-source-map是一个很好的选项，再次强调你只应该开发阶段使用它</p>
<h3 id="模块-和-依赖位置"><a href="#模块-和-依赖位置" class="headerlink" title="模块 和 依赖位置"></a>模块 和 依赖位置</h3><p>RESOLVE.ROOT VS RESOLVE.MODULESDIRECTORIES</p>
<h3 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h3><p>初始加载的应该是路由和首页, 然后再加载其他页<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"entry-chunk.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"3.chunk.js"</span> type=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="多页应用"><a href="#多页应用" class="headerlink" title="多页应用"></a>多页应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">p1</span>: <span class="string">"./page1"</span>,</div><div class="line">        <span class="attr">p2</span>: <span class="string">"./page2"</span>,</div><div class="line">        <span class="attr">p3</span>: <span class="string">"./page3"</span>,</div><div class="line">        <span class="attr">ap1</span>: <span class="string">"./admin/page1"</span>,</div><div class="line">        <span class="attr">ap2</span>: <span class="string">"./admin/page2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"admin-commons.js"</span>, [<span class="string">"ap1"</span>, <span class="string">"ap2"</span>]),</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"commons.js"</span>, [<span class="string">"p1"</span>, <span class="string">"p2"</span>, <span class="string">"admin-commons.js"</span>])</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  commons chunk</span></div><div class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">p1</span>: <span class="string">"./page1"</span>,</div><div class="line">        <span class="attr">p2</span>: <span class="string">"./page2"</span>,</div><div class="line">        <span class="attr">commons</span>: <span class="string">"./entry-for-the-commons-chunk"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"commons"</span>, <span class="string">"commons.js"</span>)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="官方建议场景"><a href="#官方建议场景" class="headerlink" title="官方建议场景"></a>官方建议场景</h2><h3 id="应用性能"><a href="#应用性能" class="headerlink" title="应用性能"></a>应用性能</h3><ul>
<li>尽量使用<code>UglifyJsPlugin</code>减少文件体积</li>
<li>使用代码分割, 使首次加载尽可能快速</li>
<li>对于<code>React</code>, 使用 <code>react-proxy-loader</code></li>
<li>添加 <code>hash</code> 到文件, 并尽可能长时间缓存</li>
<li>使 <code>module/chunk</code> 的ID尽可能保持一致</li>
<li>如果有静态页面, 使用 <code>html-webpack-plugin</code></li>
<li>不要立即删除无用的资源(等待数周), 以免长时间保持浏览器窗口打开的用户 404</li>
<li>使用<code>DefinePlugin</code>来配置应用(是否内联, 各种条件配置)</li>
<li>使用<code>EnvironmentPlugin</code>来传递<code>process.env</code>到应用</li>
<li>使用包分析工具来检查问题, 减小下载时间, 改进内聚性</li>
<li>使用<code>stats-webpack-plugin</code>获取状态</li>
<li>使用配置文件<code>option</code>来获取更多性能数据</li>
<li>提取通用模块到单独的<code>script</code>文件(多页应用)</li>
<li>使用<code>DedupePlugin</code>来删除与<code>NPM</code>重复的数据</li>
<li>对<code>CSS</code>做处理</li>
<li>对静态资源做处理(<code>font/image</code>)</li>
<li>内联静态资源<code>url-loader</code>,减少加载时间</li>
<li>用<code>extract-text-webpack-plugin</code>来分割CSS资源(有很多css资源的应用)</li>
<li><code>LimitChunkCountPlugin</code> <code>MinChunkSizePlugin</code> <code>AggressiveMergingPlugin</code>来改善<code>chunk</code>传输</li>
<li>通过添加<code>script</code>标签来异步<code>chunk</code>的加载</li>
</ul>
<h3 id="开发性能"><a href="#开发性能" class="headerlink" title="开发性能"></a>开发性能</h3><ul>
<li>使用 <code>webpack.config.js</code> 代替 <code>CLi</code></li>
<li>不要重写不兼容的<code>JS</code>, 使用 <code>imports-loader/exports-loader</code> 使之兼容, 并且更易升级</li>
<li>使用 <code>webpack devtools</code> 来在浏览器调试</li>
<li>尽可能使用 <code>ES6</code> 模块加载方式, 这更易于未来的优化(<code>webpack2</code>支持)</li>
<li>使用 <code>output.library</code> 来声明依赖</li>
<li>使用 <code>externals</code> 来对外声明依赖</li>
<li>使用 <code>HMR</code> 代码热更新</li>
<li>对于 <code>React</code> 使用 <code>react-hot-loader</code> 或 <code>react-transform</code></li>
<li>自定义路由, 最好在路由级别更新</li>
<li>使用<code>Javascript</code>来书写配置文件</li>
<li>使用<code>resolve.root</code>来配置应用模块的路径, 允许较短的引用关系</li>
<li>使用<code>karma</code> 通过 <code>karma-webpack</code>来在浏览器测试模块</li>
<li>面向环境构建, 而不是面向浏览器构建</li>
<li>使用<code>BannerPlugin</code>来放置<code>Licensing</code></li>
<li>通过<code>debug</code>来获取更多的出错信息</li>
<li>在<code>module.loaders</code>中使用<code>include</code>而不是<code>exclude</code>, 这样更不容易出错更加清晰</li>
</ul>
<h3 id="构建性能"><a href="#构建性能" class="headerlink" title="构建性能"></a>构建性能</h3><ul>
<li>使用增量备份 如果 <code>watch</code> 网络或<code>VM</code>内部的代码,请使用 <code>watchOptions.poll</code></li>
<li>使用 <code>web-dev-server</code> 可以快速构建发布</li>
<li>使用多个 入口点 , 而不是多次运行 <code>webpack</code>(多页应用)</li>
<li>通过配置一个数组配置, 使<code>webpack</code>可以并行编译(大型配置复杂的应用)</li>
<li>大型无依赖的模块要配置<code>module.noParse</code>, 可以更快构建</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="分割App中的共有模块和代码模块"><a href="#分割App中的共有模块和代码模块" class="headerlink" title="分割App中的共有模块和代码模块"></a>分割App中的共有模块和代码模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">"./app.js"</span>,</div><div class="line">    <span class="attr">vendor</span>: [<span class="string">"jquery"</span>, <span class="string">"underscore"</span>, ...],</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="comment">/* chunkName= */</span><span class="string">"vendor"</span>, <span class="comment">/* filename= */</span><span class="string">"vendor.bundle.js"</span>)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"vendor.bundle.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"bundle.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="多入口文件分割"><a href="#多入口文件分割" class="headerlink" title="多入口文件分割"></a>多入口文件分割</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123; <span class="attr">a</span>: <span class="string">"./a"</span>, <span class="attr">b</span>: <span class="string">"./b"</span> &#125;,</div><div class="line">    <span class="attr">output</span>: &#123; <span class="attr">filename</span>: <span class="string">"[name].js"</span> &#125;,</div><div class="line">    <span class="attr">plugins</span>: [ <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"init.js"</span>) ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"init.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"a.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"b.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="CSS样式单独切成独立文件"><a href="#CSS样式单独切成独立文件" class="headerlink" title="CSS样式单独切成独立文件"></a>CSS样式单独切成独立文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// The standard entry point and output config</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="attr">posts</span>: <span class="string">"./posts"</span>,</div><div class="line">        <span class="attr">post</span>: <span class="string">"./post"</span>,</div><div class="line">        <span class="attr">about</span>: <span class="string">"./about"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].js"</span>,</div><div class="line">        <span class="attr">chunkFilename</span>: <span class="string">"[id].js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            <span class="comment">// Extract css files</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// Optionally extract less files</span></div><div class="line">            <span class="comment">// or any other compile-to-css language</span></div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</div><div class="line">                <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader!less-loader"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// You could also use other loaders the same way. I. e. the autoprefixer-loader</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// Use the plugin to specify the resulting filename (and add needed behavior to the compiler)</span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// posts.js posts.css</span></div><div class="line"><span class="comment">// post.js post.css</span></div><div class="line"><span class="comment">// about.js about.css</span></div><div class="line"><span class="comment">// 1.js 2.js (包含嵌入式的样式)</span></div></pre></td></tr></table></figure>
<h3 id="所有的CSS文件合并成1个文件-allChunks设置成true"><a href="#所有的CSS文件合并成1个文件-allChunks设置成true" class="headerlink" title="所有的CSS文件合并成1个文件, allChunks设置成true"></a>所有的CSS文件合并成1个文件, allChunks设置成true</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>, &#123;</div><div class="line">            <span class="attr">allChunks</span>: <span class="literal">true</span></div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="comment">// You’ll get these output files:</span></div><div class="line"></div><div class="line"><span class="comment">// posts.js</span></div><div class="line"><span class="comment">// post.js</span></div><div class="line"><span class="comment">// about.js</span></div><div class="line"><span class="comment">// 1.js 2.js (don’t contain embedded styles)</span></div><div class="line"><span class="comment">// style.css</span></div></pre></td></tr></table></figure>
<h3 id="公共样式会被抽出来"><a href="#公共样式会被抽出来" class="headerlink" title="公共样式会被抽出来"></a>公共样式会被抽出来</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"commons"</span>, <span class="string">"commons.js"</span>),</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="comment">// You’ll get these output files:</span></div><div class="line"></div><div class="line"><span class="comment">// commons.js commons.css</span></div><div class="line"><span class="comment">// posts.js posts.css</span></div><div class="line"><span class="comment">// post.js post.css</span></div><div class="line"><span class="comment">// about.js about.css</span></div><div class="line"><span class="comment">// 1.js 2.js (包含内置样式)</span></div><div class="line"></div><div class="line"><span class="comment">// 如果 allChunks: true</span></div><div class="line"><span class="comment">// 1.js 2.js (不含内置样式)</span></div></pre></td></tr></table></figure>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><h3 id="文件过大"><a href="#文件过大" class="headerlink" title="文件过大"></a>文件过大</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">    <span class="attr">topic</span>:<span class="string">'./src/components/app/topic.js'</span></div><div class="line">    activity: <span class="string">'./src/components/app/activity.js'</span>,</div><div class="line">    <span class="attr">react</span>: [<span class="string">'react'</span>],</div><div class="line">    <span class="attr">jquery</span>: [<span class="string">'jquery'</span>]</div><div class="line">&#125;,</div><div class="line"><span class="attr">plugins</span>:[</div><div class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</div><div class="line">        <span class="attr">name</span>: [<span class="string">'jquery'</span>, <span class="string">'react'</span>], <span class="comment">//提取公共模块</span></div><div class="line">        minChunks: <span class="literal">Infinity</span> <span class="comment">//提取所有entry依赖模块</span></div><div class="line">        &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJSPlugin(&#123;</div><div class="line">        <span class="attr">compress</span>: &#123;</div><div class="line">            <span class="attr">warinings</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        &#125;)</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="文件缓存"><a href="#文件缓存" class="headerlink" title="文件缓存"></a>文件缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">'/release/'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[chunkFilename:8].[name].js'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>: <span class="string">'[name].[chunkFilename:8].js'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自动生成页面"><a href="#自动生成页面" class="headerlink" title="自动生成页面"></a>自动生成页面</h3><p>使用 HtmlWebpackPlugin 和 ExtractTextPlugin 插件可以解决此问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">'topic.html'</span>,</div><div class="line">        <span class="attr">template</span>: __dirname + <span class="string">'/src/app.html'</span>,</div><div class="line">        <span class="attr">inject</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">chunks</span>: [<span class="string">'react'</span>, <span class="string">'jquery'</span>, <span class="string">'topic'</span>],</div><div class="line">        <span class="comment">//排序</span></div><div class="line">        chunksSortModel: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> index = &#123;<span class="string">'topic'</span>: <span class="number">1</span>, <span class="string">'react'</span>: <span class="number">3</span>, <span class="string">'jquery'</span>: <span class="number">2</span>&#125;,</div><div class="line">              aI = index[a.origins[<span class="number">0</span>].name],</div><div class="line">              bI = index[b.origins[<span class="number">0</span>].name];</div><div class="line">            <span class="keyword">return</span> aI &amp;&amp; bI ? bI - aI : <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'comm.[contenthash:8].css'</span>)</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>))</span>&#123;</div><div class="line">    <span class="keyword">var</span> dialog = <span class="built_in">require</span>(<span class="string">'../../widget/dialog'</span>),</div><div class="line">    $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack 是模块打包系统, 代码分割, 加载器, 聪明的解析, 以及插件系统是它的特色&lt;br&gt;&lt;a href=&quot;https://webpack.github.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="webpack" scheme="http://html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React Router 使用教程</title>
    <link href="http://html-js.site/2017/11/14/React-Router-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://html-js.site/2017/11/14/React-Router-使用教程/</id>
    <published>2017-11-14T03:38:16.000Z</published>
    <updated>2017-11-14T05:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>真正学会 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 是一个漫长的过程。<br><img src="/images/page/reactRouter/03.jpg" alt=""><br>你会发现，它不是一个库，也不是一个框架，而是一个庞大的体系。想要发挥它的威力，整个技术栈都要配合它改造。你要学习一整套解决方案，从后端到前端，都是全新的做法。<br><img src="/images/page/reactRouter/04.png" alt=""><br>举例来说，React 不使用 HTML，而使用 JSX 。它打算抛弃 DOM，要求开发者不要使用任何 DOM 方法。它甚至还抛弃了 SQL ，自己发明了一套查询语言 GraphQL 。当然，这些你都可以不用，React 照样运行，但是就发挥不出它的最大威力。<br>这样说吧，你只要用了 React，就会发现合理的选择就是，采用它的整个技术栈。<br>本文介绍 React 体系的一个重要部分：路由库<code>[React-Router](https://github.com/reactjs/react-router)</code>。它是官方维护的，事实上也是唯一可选的路由库。它通过管理 URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到。<br><img src="/images/page/reactRouter/05.png" alt=""><br>（[说明] 本文写作时，React-router 是 2.x 版，本文的内容只适合这个版本，与最新的 4.x 版不兼容。目前，官方同时维护 2.x 和 4.x 两个版本，所以前者依然可以用在项目中。2017年3月）</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>React Router 安装命令如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -S react-router</div></pre></td></tr></table></figure></p>
<p>使用时，路由器<code>Router</code>就是React的一个组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line">render(&lt;Router/&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</div></pre></td></tr></table></figure></p>
<p><code>Router</code>组件本身只是一个容器，真正的路由要通过<code>Route</code>组件定义。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Router, Route, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line">render((</div><div class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">    &lt;Route path="/" component=&#123;App&#125;/&gt;</div><div class="line">  &lt;/Router&gt;</div><div class="line">), document.getElementById('app'));</div></pre></td></tr></table></figure></p>
<p>上面代码中，用户访问根路由<code>/</code>（比如<code>http://www.example.com/</code>），组件<code>APP</code>就会加载到<code>document.getElementById(&#39;app&#39;)</code>。<br>你可能还注意到，<code>Router</code>组件有一个参数<code>history</code>，它的值<code>hashHistory</code>表示，路由的切换由URL的<code>hash</code>变化决定，即<code>URL</code>的<code>#</code>部分发生变化。举例来说，用户访问<code>http://www.example.com/</code>，实际会看到的是<code>http://www.example.com/#/</code>。</p>
<p><code>Route</code>组件定义了URL路径与组件的对应关系。你可以同时使用多个<code>Route</code>组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;/&gt;</div><div class="line">  &lt;Route path="/repos" component=&#123;Repos&#125;/&gt;</div><div class="line">  &lt;Route path="/about" component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，用户访问<code>/repos</code>（比如<code>http://localhost:8080/#/repos</code>）时，加载<code>Repos</code>组件；访问<code>/about</code>（<code>http://localhost:8080/#/about</code>）时，加载<code>About</code>组件。<br><a id="more"></a></p>
<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p><code>Route</code>组件还可以嵌套。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router history=&#123;hashHistory&#125;&gt;</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">    &lt;Route path="/repos" component=&#123;Repos&#125;/&gt;</div><div class="line">    &lt;Route path="/about" component=&#123;About&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，用户访问<code>/repos</code>时，会先加载<code>App</code>组件，然后在它的内部再加载<code>Repos</code>组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">  &lt;Repos/&gt;</div><div class="line">&lt;<span class="regexp">/App&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>App</code>组件要写成下面的样子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;</div><div class="line">      &#123;this.props.children&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>App</code>组件的<code>this.props.children</code>属性就是子组件。<br>子路由也可以不写在<code>Router</code>组件里面，单独传入<code>Router</code>组件的<code>routes</code>属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> routes = &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">  &lt;Route path="/repos" component=&#123;Repos&#125;/&gt;</div><div class="line">  &lt;Route path="/about" component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Route&gt;;</div><div class="line"></div><div class="line">&lt;Router routes=&#123;routes&#125; history=&#123;browserHistory&#125;/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="path-属性"><a href="#path-属性" class="headerlink" title="path 属性"></a>path 属性</h3><p><code>Route</code>组件的<code>path</code>属性指定路由的匹配规则。这个属性是可以省略的，这样的话，不管路径是否匹配，总是会加载指定组件。<br>请看下面的例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</div><div class="line">   &lt;Route path="messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，当用户访问<code>/inbox/messages/:id</code>时，会加载下面的组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">  &lt;Message/&gt;</div><div class="line">&lt;<span class="regexp">/Inbox&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果省略外层<code>Route</code>的<code>path</code>参数，写成下面的样子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Route component=&#123;Inbox&#125;&gt;</div><div class="line">  &lt;Route path="inbox/messages/:id" component=&#123;Message&#125; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>现在用户访问<code>/inbox/messages/:id</code>时，组件加载还是原来的样子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Inbox&gt;</div><div class="line">  &lt;Message/&gt;</div><div class="line">&lt;<span class="regexp">/Inbox&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p><code>path</code>属性可以使用通配符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/hello/:name"</span>&gt;</div><div class="line"><span class="comment">// 匹配 /hello/michael</span></div><div class="line"><span class="comment">// 匹配 /hello/ryan</span></div><div class="line"></div><div class="line">&lt;Route path=<span class="string">"/hello(/:name)"</span>&gt;</div><div class="line"><span class="comment">// 匹配 /hello</span></div><div class="line"><span class="comment">// 匹配 /hello/michael</span></div><div class="line"><span class="comment">// 匹配 /hello/ryan</span></div><div class="line"></div><div class="line">&lt;Route path=<span class="string">"/files/*.*"</span>&gt;</div><div class="line"><span class="comment">// 匹配 /files/hello.jpg</span></div><div class="line"><span class="comment">// 匹配 /files/hello.html</span></div><div class="line"></div><div class="line">&lt;Route path=<span class="string">"/files/*"</span>&gt;</div><div class="line"><span class="comment">// 匹配 /files/ </span></div><div class="line"><span class="comment">// 匹配 /files/a</span></div><div class="line"><span class="comment">// 匹配 /files/a/b</span></div><div class="line"></div><div class="line">&lt;Route path=<span class="string">"/**/*.jpg"</span>&gt;</div><div class="line"><span class="comment">// 匹配 /files/hello.jpg</span></div><div class="line"><span class="comment">// 匹配 /files/path/to/file.jpg</span></div></pre></td></tr></table></figure></p>
<p>通配符的规则如下。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">（1）:paramName</div><div class="line">:paramName匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出。</div><div class="line">（2）()</div><div class="line">()表示URL的这个部分是可选的。</div><div class="line">（3）*</div><div class="line">*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。</div><div class="line">（4） **</div><div class="line">** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。</div></pre></td></tr></table></figure></p>
<p><code>path</code>属性也可以使用相对路径（不以<code>/</code>开头），匹配时就会相对于父组件的路径，可以参考上一节的例子。嵌套路由如果想摆脱这个规则，可以使用绝对路由。<br>路由匹配规则是从上到下执行，一旦发现匹配，就不再其余的规则了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/comments"</span> ... /&gt;</div><div class="line">&lt;Route path="/comments" ... /&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，路径<code>/comments</code>同时匹配两个规则，第二个规则不会生效。<br>设置路径参数时，需要特别小心这一点。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path="/:userName/:id" component=&#123;UserPage&#125;/&gt;</div><div class="line">  &lt;Route path="/about/me" component=&#123;About&#125;/&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>上面代码中，用户访问<code>/about/me</code>时，不会触发第二个路由规则，因为它会匹配<code>/:userName/:id</code>这个规则。因此，带参数的路径一般要写在路由规则的底部。</p>
<p>此外，<code>URL</code>的查询字符串<code>/foo?bar=baz</code>，可以用<code>this.props.location.query.bar</code>获取。</p>
<h3 id="IndexRoute组件"><a href="#IndexRoute组件" class="headerlink" title="IndexRoute组件"></a>IndexRoute组件</h3><p>下面的例子，你会不会觉得有一点问题？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">    &lt;Route path="accounts" component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path="statements" component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，访问根路径<code>/</code>，不会加载任何子组件。也就是说，<code>App</code>组件的<code>this.props.children</code>，这时是<code>undefined</code>。<br>因此，通常会采用<code>{this.props.children || &lt;Home/&gt;}</code>这样的写法。这时，<code>Home</code>明明是<code>Accounts</code>和<code>Statements</code>的同级组件，却没有写在<code>Route</code>中。<br><code>IndexRoute</code>就是解决这个问题，显式指定<code>Home</code>是根路由的子组件，即指定默认情况下加载的子组件。你可以把<code>IndexRoute</code>想象成某个路径的<code>index.html</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">  &lt;Route path="/" component=&#123;App&#125;&gt;</div><div class="line">    &lt;IndexRoute component=&#123;Home&#125;/&gt;</div><div class="line">    &lt;Route path="accounts" component=&#123;Accounts&#125;/&gt;</div><div class="line">    &lt;Route path="statements" component=&#123;Statements&#125;/&gt;</div><div class="line">  &lt;/Route&gt;</div><div class="line">&lt;/Router&gt;</div></pre></td></tr></table></figure>
<p>现在，用户访问<code>/</code>的时候，加载的组件结构如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;App&gt;</div><div class="line">  &lt;Home/&gt;</div><div class="line">&lt;<span class="regexp">/App&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种组件结构就很清晰了：<code>App</code>只包含下级组件的共有元素，本身的展示内容则由<code>Home</code>组件定义。这样有利于代码分离，也有利于使用<code>React Router</code>提供的各种<code>API</code>。<br>注意，<code>IndexRoute</code>组件没有路径参数<code>path</code>。</p>
<h3 id="Redirect-组件"><a href="#Redirect-组件" class="headerlink" title="Redirect 组件"></a>Redirect 组件</h3><p><code>&lt;Redirect&gt;</code>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</div><div class="line">  &#123;<span class="comment">/* 从 /inbox/messages/:id 跳转到 /messages/:id */</span>&#125;</div><div class="line">  ＜Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>现在访问<code>/inbox/messages/5</code>，会自动跳转到<code>/messages/5</code>。</p>
<h3 id="IndexRedirect-组件"><a href="#IndexRedirect-组件" class="headerlink" title="IndexRedirect 组件"></a>IndexRedirect 组件</h3><p><code>IndexRedirect</code>组件用于访问根路由的时候，将用户重定向到某个子组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"/"</span> component=&#123;App&#125;&gt;</div><div class="line">  ＜IndexRedirect to=<span class="string">"/welcome"</span> /&gt;</div><div class="line">  &lt;Route path="welcome" component=&#123;Welcome&#125; /&gt;</div><div class="line">  &lt;Route path="about" component=&#123;About&#125; /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，用户访问根路径时，将自动重定向到子组件<code>welcome</code>。</p>
<h3 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h3><p><code>Link</code>组件用于取代<code>&lt;a&gt;</code>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<code>&lt;a&gt;</code>元素的<code>React</code> 版本，可以接收<code>Router</code>的状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;</div><div class="line">    &lt;ul role="nav"&gt;</div><div class="line">      &lt;li&gt;&lt;Link to="/about"&gt;About&lt;/Link&gt;&lt;/li&gt;</div><div class="line">      &lt;li&gt;&lt;Link to="/repos"&gt;Repos&lt;/Link&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果希望当前的路由与其他路由有不同样式，这时可以使用<code>Link</code>组件的<code>activeStyle</code>属性。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Link to="/about" activeStyle=&#123;&#123;color: 'red'&#125;&#125;&gt;About&lt;/Link&gt;</div><div class="line">&lt;Link to="/repos" activeStyle=&#123;&#123;color: 'red'&#125;&#125;&gt;Repos&lt;/Link&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，当前页面的链接会红色显示。<br>另一种做法是，使用<code>activeClassName</code>指定当前路由的<code>Class</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Link to="/about" activeClassName="active"&gt;About&lt;/Link&gt;</div><div class="line">&lt;Link to="/repos" activeClassName="active"&gt;Repos&lt;/Link&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码中，当前页面的链接的<code>class</code>会包含<code>active</code>。<br>在<code>Router</code>组件之外，导航到路由页面，可以使用浏览器的<code>History API</code>，像下面这样写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line">browserHistory.push(<span class="string">'/some/path'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="IndexLink"><a href="#IndexLink" class="headerlink" title="IndexLink"></a>IndexLink</h3><p>如果链接到根路由<code>/</code>，不要使用<code>Link</code>组件，而要使用<code>IndexLink</code>组件。<br>这是因为对于根路由来说，<code>activeStyle</code>和<code>activeClassName</code>会失效，或者说总是生效，因为/会匹配任何子路由。而<code>IndexLink</code>组件会使用路径的精确匹配。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;IndexLink to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span>&gt;</div><div class="line">  Home</div><div class="line">&lt;<span class="regexp">/IndexLink&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，根路由只会在精确匹配时，才具有<code>activeClassName</code>。<br>另一种方法是使用<code>Link</code>组件的<code>onlyActiveOnIndex</code>属性，也能达到同样效果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=<span class="string">"/"</span> activeClassName=<span class="string">"active"</span> onlyActiveOnIndex=&#123;<span class="literal">true</span>&#125;&gt;</div><div class="line">  Home</div><div class="line">&lt;<span class="regexp">/Link&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="histroy-属性"><a href="#histroy-属性" class="headerlink" title="histroy 属性"></a>histroy 属性</h3><p><code>Router</code>组件的<code>history</code>属性，用来监听浏览器地址栏的变化，并将URL解析成一个地址对象，供<code>React Router</code> 匹配。<br><code>history</code>属性，一共可以设置三种值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">browserHistory</div><div class="line">hashHistory</div><div class="line">createMemoryHistory</div></pre></td></tr></table></figure></p>
<p>如果设为<code>hashHistory</code>，路由将通过<code>URL</code>的<code>hash</code>部分（<code>#</code>）切换，<code>URL</code>的形式类似<code>example.com/#/some/path</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">render(</div><div class="line">  &lt;Router history=&#123;hashHistory&#125; routes=&#123;routes&#125; /&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如果设为<code>browserHistory</code>，浏览器的路由就不再通过<code>Hash</code>完成了，而显示正常的路径<code>example.com/some/path</code>，背后调用的是浏览器的<code>History API</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line">render(</div><div class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>但是，这种情况需要对<code>服务器改造</code>。否则用户直接向服务器请求某个子路由，会显示网页找不到的404错误。<br>如果开发服务器使用的是<code>webpack-dev-server</code>，加上<code>--history-api-fallback</code>参数就可以了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack-dev-server --inline --content-base . --history-api-fallback</div></pre></td></tr></table></figure></p>
<p><code>createMemoryHistory</code>主要用于服务器渲染。它创建一个内存中的<code>history</code>对象，不与浏览器<code>URL</code>互动。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> history = createMemoryHistory(location)</div></pre></td></tr></table></figure></p>
<h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><p><code>Link</code>组件用于正常的用户点击跳转，但是有时还需要表单跳转、点击按钮跳转等操作。这些情况怎么跟<code>React Router</code>对接呢？<br>下面是一个表单。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</div><div class="line">  &lt;input type="text" placeholder="userName"/&gt;</div><div class="line">  &lt;input type="text" placeholder="repo"/&gt;</div><div class="line">  &lt;button type="submit"&gt;Go&lt;/button&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>第一种方法是使用<code>browserHistory.push</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; browserHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    event.preventDefault()</div><div class="line">    <span class="keyword">const</span> userName = event.target.elements[<span class="number">0</span>].value</div><div class="line">    <span class="keyword">const</span> repo = event.target.elements[<span class="number">1</span>].value</div><div class="line">    <span class="keyword">const</span> path = <span class="string">`/repos/<span class="subst">$&#123;userName&#125;</span>/<span class="subst">$&#123;repo&#125;</span>`</span></div><div class="line">    browserHistory.push(path)</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<p>第二种方法是使用<code>context</code>对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ask for `router` from context</span></div><div class="line">  contextTypes: &#123;</div><div class="line">    <span class="attr">router</span>: React.PropTypes.object</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">this</span>.context.router.push(path)</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="路由的钩子"><a href="#路由的钩子" class="headerlink" title="路由的钩子"></a>路由的钩子</h3><p>每个路由都有<code>Enter</code>和<code>Leave</code>钩子，用户进入或离开该路由时触发。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"about"</span> component=&#123;About&#125; /&gt;</div><div class="line">＜Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</div><div class="line">  ＜Redirect <span class="keyword">from</span>=<span class="string">"messages/:id"</span> to=<span class="string">"/messages/:id"</span> /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p>上面的代码中，如果用户离开<code>/messages/:id</code>，进入<code>/about</code>时，会依次触发以下的钩子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/messages/:id的onLeave</div><div class="line">/inbox的onLeave</div><div class="line">/about的onEnter</div></pre></td></tr></table></figure></p>
<p>下面是一个例子，使用<code>onEnter</code>钩子替代<code>&lt;Redirect&gt;</code>组件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Route path=<span class="string">"inbox"</span> component=&#123;Inbox&#125;&gt;</div><div class="line">  &lt;Route</div><div class="line">    path="messages/:id"</div><div class="line">    onEnter=&#123;</div><div class="line">      (&#123;params&#125;, replace) =&gt; replace(`/messages/$&#123;params.id&#125;`)</div><div class="line">    &#125; </div><div class="line">  /&gt;</div><div class="line">&lt;/Route&gt;</div></pre></td></tr></table></figure></p>
<p><code>onEnter</code>钩子还可以用来做认证。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> requireAuth = <span class="function">(<span class="params">nextState, replace</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!auth.isAdmin()) &#123;</div><div class="line">        <span class="comment">// Redirect to Home page if not an Admin</span></div><div class="line">        replace(&#123; <span class="attr">pathname</span>: <span class="string">'/'</span> &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> AdminRoutes = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">     &lt;Route path="/admin" component=&#123;Admin&#125; onEnter=&#123;requireAuth&#125; /&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是一个高级应用，当用户离开一个路径的时候，跳出一个提示框，要求用户确认是否离开。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Home = withRouter(</div><div class="line">  React.createClass(&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      <span class="keyword">this</span>.props.router.setRouteLeaveHook(</div><div class="line">        <span class="keyword">this</span>.props.route, </div><div class="line">        <span class="keyword">this</span>.routerWillLeave</div><div class="line">      )</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    routerWillLeave(nextLocation) &#123;</div><div class="line">      <span class="comment">// 返回 false 会继续停留当前页面，</span></div><div class="line">      <span class="comment">// 否则，返回一个字符串，会显示给用户，让其自己决定</span></div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.isSaved)</div><div class="line">        <span class="keyword">return</span> <span class="string">'确认要离开？'</span>;</div><div class="line">    &#125;,</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>setRouteLeaveHook</code>方法为<code>Leave</code>钩子指定<code>routerWillLeave</code>函数。该方法如果返回<code>false</code>，将阻止路由的切换，否则就返回一个字符串，提示用户决定是否要切换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真正学会 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; 是一个漫长的过程。&lt;br&gt;&lt;img src=&quot;/images/page/reactRouter/03.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;你会发现，它不是一个库，也不是一个框架，而是一个庞大的体系。想要发挥它的威力，整个技术栈都要配合它改造。你要学习一整套解决方案，从后端到前端，都是全新的做法。&lt;br&gt;&lt;img src=&quot;/images/page/reactRouter/04.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;举例来说，React 不使用 HTML，而使用 JSX 。它打算抛弃 DOM，要求开发者不要使用任何 DOM 方法。它甚至还抛弃了 SQL ，自己发明了一套查询语言 GraphQL 。当然，这些你都可以不用，React 照样运行，但是就发挥不出它的最大威力。&lt;br&gt;这样说吧，你只要用了 React，就会发现合理的选择就是，采用它的整个技术栈。&lt;br&gt;本文介绍 React 体系的一个重要部分：路由库&lt;code&gt;[React-Router](https://github.com/reactjs/react-router)&lt;/code&gt;。它是官方维护的，事实上也是唯一可选的路由库。它通过管理 URL，实现组件的切换和状态的变化，开发复杂的应用几乎肯定会用到。&lt;br&gt;&lt;img src=&quot;/images/page/reactRouter/05.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;（[说明] 本文写作时，React-router 是 2.x 版，本文的内容只适合这个版本，与最新的 4.x 版不兼容。目前，官方同时维护 2.x 和 4.x 两个版本，所以前者依然可以用在项目中。2017年3月）&lt;/p&gt;
&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;React Router 安装命令如下。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -S react-router&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用时，路由器&lt;code&gt;Router&lt;/code&gt;就是React的一个组件。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Router &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render(&amp;lt;Router/&amp;gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;app&#39;&lt;/span&gt;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Router&lt;/code&gt;组件本身只是一个容器，真正的路由要通过&lt;code&gt;Route&lt;/code&gt;组件定义。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Router, Route, hashHistory &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-router&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;render((&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Router history=&amp;#123;hashHistory&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;Route path=&quot;/&quot; component=&amp;#123;App&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;), document.getElementById(&#39;app&#39;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码中，用户访问根路由&lt;code&gt;/&lt;/code&gt;（比如&lt;code&gt;http://www.example.com/&lt;/code&gt;），组件&lt;code&gt;APP&lt;/code&gt;就会加载到&lt;code&gt;document.getElementById(&amp;#39;app&amp;#39;)&lt;/code&gt;。&lt;br&gt;你可能还注意到，&lt;code&gt;Router&lt;/code&gt;组件有一个参数&lt;code&gt;history&lt;/code&gt;，它的值&lt;code&gt;hashHistory&lt;/code&gt;表示，路由的切换由URL的&lt;code&gt;hash&lt;/code&gt;变化决定，即&lt;code&gt;URL&lt;/code&gt;的&lt;code&gt;#&lt;/code&gt;部分发生变化。举例来说，用户访问&lt;code&gt;http://www.example.com/&lt;/code&gt;，实际会看到的是&lt;code&gt;http://www.example.com/#/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Route&lt;/code&gt;组件定义了URL路径与组件的对应关系。你可以同时使用多个&lt;code&gt;Route&lt;/code&gt;组件。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;Router history=&amp;#123;hashHistory&amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/&quot; component=&amp;#123;App&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/repos&quot; component=&amp;#123;Repos&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/about&quot; component=&amp;#123;About&amp;#125;/&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/Router&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面代码中，用户访问&lt;code&gt;/repos&lt;/code&gt;（比如&lt;code&gt;http://localhost:8080/#/repos&lt;/code&gt;）时，加载&lt;code&gt;Repos&lt;/code&gt;组件；访问&lt;code&gt;/about&lt;/code&gt;（&lt;code&gt;http://localhost:8080/#/about&lt;/code&gt;）时，加载&lt;code&gt;About&lt;/code&gt;组件。&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>npm scripts 使用指南</title>
    <link href="http://html-js.site/2017/11/13/npm-scripts-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://html-js.site/2017/11/13/npm-scripts-使用指南/</id>
    <published>2017-11-13T12:38:42.000Z</published>
    <updated>2017-11-13T13:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node 开发离不开 npm，而脚本功能是 npm 最强大、最常用的功能之一。<br>本文介绍如何使用 npm 脚本（npm scripts）。</p>
<h3 id="什么是-npm-脚本？"><a href="#什么是-npm-脚本？" class="headerlink" title="什么是 npm 脚本？"></a>什么是 npm 脚本？</h3><p>npm 允许在<code>package.json</code>文件里面，使用<code>scripts</code>字段定义脚本命令。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"build"</span>: <span class="string">"node build.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码是<code>package.json</code>文件的一个片段，里面的<code>scripts</code>字段是一个对象。它的每一个属性，对应一段脚本。比如，<code>build</code>命令对应的脚本是<code>node build.js</code>。<br>命令行下使用<code>npm run</code>命令，就可以执行这段脚本。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm run build</div><div class="line"># 等同于执行</div><div class="line">$ node build.js</div></pre></td></tr></table></figure></p>
<p>这些定义在<code>package.json</code>里面的脚本，就称为 npm 脚本。它的优点很多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">项目的相关脚本，可以集中在一个地方。</div><div class="line">不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行npm run test即可。</div><div class="line">可以利用 npm 提供的很多辅助功能。</div></pre></td></tr></table></figure></p>
<p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的<code>npm run</code>命令。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run</div></pre></td></tr></table></figure></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>npm 脚本的原理非常简单。每当执行<code>npm run</code>，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。<br>比较特别的是，<code>npm run</code>新建的这个 Shell，会将当前目录的<code>node_modules/.bin</code>子目录加入<code>PATH</code>变量，执行结束后，再将<code>PATH</code>变量恢复原样。<br>这意味着，当前目录的<code>node_modules/.bin</code>子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。比如，当前项目的依赖里面有 <code>Mocha</code>，只要直接写<code>mocha test</code>就可以了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"test"</span>: <span class="string">"mocha test"</span></div></pre></td></tr></table></figure></p>
<p>而不用写成下面这样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"test"</span>: <span class="string">"./node_modules/.bin/mocha test"</span></div></pre></td></tr></table></figure></p>
<p>由于 npm 脚本的唯一要求就是可以在 Shell 执行，因此它不一定是 Node 脚本，任何可执行文件都可以写在里面。<br>npm 脚本的退出码，也遵守 Shell 脚本规则。如果退出码不是<code>0</code>，npm 就认为这个脚本执行失败。</p>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>由于 npm 脚本就是 Shell 脚本，因为可以使用 Shell 通配符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"lint"</span>: <span class="string">"jshint *.js"</span></div><div class="line"><span class="string">"lint"</span>: <span class="string">"jshint **/*.js"</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>*</code>表示任意文件名，<code>**</code>表示任意一层子目录。<br>如果要将通配符传入原始命令，防止被 Shell 转义，要将星号转义。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"test"</span>: <span class="string">"tap test/\*.js"</span></div></pre></td></tr></table></figure></p>
<h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>向 npm 脚本传入参数，要使用–标明。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"lint"</span>: <span class="string">"jshint **.js"</span></div></pre></td></tr></table></figure></p>
<p>向上面的<code>npm run lint</code>命令传入参数，必须写成下面这样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run lint --  --reporter checkstyle &gt; checkstyle.xml</div></pre></td></tr></table></figure></p>
<p>也可以在<code>package.json</code>里面再封装一个命令。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"lint"</span>: <span class="string">"jshint **.js"</span>,</div><div class="line"><span class="string">"lint:checkstyle"</span>: <span class="string">"npm run lint -- --reporter checkstyle &gt; checkstyle.xml"</span></div></pre></td></tr></table></figure></p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。<br>如果是并行执行（即同时的平行执行），可以使用<code>&amp;</code>符号。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run script1.js &amp; npm run script2.js</div></pre></td></tr></table></figure></p>
<p>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用<code>&amp;&amp;</code>符号。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run script1.js &amp;&amp; npm run script2.js</div></pre></td></tr></table></figure></p>
<p>这两个符号是 Bash 的功能。此外，还可以使用 node 的任务管理模块：<a href="https://github.com/paulpflug/script-runner" target="_blank" rel="external">script-runner</a>、<a href="https://github.com/mysticatea/npm-run-all" target="_blank" rel="external">npm-run-all</a>、<a href="https://github.com/coderaiser/redrun" target="_blank" rel="external">redrun</a>。</p>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>一般来说，npm 脚本由用户提供。但是，npm 对两个脚本提供了默认值。也就是说，这两个脚本不用定义，就可以直接使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"start"</span>: <span class="string">"node server.js"</span>，</div><div class="line"><span class="string">"install"</span>: <span class="string">"node-gyp rebuild"</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>npm run start</code>的默认值是<code>node server.js</code>，前提是项目根目录下有<code>server.js</code>这个脚本；<code>npm run install</code>的默认值是<code>node-gyp rebuild</code>，前提是项目根目录下有<code>binding.gyp</code>文件。</p>
<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>npm 脚本有<code>pre</code>和<code>post</code>两个钩子。举例来说，<code>build</code>脚本命令的钩子就是<code>prebuild</code>和<code>postbuild</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"prebuild"</span>: <span class="string">"echo I run before the build script"</span>,</div><div class="line"><span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack"</span>,</div><div class="line"><span class="string">"postbuild"</span>: <span class="string">"echo I run after the build script"</span></div></pre></td></tr></table></figure></p>
<p>用户执行<code>npm run build</code>的时候，会自动按照下面的顺序执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run prebuild &amp;&amp; npm run build &amp;&amp; npm run postbuild</div></pre></td></tr></table></figure></p>
<p>因此，可以在这两个钩子里面，完成一些准备工作和清理工作。下面是一个例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"clean"</span>: <span class="string">"rimraf ./dist &amp;&amp; mkdir dist"</span>,</div><div class="line"><span class="string">"prebuild"</span>: <span class="string">"npm run clean"</span>,</div><div class="line"><span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack"</span></div></pre></td></tr></table></figure></p>
<p>npm 默认提供下面这些钩子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">prepublish，postpublish</div><div class="line">preinstall，postinstall</div><div class="line">preuninstall，postuninstall</div><div class="line">preversion，postversion</div><div class="line">pretest，posttest</div><div class="line">prestop，poststop</div><div class="line">prestart，poststart</div><div class="line">prerestart，postrestart</div></pre></td></tr></table></figure></p>
<p>自定义的脚本命令也可以加上<code>pre</code>和<code>post</code>钩子。比如，<code>myscript</code>这个脚本命令，也有<code>premyscript</code>和<code>postmyscript</code>钩子。不过，双重的<code>pre</code>和<code>post</code>无效，比如<code>prepretest</code>和<code>postposttest</code>是无效的。<br>npm 提供一个<code>npm_lifecycle_event</code>变量，返回当前正在运行的脚本名称，比如<code>pretest</code>、<code>test</code>、<code>posttest等</code>等。所以，可以利用这个变量，在同一个脚本文件里面，为不同的<code>npm scripts</code>命令编写代码。请看下面的例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> TARGET = process.env.npm_lifecycle_event;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (TARGET === <span class="string">'test'</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the test task!`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (TARGET === <span class="string">'pretest'</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the pretest task!`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (TARGET === <span class="string">'posttest'</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Running the posttest task!`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，<code>prepublish</code>这个钩子不仅会在<code>npm publish</code>命令之前运行，还会在<code>npm install</code>（不带任何参数）命令之前运行。这种行为很容易让用户感到困惑，所以 <code>npm 4</code>引入了一个新的钩子<code>prepare</code>，行为等同于<code>prepublish</code>，而从 <code>npm 5</code>开始，<code>prepublish</code>将只在<code>npm publish</code>命令之前运行。</p>
<h3 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h3><p>四个常用的 npm 脚本有简写形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm start是npm run start</div><div class="line">npm stop是npm run stop的简写</div><div class="line">npm test是npm run test的简写</div><div class="line">npm restart是npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start的简写</div></pre></td></tr></table></figure></p>
<p><code>npm start</code>、<code>npm stop</code>和<code>npm restart</code>都比较好理解，而<code>npm restart</code>是一个复合命令，实际上会执行三个脚本命令：<code>stop</code>、<code>restart</code>、<code>start</code>。具体的执行顺序如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">prerestart</div><div class="line">prestop</div><div class="line">stop</div><div class="line">poststop</div><div class="line">restart</div><div class="line">prestart</div><div class="line">start</div><div class="line">poststart</div><div class="line">postrestart</div></pre></td></tr></table></figure></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。<br>首先，通过<code>npm_package_</code>前缀，npm 脚本可以拿到<code>package.json</code>里面的字段。比如，下面是一个<code>package.json</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"foo"</span>, </div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.2.5"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"view"</span>: <span class="string">"node view.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么，变量<code>npm_package_name</code>返回<code>foo</code>，变量<code>npm_package_version</code>返回<code>1.2.5</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// view.js</span></div><div class="line"><span class="built_in">console</span>.log(process.env.npm_package_name); <span class="comment">// foo</span></div><div class="line"><span class="built_in">console</span>.log(process.env.npm_package_version); <span class="comment">// 1.2.5</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，我们通过环境变量<code>process.env</code>对象，拿到<code>package.json</code>的字段值。如果是 Bash 脚本，可以用<code>$npm_package_name</code>和<code>$npm_package_version</code>取到这两个值。<br><code>npm_package_</code>前缀也支持嵌套的<code>package.json</code>字段。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"repository"</span>: &#123;</div><div class="line">   <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">   <span class="string">"url"</span>: <span class="string">"xxx"</span></div><div class="line"> &#125;,</div><div class="line"> <span class="attr">scripts</span>: &#123;</div><div class="line">   <span class="string">"view"</span>: <span class="string">"echo $npm_package_repository_type"</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>repository</code>字段的<code>type</code>属性，可以通过<code>npm_package_repository_type</code>取到。<br>下面是另外一个例子。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"install"</span>: <span class="string">"foo.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>npm_package_scripts_install</code>变量的值等于<code>foo.js</code>。<br>然后，npm 脚本还可以通过<code>npm_config_</code>前缀，拿到 npm 的配置变量，即<code>npm config get xxx</code>命令返回的值。比如，当前模块的发行标签，可以通过<code>npm_config_tag</code>取到。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"view"</span>: <span class="string">"echo $npm_config_tag"</span>,</div></pre></td></tr></table></figure></p>
<p>注意，<code>package.json</code>里面的<code>config</code>对象，可以被环境变量覆盖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">  <span class="string">"name"</span> : <span class="string">"foo"</span>,</div><div class="line">  <span class="string">"config"</span> : &#123; <span class="string">"port"</span> : <span class="string">"8080"</span> &#125;,</div><div class="line">  <span class="string">"scripts"</span> : &#123; <span class="string">"start"</span> : <span class="string">"node server.js"</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，<code>npm_package_config_port</code>变量返回的是8080。这个值可以用下面的方法覆盖。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config set foo:port <span class="number">80</span></div></pre></td></tr></table></figure></p>
<p>最后，<code>env</code>命令可以列出所有环境变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"env"</span>: <span class="string">"env"</span></div></pre></td></tr></table></figure></p>
<h3 id="常用脚本示例"><a href="#常用脚本示例" class="headerlink" title="常用脚本示例"></a>常用脚本示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除目录</span></div><div class="line"><span class="string">"clean"</span>: <span class="string">"rimraf dist/*"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 本地搭建一个 HTTP 服务</span></div><div class="line"><span class="string">"serve"</span>: <span class="string">"http-server -p 9090 dist/"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 打开浏览器</span></div><div class="line"><span class="string">"open:dev"</span>: <span class="string">"opener http://localhost:9090"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 实时刷新</span></div><div class="line"> <span class="string">"livereload"</span>: <span class="string">"live-reload --port 9091 dist/"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 构建 HTML 文件</span></div><div class="line"><span class="string">"build:html"</span>: <span class="string">"jade index.jade &gt; dist/index.html"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 只要 CSS 文件有变动，就重新执行构建</span></div><div class="line"><span class="string">"watch:css"</span>: <span class="string">"watch 'npm run build:css' assets/styles/"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 只要 HTML 文件有变动，就重新执行构建</span></div><div class="line"><span class="string">"watch:html"</span>: <span class="string">"watch 'npm run build:html' assets/html"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 部署到 Amazon S3</span></div><div class="line"><span class="string">"deploy:prod"</span>: <span class="string">"s3-cli sync ./dist/ s3://example-com/prod-site/"</span>,</div><div class="line"></div><div class="line"><span class="comment">// 构建 favicon</span></div><div class="line"><span class="string">"build:favicon"</span>: <span class="string">"node scripts/favicon.js"</span>,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node 开发离不开 npm，而脚本功能是 npm 最强大、最常用的功能之一。&lt;br&gt;本文介绍如何使用 npm 脚本（npm scripts）。&lt;/p&gt;
&lt;h3 id=&quot;什么是-npm-脚本？&quot;&gt;&lt;a href=&quot;#什么是-npm-脚本？&quot; class=&quot;headerlin
    
    </summary>
    
    
      <category term="node" scheme="http://html-js.site/tags/node/"/>
    
      <category term="npm" scheme="http://html-js.site/tags/npm/"/>
    
  </entry>
  
</feed>
