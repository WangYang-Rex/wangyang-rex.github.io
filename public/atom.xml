<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大洋</title>
  
  <subtitle>专注于前端</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.html-js.site/"/>
  <updated>2021-08-23T06:27:15.875Z</updated>
  <id>http://blog.html-js.site/</id>
  
  <author>
    <name>大洋</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git commit前检测husky与pre-commit</title>
    <link href="http://blog.html-js.site/2021/08/23/git-commit%E5%89%8D%E6%A3%80%E6%B5%8Bhusky%E4%B8%8Epre-commit/"/>
    <id>http://blog.html-js.site/2021/08/23/git-commit前检测husky与pre-commit/</id>
    <published>2021-08-23T06:27:15.000Z</published>
    <updated>2021-08-23T06:27:15.875Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node文件上传oss</title>
    <link href="http://blog.html-js.site/2021/08/20/node%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0oss/"/>
    <id>http://blog.html-js.site/2021/08/20/node文件上传oss/</id>
    <published>2021-08-20T06:32:19.000Z</published>
    <updated>2021-08-20T06:32:19.699Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计方案,写了才知道多香</title>
    <link href="http://blog.html-js.site/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88-%E5%86%99%E4%BA%86%E6%89%8D%E7%9F%A5%E9%81%93%E5%A4%9A%E9%A6%99/"/>
    <id>http://blog.html-js.site/2021/08/18/设计方案-写了才知道多香/</id>
    <published>2021-08-18T08:04:43.000Z</published>
    <updated>2021-08-20T07:21:30.868Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计方案，拿来吧你"><a href="#设计方案，拿来吧你" class="headerlink" title="设计方案，拿来吧你"></a>设计方案，拿来吧你</h3><p>今天要跟大家聊聊开发流程中不起眼的环节——<code>设计方案</code>。你们可能没听过，也可能只是简单得走过过场，别划走，这非常重要！</p><p>更完善、更规范、更高效的开发流程：<code>产品需求设计</code> =&gt; <code>需求粗评</code> =&gt; <code>做设计方案</code> =&gt; <code>粗估时</code> =&gt; <code>需求细评</code> =&gt; <code>排期</code> =&gt; <code>开发</code> =&gt; <code>提测、修bug</code> =&gt; <code>code review</code> =&gt; <code>上线</code></p><p>平常工作中，比较少接触的可能就是1和<code>code review</code>了，这两者分别是干什么的？</p><ul><li><code>设计方案</code>：在拿到需求后，写一个文档，来描述自己对于该需求的实现思路、模块划分等相关考虑的点，可供今后自己或他人查阅。</li><li><code>Code review</code>：代码提交合并前给mentor或leader检查一下你的代码，让别人作为旁观者来看你的代码，集思广益，完善代码，发现未考虑到的边界问题。</li></ul><a id="more"></a><p>说实话哈，啥设计方案啊，通常都是在工作时，突然就被产品叫过去，花5分钟给我阐述了一下下个版本他想要上的功能，紧接着立马就问我：<code>你看看大概需要多久？我的预估是5天后就上线，ok吗</code>？</p><p>我： <code>？？？？？？？？？</code> （内心os：我刚知道这个需求，我哪能那么快知道我得花多久做出来啊！你说5天就5天吧，反正我说6天也没用）</p><p><img src="/images/page/fangan/-1.png" alt></p><p>太离谱了，可能很多小公司的现状都是像我说的这样吧！这样真的很不好，版本快速迭代中掺杂着许多需求，而开发时间又比较紧张，只会让开发想尽办法怎么赶紧把功能实现，而不会去考虑任何性能问题，更别说让你考虑边界问题了。长期这样下去，你会深深地体会到你处于一个无止境的项目快速迭代中，加班、通宵可能都是常事，哪还会有时间去学习新的知识或做自己爱做的事，也不会有多余的时间去关注自己接手的需求从开发到上线的整个生命周期线，不会定期去复盘，因此个人的项目经验、技术积累是很少的</p><p>之前也有小伙伴私聊过我类似的情况，我也是建议他最好能在一个有「自我学习」、「定期复盘反省」的环境中工作</p><p>大圣老师就是如此，记得他在有次直播中讲到，他当年去360时，把「能留给自己充足的学习时间」作为他最在乎的因素，这样真的非常好。大家也可以看看自己当前的现状是否真的利于自己发展，然后做更长远的打算。</p><p>好了，言归正传！</p><h3 id="我们为什么要写设计方案呢"><a href="#我们为什么要写设计方案呢" class="headerlink" title="我们为什么要写设计方案呢"></a>我们为什么要写设计方案呢</h3><p>目的是为了在真正开始敲代码之前理清自己的思路，对需求有一个更清楚的认识，这样就不至于在开始开发后边写代码边思考了，想必你们都有遇到在写代码时突然发现哪一模块之前没考虑到，然后对之前写好的代码的架构进行调整，代码进行抽离，这无疑是在降低开发效率。</p><p>另一点就是时间一久，突然这个功能出现了一个bug让你去修复，你可能会对自己写的代码有些忘却，此时找到之前自己写的设计方案一看便知，这同样也能作为新入职的小伙伴在熟悉现有代码的重要资源！</p><p>对于第二点我深有感触，到一个新部门总会接手1~2个祖传项目代码，紧接着你就要阅读他们的代码逻辑，这是非常痛苦的，因为你根本不了解这些需求的背景，也不了解他人代码完整的设计思路，这不跟抱着一本厚书在那硬啃一样嘛！</p><p>要是之前的人都写过设计方案，你完全可以在看每个模块的时候，找到相应的文档，这不事半功倍嘛~</p><h3 id="那么如何写设计方案呢？"><a href="#那么如何写设计方案呢？" class="headerlink" title="那么如何写设计方案呢？"></a>那么如何写设计方案呢？</h3><p>整个方案大致分为4个部分：<code>需求相关信息</code>、<code>方案调研</code>、<code>具体方案</code>、<code>其它</code></p><h4 id="一、需求相关信息"><a href="#一、需求相关信息" class="headerlink" title="一、需求相关信息"></a>一、需求相关信息</h4><p>作为一个开发工程师，一定要有工程师的精神，需要对自己所接手的需求有清晰的认识，这包括：负责这个需求的其它相关人员分别是谁（产品、测试、UI、后端等）、我这个需求的出现背景是什么、需求何时提测，何时上线…</p><p>格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">一、需求相关信息</span><br><span class="line">​</span><br><span class="line">  需求背景：因为我们要做线下推广，提高xxxxxxxxx</span><br><span class="line">  PRD：文档链接</span><br><span class="line">  产品：小华</span><br><span class="line">  UI：小明</span><br><span class="line">  测试：小红</span><br><span class="line">  前端：零一</span><br><span class="line">  服务端：小张</span><br><span class="line">  联调时间：2021.07.30</span><br><span class="line">  提测时间：2021.07.31</span><br><span class="line">  上线时间：2021.08.10</span><br></pre></td></tr></table></figure><p>把这些内容写在设计方案的开头，让跟这个需求相关、不相关的人都能一目了然，如果遇到问题也可以立马精准地找到相应的人</p><p><img src="/images/page/fangan/0.png" alt></p><h4 id="二、方案调研"><a href="#二、方案调研" class="headerlink" title="二、方案调研"></a>二、方案调研</h4><p>这一部分主要是需要我们在考虑功能实现的技术选型时，对比很多不同的方案，综合考虑每一种方案的优缺点，可以适当地取舍和改进，形成一套适合当前场景的技术方案。</p><p>举个比较简单的例子吧，假设你此次接的需求中有一个复杂的动画要实现，那么你以下这几种考虑的方向</p><ul><li>以前我有没有做过类似的动画，可以借鉴的？</li><li>公司内部有没有什么现成的库或者代码能用？</li><li>业界有没有现成的库或者比较不错的实现思路？</li><li>如果不用别的库，用原生实现，我会怎么做？有没有什么兼容性等其它问题？</li></ul><p>在了解了这四种场景以后，我们此时需要思考别人的方案和我自己的方案哪一个更好，优缺点分别是什么？别人的方案是否适用于我们当前的场景？ 在综合考虑了众多因素后，我们选择一套相对比较靠谱的方案用于实行。</p><p>通过以上几个步骤来支撑我们接下来敲出来的代码的可靠性与质量！</p><h4 id="三、具体方案"><a href="#三、具体方案" class="headerlink" title="三、具体方案"></a>三、具体方案</h4><p>这部分是最重要的了，它几乎涵盖了你所有需要思考的东西：<code>业务的完整流程</code>、<code>数据结构的设计</code>、<code>关键功能的逻辑描述</code>、<code>异常的处理</code>、<code>安全性</code>、<code>性能</code>、<code>与现有业务的耦合情况</code>、<code>组件复用</code></p><p>起码要保证其他人以及你自己，在看到具体的方案介绍时，可以很清楚地明白你的设计思路、写代码的思路、模块的划分。你可以用任何形式去表达你的思路，例如伪代码、流程图或者纯文字等等.</p><p><code>流程图</code><br><img src="/images/page/fangan/1.png" alt></p><p>流程图的设计能让你对自己的需求有更清楚的了解，也能让他人对这个需求有一个直观的认识</p><p><code>伪代码</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSomeData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data; </span><br><span class="line">  <span class="keyword">if</span>(无缓存) &#123;</span><br><span class="line">    <span class="comment">// 请求数据</span></span><br><span class="line">    <span class="keyword">if</span>(请求异常) <span class="comment">// 展示错误页面;</span></span><br><span class="line">    data = 请求到的数据;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 展示页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>伪代码可以在你不写具体代码实现前，展示大致的编码思路，那么在大家一起过你的设计方案时，就可以很清楚得知道你的代码想怎么实现，因为是伪代码，所以非技术的同学说不定也能看懂，然后给你提点意见呢！</p><p><img src="/images/page/fangan/2.png" alt></p><p>模块的划分也是考验你架构设计的一个点，你需要考虑清楚你的代码中，哪些需要单独抽离出来作为一个单独的模块，哪些可以作为公共组件，哪些是跟业务高耦合的</p><p><img src="/images/page/fangan/3.png" alt></p><p>用例图的话，能帮助你整理需求中每一个大大小小的场景，这个光靠脑子想可能没有太大的作用，当你列出来时，你可能会发现这个流程好像少了点什么东西，也就是有助于你考虑更全，关注到一些犄角旮旯的边界。插播个小彩蛋，我有个前端同事写用例写的特别好，有一次leader调侃说他这个写的也太太太详细了，每一处考虑得都特别周全，甚至都可以直接原封不动得给测试当测试用例了，hhhh</p><p>我所列举的例子都比较简单，大家根据自己实际情况进行操作就好。<br>还有一些别的就是，你还需要考虑一下你的<code>某些接口需不需要考虑安全问题</code>，比如点击submit会增加抽奖次数，那不会被别人恶意伪造一些信息进行刷抽奖次数呢？还有<code>你的页面会不会存在一些性能问题</code>？如果以后要在这个需求上扩展别的功能，<code>你觉得你的代码可扩展性如何</code>？当然，你要考虑的肯定远不止这些，希望每个工程师都能对自己的方案考虑周全，做到精益求精，这样才是一个合格的工程师！</p><h4 id="四、其它"><a href="#四、其它" class="headerlink" title="四、其它"></a>四、其它</h4><p>最后一部分完全可以留给你自己自由发挥，可以记录下与这个需求相关的一切，我个人觉得可以写的有这些：</p><ul><li>你在写设计方案时遇到的问题以及解决办法</li><li>你的代码上线以后，用户的反馈如何，如果好，好在哪里；如果不好，到底是哪里出了问题，该如何解决</li><li>你在方案调研时，有没有发现别人的方案哪里做的不好，或者有哪些值得学习的地方</li><li>在此次整个开发流程中，有觉得哪个流程不太好的（低效、无用的沟通等等），可以记录在此，然后找相关人员讨论改进</li><li>more…</li></ul><p>总之，这里随心所欲发挥<br><img src="/images/page/fangan/4.png" alt></p><h3 id="实践感受"><a href="#实践感受" class="headerlink" title="实践感受"></a>实践感受</h3><p>一开始让我写设计方案时我略微有些抗拒，就心里想着为啥写个代码还要先写文档，这不是在增加我的工作量嘛？<br>后来leader告诉我，写设计方案的时间不会算在我的开发时间内的，而是在开发时间之前，给我3~4天专门用来写设计方案（内心os：woc？这么爽！我写！我写！），这不香的要死嘛，于是我也就开始尝试写设计方案了</p><p><img src="/images/page/fangan/5.png" alt></p><p>在写的过程中发现，流程上我可能会发现一些同事们都没有考虑到的问题，这是站在开发的视角去看的，所以产品同学难免会遗漏一些点；而在case的梳理上我又偶尔会发现大家都没有考虑到的边界问题，可能是真的大家都没考虑到，也有可能是我的想法比较独特，但这都ok，在后面所有相关人员统一过我的设计方案的时候可以一起讨论出个对错。嗯，这些都是光凭脑袋想不一定能想到的，或者哪个瞬间想到了却来不及记录，到了开发的时候又给忘了！</p><p>等我设计方案写完以后，相关人员会约一个时间一起听我讲一遍我的设计方案，不同岗位的同学有不同的视角去看问题，每个人也有不同的想法，所以这里能暴露出很多问题，也能把很多不ok的点处理掉，例如我的leader经验比较丰富，每次过设计方案时他都会提醒我哪一块儿地方可能会存在安全问题，记得考虑一下。</p><p>再后来测试同学会整理一些测试用例，拉大家case评审，你之前做过了设计方案，对自己的需求非常熟悉了，那么在测试过你的需求的case时你会更加的明白，也许测试考虑到了你没考虑到的点，也许是他遗漏了某些点而你考虑到了，这些都是可以互补的。</p><p>完成了以上内容，基本上我写代码的思路就通了，确实也节省了不少的时间！等我开发完以后，还会再自测一遍，怎么测？直接拿我设计方案和测试给出来的测试用例对照着自测就好啦，总不能说你自己这里都还没跑通就拿过去给测试测吧？</p><p>总之收获还是很大，但设计方案的实施还是需要有一个不那么短的开发周期的，那种需求刚提，5天上线的情况哪有时间给你写设计方案啊，就更别说考虑这么多东西了，你自己个人也很难沉淀下东西<br>不过哦~我突然又发现了写设计方案的另外一个隐藏好处！我们的简历上不是会写上自己过往项目经验和工作经历嘛，这些都跟我们做过的项目需求紧密相关，你如果之前每个需求都写设计方案，那么写简历还用愁嘛，妥妥的筛选一下 + 复制粘贴啊</p><p><img src="/images/page/fangan/6.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设计方案，拿来吧你&quot;&gt;&lt;a href=&quot;#设计方案，拿来吧你&quot; class=&quot;headerlink&quot; title=&quot;设计方案，拿来吧你&quot;&gt;&lt;/a&gt;设计方案，拿来吧你&lt;/h3&gt;&lt;p&gt;今天要跟大家聊聊开发流程中不起眼的环节——&lt;code&gt;设计方案&lt;/code&gt;。你们可能没听过，也可能只是简单得走过过场，别划走，这非常重要！&lt;/p&gt;
&lt;p&gt;更完善、更规范、更高效的开发流程：&lt;code&gt;产品需求设计&lt;/code&gt; =&amp;gt; &lt;code&gt;需求粗评&lt;/code&gt; =&amp;gt; &lt;code&gt;做设计方案&lt;/code&gt; =&amp;gt; &lt;code&gt;粗估时&lt;/code&gt; =&amp;gt; &lt;code&gt;需求细评&lt;/code&gt; =&amp;gt; &lt;code&gt;排期&lt;/code&gt; =&amp;gt; &lt;code&gt;开发&lt;/code&gt; =&amp;gt; &lt;code&gt;提测、修bug&lt;/code&gt; =&amp;gt; &lt;code&gt;code review&lt;/code&gt; =&amp;gt; &lt;code&gt;上线&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;平常工作中，比较少接触的可能就是1和&lt;code&gt;code review&lt;/code&gt;了，这两者分别是干什么的？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;设计方案&lt;/code&gt;：在拿到需求后，写一个文档，来描述自己对于该需求的实现思路、模块划分等相关考虑的点，可供今后自己或他人查阅。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code review&lt;/code&gt;：代码提交合并前给mentor或leader检查一下你的代码，让别人作为旁观者来看你的代码，集思广益，完善代码，发现未考虑到的边界问题。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Router源码解析</title>
    <link href="http://blog.html-js.site/2021/08/10/React-Router%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.html-js.site/2021/08/10/React-Router源码解析/</id>
    <published>2021-08-10T09:06:00.000Z</published>
    <updated>2021-08-13T06:19:18.543Z</updated>
    
    <content type="html"><![CDATA[<p>我一直认为，会用框架和用好框架是有很大的区别的，当用框架到一定程度的时候，就需要看看框架对应生态中那些不可获取的库，这样能加深在不同框架中同样的功能的优秀实现方案。</p><blockquote><p>了解React Router的实现原理<br>如何监听路有变化以及渲染对应的组件</p></blockquote><h3 id="React-Router是什么？"><a href="#React-Router是什么？" class="headerlink" title="React Router是什么？"></a>React Router是什么？</h3><p>React Router是React团队开发的基于React框架架构所实现的路由库。</p><p><a href="https://link.zhihu.com/?target=https%3A//github.com/ReactTraining/react-router" target="_blank" rel="noopener">react-router</a></p><p>React Router有多个版本。</p><p><img src="/images/page/reactRouter2/1.png" alt></p><p><code>react-router-dom</code>是基于<code>react-router</code>再封装的一个带有<code>React DOM</code>组件的库，其中包括了<code>Link</code>、<code>HashRouter</code>、<code>BrowserRouter</code>等组件提供给开发者通过使用标签的方式控制路由跳转。</p><a id="more"></a><h3 id="阅读须知"><a href="#阅读须知" class="headerlink" title="阅读须知"></a>阅读须知</h3><ul><li>源码阅读基于react-router和react-router-dom 5.2.1版本</li></ul><h3 id="React-Router如何监听路由变化的？"><a href="#React-Router如何监听路由变化的？" class="headerlink" title="React Router如何监听路由变化的？"></a>React Router如何监听路由变化的？</h3><p><code>react-router</code>使用了一个<code>history</code>的库来监听不同的路由变化，<code>react-router</code>支持我们使用<code>hash</code>和<code>bowser</code>两种路由规则，所以<code>history</code>这个库可以根据调用的<code>api</code>不同，来区分当前是监听不同的路由方式。</p><p><a href="https://github.com/ReactTraining/history" target="_blank" rel="noopener">history</a></p><p><code>history</code>这个库的内容并不在本文章的阅读范围内，有兴趣的可以自行查看。</p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>我们开始逐步开始阅读源码。我们使用<code>React Router</code>的时候第一个了解的就是<code>BrowserRouter</code>和<code>HashRouter</code>这两个内置的组件。通过源码发现其实两个组件的实现是完全一样的，只是内部调用创建<code>history</code>实例的方式不一样，一个调用<code>createHashHistory</code>，另一个调用<code>createBrowserHistory</code>。</p><h3 id="官方demo"><a href="#官方demo" class="headerlink" title="官方demo"></a>官方demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/about"</span>&gt;About&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/dashboard"</span>&gt;Dashboard&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;hr /</span>&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span>&gt;</span><br><span class="line">            &lt;Home /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>about<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;About /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/dashboard<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Dashboard /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><!-- ![](/images/page/reactRouter2/2.jpeg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/BrowserRouter.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createBrowserHistory <span class="keyword">as</span> createHistory &#125; <span class="keyword">from</span> <span class="string">"history"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">"tiny-warning"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The public API for a &lt;Router&gt; that uses HTML5 history.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserRouter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  history = createHistory(<span class="keyword">this</span>.props);</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Router history=&#123;this.history&#125; children=&#123;this.props.children&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BrowserRouter;</span><br></pre></td></tr></table></figure><h3 id="HashRouter"><a href="#HashRouter" class="headerlink" title="HashRouter"></a>HashRouter</h3><!-- ![](/images/page/reactRouter2/3.jpeg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/HashRouter.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createHashHistory <span class="keyword">as</span> createHistory &#125; <span class="keyword">from</span> <span class="string">"history"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">"tiny-warning"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The public API for a &lt;Router&gt; that uses window.location.hash.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashRouter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  history = createHistory(<span class="keyword">this</span>.props);</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Router history=&#123;this.history&#125; children=&#123;this.props.children&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HashRouter;</span><br></pre></td></tr></table></figure><p>本篇文章是基于<code>HashRouter</code>进行阅读，实际上只是监听的事件不一样而已。</p><p>通过源码发现，<code>HashRouter</code>实例化了一个<code>history</code>的实例，并且将<code>history</code>实例通过<code>props</code>和<code>children</code>一起传入的<code>Router</code>组件当中。</p><h3 id="Router-组件"><a href="#Router-组件" class="headerlink" title="Router 组件"></a>Router 组件</h3><!-- ![](/images/page/reactRouter2/4.jpeg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/Router.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">"tiny-warning"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> HistoryContext <span class="keyword">from</span> <span class="string">"./HistoryContext.js"</span>;</span><br><span class="line"><span class="keyword">import</span> RouterContext <span class="keyword">from</span> <span class="string">"./RouterContext.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The public API for putting history on context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> computeRootMatch(pathname) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">url</span>: <span class="string">"/"</span>, <span class="attr">params</span>: &#123;&#125;, <span class="attr">isExact</span>: pathname === <span class="string">"/"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      location: props.history.location</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is a bit of a hack. We have to start listening for location</span></span><br><span class="line">    <span class="comment">// changes here in the constructor in case there are any &lt;Redirect&gt;s</span></span><br><span class="line">    <span class="comment">// on the initial render. If there are, they will replace/push when</span></span><br><span class="line">    <span class="comment">// they mount and since cDM fires in children before parents, we may</span></span><br><span class="line">    <span class="comment">// get a new location before the &lt;Router&gt; is mounted.</span></span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>._pendingLocation = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!props.staticContext) &#123;</span><br><span class="line">      <span class="keyword">this</span>.unlisten = props.history.listen(<span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._isMounted) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123; location &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>._pendingLocation = location;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._pendingLocation) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">location</span>: <span class="keyword">this</span>._pendingLocation &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.unlisten) &#123;</span><br><span class="line">      <span class="keyword">this</span>.unlisten();</span><br><span class="line">      <span class="keyword">this</span>._isMounted = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>._pendingLocation = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;RouterContext.Provider</span><br><span class="line">        value=&#123;&#123;</span><br><span class="line">          history: <span class="keyword">this</span>.props.history,</span><br><span class="line">          location: <span class="keyword">this</span>.state.location,</span><br><span class="line">          match: Router.computeRootMatch(<span class="keyword">this</span>.state.location.pathname),</span><br><span class="line">          staticContext: <span class="keyword">this</span>.props.staticContext</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;HistoryContext.Provider</span><br><span class="line">          children=&#123;<span class="keyword">this</span>.props.children || <span class="literal">null</span>&#125;</span><br><span class="line">          value=&#123;<span class="keyword">this</span>.props.history&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/RouterContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Router;</span></span><br></pre></td></tr></table></figure><blockquote><p>computeRootMatch函数中，如果pathname !== “/“的下，isExact会为false，后续会用到</p></blockquote><h3 id="Route-组件"><a href="#Route-组件" class="headerlink" title="Route 组件"></a>Route 组件</h3><!-- ![](/images/page/reactRouter2/5.jpeg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/Route.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isValidElementType &#125; <span class="keyword">from</span> <span class="string">"react-is"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> invariant <span class="keyword">from</span> <span class="string">"tiny-invariant"</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">"tiny-warning"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RouterContext <span class="keyword">from</span> <span class="string">"./RouterContext.js"</span>;</span><br><span class="line"><span class="keyword">import</span> matchPath <span class="keyword">from</span> <span class="string">"./matchPath.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyChildren</span>(<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.Children.count(children) === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalChildrenDev</span>(<span class="params">children, props, path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = children(props);</span><br><span class="line"></span><br><span class="line">  warning(</span><br><span class="line">    value !== <span class="literal">undefined</span>,</span><br><span class="line">    <span class="string">"You returned `undefined` from the `children` function of "</span> +</span><br><span class="line">      <span class="string">`&lt;Route<span class="subst">$&#123;path ? <span class="string">` path="<span class="subst">$&#123;path&#125;</span>"`</span> : <span class="string">""</span>&#125;</span>&gt;, but you `</span> +</span><br><span class="line">      <span class="string">"should have returned a React element or `null`"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> value || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The public API for matching a single path and rendering.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;RouterContext.Consumer&gt;</span><br><span class="line">        &#123;context =&gt; &#123;</span><br><span class="line">          invariant(context, <span class="string">"You should not use &lt;Route&gt; outside a &lt;Router&gt;"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> location = <span class="keyword">this</span>.props.location || context.location;</span><br><span class="line">          <span class="keyword">const</span> match = <span class="keyword">this</span>.props.computedMatch</span><br><span class="line">            ? <span class="keyword">this</span>.props.computedMatch <span class="comment">// &lt;Switch&gt; already computed the match for us</span></span><br><span class="line">            : <span class="keyword">this</span>.props.path</span><br><span class="line">            ? matchPath(location.pathname, <span class="keyword">this</span>.props)</span><br><span class="line">            : context.match;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> props = &#123; ...context, location, match &#125;;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> &#123; children, component, render &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Preact uses an empty array as children by</span></span><br><span class="line">          <span class="comment">// default, so use null if that's the case.</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children) &amp;&amp; isEmptyChildren(children)) &#123;</span><br><span class="line">            children = <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">            &lt;RouterContext.Provider value=&#123;props&#125;&gt;</span><br><span class="line">              &#123;props.match</span><br><span class="line">                ? children</span><br><span class="line">                  ? <span class="keyword">typeof</span> children === <span class="string">"function"</span></span><br><span class="line">                    ? __DEV__</span><br><span class="line">                      ? evalChildrenDev(children, props, <span class="keyword">this</span>.props.path)</span><br><span class="line">                      : children(props)</span><br><span class="line">                    : children</span><br><span class="line">                  : component</span><br><span class="line">                  ? React.createElement(component, props)</span><br><span class="line">                  : render</span><br><span class="line">                  ? render(props)</span><br><span class="line">                  : <span class="literal">null</span></span><br><span class="line">                : <span class="keyword">typeof</span> children === <span class="string">"function"</span></span><br><span class="line">                ? __DEV__</span><br><span class="line">                  ? evalChildrenDev(children, props, <span class="keyword">this</span>.props.path)</span><br><span class="line">                  : children(props)</span><br><span class="line">                : <span class="literal">null</span>&#125;</span><br><span class="line">            &lt;<span class="regexp">/RouterContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">          );</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>RouterContext.Consumer&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Route;</span><br></pre></td></tr></table></figure><p>接下来我们看看<code>matchPath</code>函数是如何判断当前的<code>url</code>是否命中当前<code>Route</code>组件的<code>path</code>的。</p><p><img src="/images/page/reactRouter2/6.jpeg" alt></p><p>到这里，就是大概整体渲染的时候React Router做了什么事情。</p><p>总结：</p><ul><li>HashRouter</li><li><ul><li>实例化history，调用createHashHistory</li></ul></li><li><ul><li>将children和history传入Router组件</li></ul></li><li>Router</li><li><ul><li>constructor周期内监听history的路由事件，将新的location存到Router的state中</li></ul></li><li><ul><li>componentWillUnmount移除监听</li></ul></li><li><ul><li>使用Context包裹子组件（Provider），存入history、location、match(默认的命中对象)等。</li></ul></li><li>Route</li><li><ul><li>使用Context，声明为Consumer，接收Router传入的值。</li></ul></li><li><ul><li>调用matchPath函数来判断当前Route的path是否命中当前url。</li></ul></li><li><ul><li>使用Context包裹子组件（Provider），将Router传递进来的参数以及命中结果等传入给Route包裹的子组件</li></ul></li><li><ul><li>渲染循序如下：</li></ul></li><li><ul><li>当前Route是否命中url</li></ul></li><li><ul><li><ul><li>是</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>判断当前Route是否有子组件，有那么将渲染子组件，否则进入下一条</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>判断当前Route是否有component参数，有就执行React.createElement创建component，否则进入下一条</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>判断当前Route是否有render参数（函数），有就执行render函数，否则进入下一条。</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li>返回null</li></ul></li></ul></li></ul></li><li><ul><li><ul><li>否</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>返回null</li></ul></li></ul></li></ul></li></ul><p>当我们的路由发生变化时，<code>Router</code>中所监听的<code>history</code>函数将会触发，返回新的<code>location</code>对象，这是将会触发<code>Router</code>的<code>setState</code>，然后对应所有绑定<code>Router</code>的<code>Route</code>都将会重新渲染判断是否命中路由来进行重新渲染。</p><h3 id="Switch-组件"><a href="#Switch-组件" class="headerlink" title="Switch 组件"></a>Switch 组件</h3><p>如果我们只是单纯的使用<code>Route</code>组件来设置路由，当我们的当前的<code>url</code>满足多条路由规则的情况下，会出现多个<code>Route</code>的子组件进行渲染，这个时候如果当我们使用<code>Switch</code>包裹多个<code>Route</code>组件的话，那么只会渲染首先命中当前<code>url</code>的<code>Route</code>组件，具体是如何实现的呢？</p><!-- ![](/images/page/reactRouter2/7.jpeg) --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">import</span> invariant <span class="keyword">from</span> <span class="string">"tiny-invariant"</span>;</span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">"tiny-warning"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RouterContext <span class="keyword">from</span> <span class="string">"./RouterContext.js"</span>;</span><br><span class="line"><span class="keyword">import</span> matchPath <span class="keyword">from</span> <span class="string">"./matchPath.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The public API for rendering the first &lt;Route&gt; that matches.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Switch</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;RouterContext.Consumer&gt;</span><br><span class="line">        &#123;context =&gt; &#123;</span><br><span class="line">          invariant(context, <span class="string">"You should not use &lt;Switch&gt; outside a &lt;Router&gt;"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> location = <span class="keyword">this</span>.props.location || context.location;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">let</span> element, match;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We use React.Children.forEach instead of React.Children.toArray().find()</span></span><br><span class="line">          <span class="comment">// here because toArray adds keys to all child elements and we do not want</span></span><br><span class="line">          <span class="comment">// to trigger an unmount/remount for two &lt;Route&gt;s that render the same</span></span><br><span class="line">          <span class="comment">// component at different URLs.</span></span><br><span class="line">          React.Children.forEach(<span class="keyword">this</span>.props.children, child =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (match == <span class="literal">null</span> &amp;&amp; React.isValidElement(child)) &#123;</span><br><span class="line">              element = child;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> path = child.props.path || child.props.from;</span><br><span class="line"></span><br><span class="line">              match = path</span><br><span class="line">                ? matchPath(location.pathname, &#123; ...child.props, path &#125;)</span><br><span class="line">                : context.match;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> match</span><br><span class="line">            ? React.cloneElement(element, &#123; location, <span class="attr">computedMatch</span>: match &#125;)</span><br><span class="line">            : <span class="literal">null</span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/RouterContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Switch;</span></span><br></pre></td></tr></table></figure><p>所以<code>Switch</code>和<code>Route</code>的区别是在于，<code>Switch</code>只会渲染满足的条件的<code>Route</code>，而<code>Route</code>会根据传入的<code>path</code>来判断如果满足当前<code>url</code>的情况下，就会渲染<code>Route</code>的子组件。<code>Switch</code>就是从而实现<code>Route</code>同时只会命中一个的功能。</p><h3 id="Link-组件"><a href="#Link-组件" class="headerlink" title="Link 组件"></a>Link 组件</h3><p>Link组件也是相当简单的一个组件，内部主要做了以下事情：</p><ul><li>判断传入参数replace，是使用replace还是push进行跳转</li><li>执行传入的onClick事件</li><li>判断一些参数，例如（传入_blank参数，将交由浏览器处理）</li><li>触发内部点击事件，使用history库实例后的push或replace来控制前端路由跳转</li><li>禁止默认事件</li></ul><p>以下是Link组件的点击处理逻辑：</p><p><img src="/images/page/reactRouter2/8.jpeg" alt></p><p><code>Link</code>组件是如何获取到<code>history</code>的那，我们使用的时候并没有传递进去当前的<code>history</code>实例呀，实际上还记得之前看<code>Route</code>组件的时候，在<code>return</code>的时候，又包裹了一层<code>Context</code>吗，其实实际上就是给<code>Link</code>这类型的标签方便获取到<code>history</code>实例的，而<code>Link</code>组件也是使用<code>Context</code>。</p><p><img src="/images/page/reactRouter2/9.jpeg" alt></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p><code>React Router</code>的代码其实很好理解，主要涉及到的是<code>history</code>这个库是核心点，整个路由的触发事件的封装，抹平了浏览器差异。其次就是<code>React Router</code>实际是基于<code>context</code>来实现<code>Router</code>、<code>Route</code>、<code>Link</code>等组件中，<code>history</code>，<code>location</code>等值的传递。</p><!-- https://zhuanlan.zhihu.com/p/106042913 -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直认为，会用框架和用好框架是有很大的区别的，当用框架到一定程度的时候，就需要看看框架对应生态中那些不可获取的库，这样能加深在不同框架中同样的功能的优秀实现方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;了解React Router的实现原理&lt;br&gt;如何监听路有变化以及渲染对应的组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;React-Router是什么？&quot;&gt;&lt;a href=&quot;#React-Router是什么？&quot; class=&quot;headerlink&quot; title=&quot;React Router是什么？&quot;&gt;&lt;/a&gt;React Router是什么？&lt;/h3&gt;&lt;p&gt;React Router是React团队开发的基于React框架架构所实现的路由库。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/ReactTraining/react-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;react-router&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Router有多个版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/page/reactRouter2/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;react-router-dom&lt;/code&gt;是基于&lt;code&gt;react-router&lt;/code&gt;再封装的一个带有&lt;code&gt;React DOM&lt;/code&gt;组件的库，其中包括了&lt;code&gt;Link&lt;/code&gt;、&lt;code&gt;HashRouter&lt;/code&gt;、&lt;code&gt;BrowserRouter&lt;/code&gt;等组件提供给开发者通过使用标签的方式控制路由跳转。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
      <category term="react-router" scheme="http://blog.html-js.site/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>react-router-dom简介</title>
    <link href="http://blog.html-js.site/2021/08/05/react-router-dom%E7%AE%80%E4%BB%8B/"/>
    <id>http://blog.html-js.site/2021/08/05/react-router-dom简介/</id>
    <published>2021-08-05T05:47:32.000Z</published>
    <updated>2021-08-06T07:27:05.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codesandbox.io/s/misty-haze-eq546?file=/example.js" target="_blank" rel="noopener">https://codesandbox.io/s/misty-haze-eq546?file=/example.js</a></p><p>react-router-dom</p><blockquote><p>react-router-dom文档地址： <a href="https://reactrouter.com/web/guides/quick-start/" target="_blank" rel="noopener">https://reactrouter.com/web/guides/quick-start/</a></p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote><p>react-router提供多个包可以单独使用</p></blockquote><table><thead><tr><th style="text-align:center">package</th><th style="text-align:center">description</th></tr></thead><tbody><tr><td style="text-align:center">react-router</td><td style="text-align:center">路由核心功能</td></tr><tr><td style="text-align:center">react-router-dom</td><td style="text-align:center">基于react-router提供在浏览器运行环境下功能</td></tr><tr><td style="text-align:center">react-router-native</td><td style="text-align:center">for React Native</td></tr><tr><td style="text-align:center">react-router-config</td><td style="text-align:center">static route congif helpers</td></tr></tbody></table><p>在浏览器中运行只需要安装react-router-dom，reac-router-dom依赖react-router会自动安装依赖，所以不需要再手动安装react-router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom -S</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-路由组件"><a href="#2-路由组件" class="headerlink" title="2.路由组件"></a>2.路由组件</h3><p>react-router包含三种类型的组件：路由组件、路由匹配组件 、导航组件。在你使用这些组件的时候，都必须先从react-router-dom引入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br></pre></td></tr></table></figure><h4 id="2-1路由组件"><a href="#2-1路由组件" class="headerlink" title="2.1路由组件"></a>2.1路由组件</h4><p>react-router提供了两种路由组件: <code>BrowserRouter</code>, <code>HashRouter</code> 其中 <code>BrowserRouter</code> 是基于HTML5 history API (<code>pushState</code>, <code>replaceState</code>, <code>popstate</code>)事件<br>当然与之对应的还有 <code>HashRouter</code> 是基于 <code>window.location.hash</code> 。</p><h4 id="2-2-路由匹配组件"><a href="#2-2-路由匹配组件" class="headerlink" title="2.2 路由匹配组件"></a>2.2 路由匹配组件</h4><p>路由匹配组件有两种: <code>Route</code> 和 <code>Switch</code>, <code>Switch</code> 把多个路由组合在一起。<br>对于一个 <code>&lt;Route&gt;</code> 组件，可以设置三种属性：<code>component</code>、<code>render</code>、<code>children</code>来渲染出对应的内容。<br>当组件已存在时，一般使用<code>component</code>属性当需要传递参数变量给组件时，需要使用<code>render</code>属性</p><h4 id="2-3-导航组件"><a href="#2-3-导航组件" class="headerlink" title="2.3 导航组件"></a>2.3 导航组件</h4><p>有三种常用的导航组件，分别是:<code>&lt;Link&gt;</code>、<code>&lt;NavLink&gt;</code>、<code>&lt;Redirect&gt;</code>。<code>&lt;NavLink&gt;</code>是一种特殊的Link组件，匹配路径时，渲染的a标签带有active。</p><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>在需要使用router的地方引入react-router-dom</p><h4 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h4><p>以下是路由的基本使用例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Switch,</span><br><span class="line">  Route,</span><br><span class="line">  Link</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">// import logo from './logo.svg';</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">'./views/About'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home'</span></span><br><span class="line"><span class="keyword">import</span> Person <span class="keyword">from</span> <span class="string">'./views/Person'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;nav&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/about"</span>&gt;About&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">              &lt;Link to=<span class="string">"/person"</span>&gt;Person&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>nav&gt;</span><br><span class="line"></span><br><span class="line">        &#123;<span class="comment">/* A &lt;Switch&gt; looks through its children &lt;Route&gt;s and</span></span><br><span class="line"><span class="comment">            renders the first one that matches the current URL. */</span>&#125;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">"/about"</span>&gt;</span><br><span class="line">            &lt;About /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Route path="/</span>person<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Person /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">          &lt;Route path="</span>/<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;Home /&gt;</span></span><br><span class="line"><span class="string">          &lt;/Route&gt;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure><p>当然此处路由也可以有其他写法,比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Route path="/</span>about<span class="string">" component=&#123;About&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route path="</span>/person/:id<span class="string">" component=&#123;Person&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">  &lt;Route component=&#123;NotFind&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">&lt;/Switch&gt;</span></span><br></pre></td></tr></table></figure><p>其中的<code>exact</code>表示的是精确匹配，比如上面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有写精确匹配的化，那么后面的所有路径都可以匹配到首页,解决方式就是增加exact或者将此路由放置最后面。</p><h4 id="3-2-Route动态传参"><a href="#3-2-Route动态传参" class="headerlink" title="3.2 Route动态传参"></a>3.2 Route动态传参</h4><p>在一个路由匹配组件上设置参数，比如说上面的Person组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=<span class="string">"/person/:id"</span> component=&#123;Person&#125;&gt;&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><p>设置是以:开始然后紧跟key值，然后我们在Person组件中就可以通过获取props获取这个参数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.match.params.id)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.props.match.params.id</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;个人中心页面&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;个人id是:&#123;id&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>以上为传统class组件的写法，现在可以使用hooks，可以使用<code>useParams</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useParams &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = useParams();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;个人中心页面&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;个人id是:&#123;id&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-3-嵌套路由"><a href="#3-3-嵌套路由" class="headerlink" title="3.3 嵌套路由"></a>3.3 嵌套路由</h4><p>在About页面有一个嵌套路由代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link, Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> Tshirt <span class="keyword">from</span> <span class="string">'./product/Tshirt'</span>;</span><br><span class="line"><span class="keyword">import</span> Jeans <span class="keyword">from</span> <span class="string">'./product/Jeans'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props.match)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> match = <span class="keyword">this</span>.props.match;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;Link to=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>/tshirt`</span>&#125;&gt;Tshirt&lt;<span class="regexp">/Link&gt;| </span></span><br><span class="line"><span class="regexp">      &lt;Link to=&#123;`$&#123;match.url&#125;/</span>jeans<span class="string">`&#125;&gt;Jeans&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/nav&gt;</span></span><br><span class="line"><span class="string">    &lt;Switch&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path=&#123;`</span>$&#123;match.path&#125;/tshirt<span class="string">`&#125; component=&#123;Tshirt&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path=&#123;`</span>$&#123;match.path&#125;/jeans<span class="string">`&#125; exact component=&#123;Jeans&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">  &lt;/&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>此处如果换成Function的话可以直接使用另一个钩子函数<code>useRouteMatch</code>，获取当前匹配的路径和路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRouteMatch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; path, url &#125;  = useRouteMatch();</span><br><span class="line">    ...省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-路由重定向"><a href="#3-4-路由重定向" class="headerlink" title="3.4 路由重定向"></a>3.4 路由重定向</h4><p><code>Redirect</code>路由重定向，使路由重定向到某个页面，比如我们经常会做的没有登录重定向到登录页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">"/"</span>&gt;</span><br><span class="line">  &#123;loggedIn ? &lt;Redirect to="/dashboard" /&gt; : &lt;PublicHomePage /&gt;&#125;&lt;<span class="regexp">/Route&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-滚动还原"><a href="#3-5-滚动还原" class="headerlink" title="3.5 滚动还原"></a>3.5 滚动还原</h4><p>大部分情况下，我们需要的是每次导航到某个新页面的的时候，滚动条都是在顶部,这种比较好实现</p><p>hooks版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;<span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ScrollToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = useLocation();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;, [pathname]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;<span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollToTop</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">this</span>.props.location.pathname !== prevProps.location.pathname</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要把<code>ScrollToTop</code>组件放在Router里面eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;ScrollToTop /&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>而对于某些情况下比如一些tab我们希望切换回我们浏览过的tab页时我们希望滚动条滚动到我们之前浏览的位置，此处自行去实现。</p><h4 id="3-6-路由守卫"><a href="#3-6-路由守卫" class="headerlink" title="3.6 路由守卫"></a>3.6 路由守卫</h4><p>有时候我们在某个表单页面填好了表单，然后点击跳转到另外一个页面。<br>这时候我们就需要提醒用户有未提交的表单。当然这一步其实也是在实际的业务代码中实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Prompt</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"> <span class="keyword">const</span> BlockingForm = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [isBlocking, setIsBlocking] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form</span><br><span class="line">      onSubmit=&#123;event =&gt; &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">        event.target.reset();</span><br><span class="line">        setIsBlocking(<span class="literal">false</span>);</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;Prompt</span><br><span class="line">        when=&#123;isBlocking&#125;</span><br><span class="line">        message=&#123;location =&gt;</span><br><span class="line">          <span class="string">`你是否要跳转到 <span class="subst">$&#123;location.pathname&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Blocking?&#123;<span class="string">" "</span>&#125;</span><br><span class="line">        &#123;isBlocking ? <span class="string">"Yes, click a link or the back button"</span> : <span class="string">"Nope"</span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input</span></span><br><span class="line"><span class="regexp">          size="50"</span></span><br><span class="line"><span class="regexp">          placeholder="输入值测试路由拦截"</span></span><br><span class="line"><span class="regexp">          onChange=&#123;event =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            setIsBlocking(event.target.value.length &gt; 0);</span></span><br><span class="line"><span class="regexp">          &#125;&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button&gt;提交表单模拟接触拦截&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BlockingForm;</span><br></pre></td></tr></table></figure><h4 id="3-7代码分割"><a href="#3-7代码分割" class="headerlink" title="3.7代码分割"></a>3.7代码分割</h4><p>有时候为了避免文件过大加快加载速度，我们需要将代码分割，将某些路由对应的组件只有在点击的时候再加载js，就是组件的懒加载。<br>我们使用<code>webpack</code>, <code>@babel/plugin-syntax-dynamic-import</code>,<code>loadable-components</code>实现代码分割。</p><ul><li>1.首先在.babelrc文件中增加配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-react"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"@babel/plugin-syntax-dynamic-import"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.在我们需要懒加载的组件使用loadabel</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> loadable <span class="keyword">from</span> <span class="string">'@loadable/component'</span>;</span><br><span class="line"><span class="keyword">const</span> BlockForm = loadable(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../pages/BlockForm/index'</span>), &#123;</span><br><span class="line">  fallback: &lt;Loading /&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中BlockForm为懒加载得组件<br><code>loadable</code>参考文档地址 <a href="https://github.com/gregberge/loadable-components" target="_blank" rel="noopener">跳转</a></p><h4 id="3-8-withRouter"><a href="#3-8-withRouter" class="headerlink" title="3.8 withRouter"></a>3.8 withRouter</h4><p>您可以通过withRouter高阶组件访问history属性和匹配的Route,<br>withRouter will pass updated match, location, and history props to the wrapped component whenever it renders.</p><h4 id="3-9-其他hooks"><a href="#3-9-其他hooks" class="headerlink" title="3.9 其他hooks"></a>3.9 其他hooks</h4><p>之前使用了<code>useParams</code>和<code>useRouteMatch</code>两个hook,还有另外两个hook<br><code>useHistory</code>和<code>useLocation</code><br><code>useHistory</code><br>可以访问到history实例，我们可以通过这个实例访问某个路由<br><code>useLocation</code><br>返回location对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/misty-haze-eq546?file=/example.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codesandbox.io/s/misty-haze-eq546?file=/example.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;react-router-dom&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;react-router-dom文档地址： &lt;a href=&quot;https://reactrouter.com/web/guides/quick-start/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://reactrouter.com/web/guides/quick-start/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;react-router提供多个包可以单独使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;package&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;react-router&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;路由核心功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;react-router-dom&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;基于react-router提供在浏览器运行环境下功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;react-router-native&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;for React Native&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;react-router-config&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;static route congif helpers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在浏览器中运行只需要安装react-router-dom，reac-router-dom依赖react-router会自动安装依赖，所以不需要再手动安装react-router&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install react-router-dom -S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add react-router-dom&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
      <category term="react-router" scheme="http://blog.html-js.site/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>react-router 深入学习</title>
    <link href="http://blog.html-js.site/2021/08/05/react-router-%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://blog.html-js.site/2021/08/05/react-router-深入学习/</id>
    <published>2021-08-05T03:37:30.000Z</published>
    <updated>2021-08-10T09:12:18.903Z</updated>
    
    <content type="html"><![CDATA[<p>近期针对react-router的原理以及适用的场景有新的认知，会重新温习一遍react-router的使用方式以及适用场景，同时会延伸出一些实用的解决方案来解决项目中遇到的问题；</p><h3 id="思考的点"><a href="#思考的点" class="headerlink" title="思考的点"></a>思考的点</h3><ul><li>react-router的使用方式</li><li>react-router的原理</li><li>react一切皆组件 的理念</li><li>redux的实现原理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期针对react-router的原理以及适用的场景有新的认知，会重新温习一遍react-router的使用方式以及适用场景，同时会延伸出一些实用的解决方案来解决项目中遇到的问题；&lt;/p&gt;
&lt;h3 id=&quot;思考的点&quot;&gt;&lt;a href=&quot;#思考的点&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
      <category term="react-router" scheme="http://blog.html-js.site/tags/react-router/"/>
    
  </entry>
  
  <entry>
    <title>module.exports和exports和export和export default的区别，import和require的区别</title>
    <link href="http://blog.html-js.site/2021/03/26/module-exports%E5%92%8Cexports%E5%92%8Cexport%E5%92%8Cexport-default%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%8Cimport%E5%92%8Crequire%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.html-js.site/2021/03/26/module-exports和exports和export和export-default的区别，import和require的区别/</id>
    <published>2021-03-26T06:09:08.000Z</published>
    <updated>2021-03-26T06:09:08.176Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>module.exports和exports的区别</title>
    <link href="http://blog.html-js.site/2021/03/26/module-exports%E5%92%8Cexports%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.html-js.site/2021/03/26/module-exports和exports的区别/</id>
    <published>2021-03-26T06:08:57.000Z</published>
    <updated>2021-03-26T06:08:57.519Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>判断数据类型的方法</title>
    <link href="http://blog.html-js.site/2021/03/22/%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.html-js.site/2021/03/22/判断数据类型的方法/</id>
    <published>2021-03-22T12:16:12.000Z</published>
    <updated>2021-03-22T12:16:45.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Object-prototype-toString-call"><a href="#1-Object-prototype-toString-call" class="headerlink" title="1. Object.prototype.toString.call()"></a>1. Object.prototype.toString.call()</h3><p>每一个继承 Object 的对象都有 <code>toString</code> 方法，如果 <code>toString</code> 方法没有重写的话，会返回 <code>[Object type]</code>，其中 type 为对象的类型。但当除了 Object 类型的对象外，其他类型直接使用 <code>toString</code> 方法时，会直接返回都是内容的字符串，所以我们需要使用call或者apply方法来改变toString方法的执行上下文。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> an = [<span class="string">'Hello'</span>,<span class="string">'An'</span>];</span><br><span class="line">an.toString(); <span class="comment">// "Hello,An"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(an); <span class="comment">// "[object Array]"</span></span><br></pre></td></tr></table></figure></p><p>这种方法对于所有基本的数据类型都能进行判断，即使是 null 和 undefined 。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'An'</span>) <span class="comment">// "[object String]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>) <span class="comment">// "[object Number]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>(<span class="number">1</span>)) <span class="comment">// "[object Symbol]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) <span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">// "[object Undefined]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// "[object Function]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;<span class="attr">name</span>: <span class="string">'An'</span>&#125;) <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure></p><p>更多实现可见 <a href="https://juejin.im/post/591647550ce4630069df1c4a" target="_blank" rel="noopener">谈谈 Object.prototype.toString</a></p><a id="more"></a><h3 id="2-typeof"><a href="#2-typeof" class="headerlink" title="2.typeof"></a>2.typeof</h3><p>typeof是一个运算符，有2种使用方式：typeof(表达式)和typeof 变量名，第一种是对表达式做运算，第二种是对变量做运算。</p><p>typeof运算符的返回类型为字符串，值包括如下几种：        </p><ul><li>‘undefined’              –未定义的变量或值        </li><li>‘boolean’                 –布尔类型的变量或值        </li><li>‘string’                     –字符串类型的变量或值        </li><li>‘number’                  –数字类型的变量或值       </li><li>‘object’                    –对象类型的变量或值，或者null(这个是js历史遗留问题，将null作为object类型处理)        </li><li>‘function’                 –函数类型的变量或值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);    <span class="comment">//'undefined'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="literal">true</span>));  <span class="comment">//'boolean'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">'123'</span>);  <span class="comment">//'string'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">123</span>);   <span class="comment">//'number'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>);   <span class="comment">//'number'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);  <span class="comment">//'object'        var obj = new String();    console.log(typeof(obj));    //'object'    var  fn = function()&#123;&#125;;    console.log(typeof(fn));  //'function'    </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="class"><span class="keyword">class</span> <span class="title">c</span></span>&#123;&#125;));  <span class="comment">//'function'</span></span><br></pre></td></tr></table></figure><p>总结：typeof运算符用于判断对象的类型，但是对于一些创建的对象，它们都会返回’object’，有时我们需要判断该实例是否为某个对象的实例，那么这个时候需要用到instanceof运算符，后续记录instanceof运算符的相关用法。</p><h3 id="3-instanceof"><a href="#3-instanceof" class="headerlink" title="3. instanceof"></a>3. instanceof</h3><p><code>instanceof</code>  的内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。</p><p><code>instanceof</code> 运算符只能用作对象的判断。</p><p>使用 <code>instanceof</code>判断一个对象是否为数组，<code>instanceof</code> 会判断这个对象的原型链上是否会找到对应的 <code>Array</code> 的原型，找到返回 <code>true</code>，否则返回 <code>false</code>。</p><p>但 <code>instanceof</code> 只能用来判断对象类型，原始类型不可以。并且所有对象类型 instanceof Object 都是 true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></span><br><span class="line">aa = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line">aa <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="4-Array-isArray"><a href="#4-Array-isArray" class="headerlink" title="4.Array.isArray()"></a>4.Array.isArray()</h3><ul><li>功能：用来判断对象是否为数组</li><li><p>instanceof 与 isArray<br>当检测Array实例时，<code>Array.isArray</code> 优于 <code>instanceof</code> ，因为 <code>Array.isArray</code> 可以检测出 <code>iframes</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">xArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length<span class="number">-1</span>].Array;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> xArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Correctly checking for Array</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(arr); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Considered harmful, because doesn't work though iframes</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p>Array.isArray() 与 Object.prototype.toString.call()<br><code>Array.isArray()</code>是ES5新增的方法，当不存在 <code>Array.isArray()</code>，可以用 <code>Object.prototype.toString.call()</code> 实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Object-prototype-toString-call&quot;&gt;&lt;a href=&quot;#1-Object-prototype-toString-call&quot; class=&quot;headerlink&quot; title=&quot;1. Object.prototype.toString.call()&quot;&gt;&lt;/a&gt;1. Object.prototype.toString.call()&lt;/h3&gt;&lt;p&gt;每一个继承 Object 的对象都有 &lt;code&gt;toString&lt;/code&gt; 方法，如果 &lt;code&gt;toString&lt;/code&gt; 方法没有重写的话，会返回 &lt;code&gt;[Object type]&lt;/code&gt;，其中 type 为对象的类型。但当除了 Object 类型的对象外，其他类型直接使用 &lt;code&gt;toString&lt;/code&gt; 方法时，会直接返回都是内容的字符串，所以我们需要使用call或者apply方法来改变toString方法的执行上下文。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; an = [&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;An&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;an.toString(); &lt;span class=&quot;comment&quot;&gt;// &quot;Hello,An&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(an); &lt;span class=&quot;comment&quot;&gt;// &quot;[object Array]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种方法对于所有基本的数据类型都能进行判断，即使是 null 和 undefined 。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;string&quot;&gt;&#39;An&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object String]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Number]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Symbol]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Null]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Undefined]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Function]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;An&#39;&lt;/span&gt;&amp;#125;) &lt;span class=&quot;comment&quot;&gt;// &quot;[object Object]&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更多实现可见 &lt;a href=&quot;https://juejin.im/post/591647550ce4630069df1c4a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;谈谈 Object.prototype.toString&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器输入 URL 后发生了什么</title>
    <link href="http://blog.html-js.site/2021/03/18/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5-URL-%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://blog.html-js.site/2021/03/18/浏览器输入-URL-后发生了什么/</id>
    <published>2021-03-18T02:58:43.000Z</published>
    <updated>2021-03-18T02:59:17.748Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/43369093" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43369093</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43369093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/43369093&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="js" scheme="http://blog.html-js.site/tags/js/"/>
    
      <category term="html" scheme="http://blog.html-js.site/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>React组件库开发:多层嵌套弹层组件</title>
    <link href="http://blog.html-js.site/2021/03/17/React%E7%BB%84%E4%BB%B6%E5%BA%93%E5%BC%80%E5%8F%91-%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E5%BC%B9%E5%B1%82%E7%BB%84%E4%BB%B6-1/"/>
    <id>http://blog.html-js.site/2021/03/17/React组件库开发-多层嵌套弹层组件-1/</id>
    <published>2021-03-17T06:24:59.000Z</published>
    <updated>2021-03-17T06:27:47.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>UI 组件中有很多弹出式组件，常见的如 <code>Dialog</code>，<code>Tooltip</code> 以及 <code>Select</code> 等。这些组件都有一个特点，它们的弹出层通常不是渲染在当前的 <code>DOM</code> 树中，而是直接插入在 <code>body</code> （或者其它类似的地方）上的。这么做的主要目的是方便控制这些弹出层的 <code>z-index</code> ，确保它们能够处于合适的层级上，不至于被遮挡。</p><p>我们都知道 React App 的顶层某个地方肯定有这么一行代码：<code>ReactDOM.render(&lt;App /&gt;, mountNode)</code>，这个 API 调用的作用是在 <code>mountNode</code> 的位置创建一棵 React 的渲染树，React 会接管 <code>mountNode</code> 开始的这棵 DOM 树。</p><p>在 React 的这种管理模式下，会发现使用弹层似乎不太方便，因为组件树是逐层往下生长的，但React 的 API 中并没有直接提供跳出这棵组件树的方法。</p><p>所以，为了实现弹层组件，我们需要先实现一个 <code>Portal</code> 组件，这个组件只做一件事：将组件树中某些节点移出当前的DOM 树，并且渲染到指定的 DOM 节点中, 并且可以维持组件的上下文和事件冒泡。<br><a id="more"></a></p><h3 id="那么问题是什么呢？"><a href="#那么问题是什么呢？" class="headerlink" title="那么问题是什么呢？"></a>那么问题是什么呢？</h3><p>别急，我们先聊点别的。</p><p>相信大部分 React 开发者都用过 <code>redux</code>（至少听过吧），<code>react-redux</code> 这个 <code>binding</code> 库提供了连接 <code>React</code> 和 <code>redux</code> 的一个桥梁。<code>react-redux</code> 的实现依赖 <code>React</code> 很有用的一个功能<code>Context</code>，简单来说 <code>context</code> 就是提供了一个方便的跨越层级往下传递数据的方式。<br><code>ReactDOM.render</code> 的问题正是在于这个 <code>context</code> 的功能，它无法连接两棵 <code>React</code> 组件树的 <code>context</code>。<br><code>ReactDOM.render</code> 的函数原型中并没有当前组件树的信息，而 <code>context</code> 是跟组件树有关的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  container,</span><br><span class="line">  [callback]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="解决方案一-ReactDOM-unstable-renderSubtreeIntoContainer"><a href="#解决方案一-ReactDOM-unstable-renderSubtreeIntoContainer" class="headerlink" title="解决方案一 ReactDOM.unstable_renderSubtreeIntoContainer"></a>解决方案一 ReactDOM.unstable_renderSubtreeIntoContainer</h3><p>React 提供了另一个非公开 API：<code>ReactDOM.unstable_renderSubtreeIntoContainer</code>。这个 API 多了一个参数，这个参数就是用来指定新的 React 组件树根节点的父组件的，有了这个参数，两棵本来互不相干的 React 组件树就被联系起来了，同时它们的 <code>context</code> 也连接了起来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.unstable_renderSubtreeIntoContainer(</span><br><span class="line">  parentComponent,</span><br><span class="line">  element,</span><br><span class="line">  container,</span><br><span class="line">  [callback]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="解决方案二-ReactDOM-createPortal"><a href="#解决方案二-ReactDOM-createPortal" class="headerlink" title="解决方案二 ReactDOM.createPortal"></a>解决方案二 ReactDOM.createPortal</h3><p>Portals是reactjs16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。<br>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DemoComponent <span class="keyword">from</span> <span class="string">'./DemoComponent'</span>;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// react会将DemoComponent组件直接挂载在真真实实的 dom 节点 domNode 上，生命周期还和16版本之前相同。</span></span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    &lt;DemoComponent /&gt;,</span><br><span class="line">    domNode,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件。<br><a href="https://reactjs.org/docs/portals.html#___gatsby" target="_blank" rel="noopener">官网portals</a></p><h3 id="例子：rc-dialog"><a href="#例子：rc-dialog" class="headerlink" title="例子：rc-dialog"></a>例子：rc-dialog</h3><p><a href="https://github.com/react-component/dialog" target="_blank" rel="noopener">https://github.com/react-component/dialog</a></p><p>DialogWrap.jsx<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./Dialog'</span>;</span><br><span class="line"><span class="keyword">import</span> ContainerRender <span class="keyword">from</span> <span class="string">'rc-util/lib/ContainerRender'</span>;</span><br><span class="line"><span class="keyword">import</span> Portal <span class="keyword">from</span> <span class="string">'rc-util/lib/Portal'</span>;</span><br><span class="line"><span class="keyword">import</span> IDialogPropTypes <span class="keyword">from</span> <span class="string">'./IDialogPropTypes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IS_REACT_16 = !!ReactDOM.createPortal;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DialogWrap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">IDialogPropTypes</span>, <span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    visible: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _component: React.ReactElement&lt;any&gt;;</span><br><span class="line"></span><br><span class="line">  renderComponent: <span class="function">(<span class="params">props: any</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">  removeContainer: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(&#123; visible &#125;: &#123; <span class="attr">visible</span>: boolean &#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> !!(<span class="keyword">this</span>.props.visible || visible);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_REACT_16) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.renderComponent(&#123;</span><br><span class="line">        afterClose: <span class="keyword">this</span>.removeContainer,</span><br><span class="line">        onClose() &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        visible: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.removeContainer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  saveDialog = <span class="function">(<span class="params">node: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._component = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getComponent = <span class="function">(<span class="params">extra = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Dialog</span><br><span class="line">        ref=&#123;<span class="keyword">this</span>.saveDialog&#125;</span><br><span class="line">        &#123;...this.props&#125;</span><br><span class="line">        &#123;...extra&#125;</span><br><span class="line">        key=<span class="string">"dialog"</span></span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getContainer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.getContainer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.props.getContainer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(container);</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; visible &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> portal: any = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IS_REACT_16) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;ContainerRender</span><br><span class="line">          parent=&#123;<span class="keyword">this</span>&#125;</span><br><span class="line">          visible=&#123;visible&#125;</span><br><span class="line">          autoDestroy=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          getComponent=&#123;<span class="keyword">this</span>.getComponent&#125;</span><br><span class="line">          getContainer=&#123;<span class="keyword">this</span>.getContainer&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;(&#123; renderComponent, removeContainer &#125;: &#123; <span class="attr">renderComponent</span>: any, <span class="attr">removeContainer</span>: any &#125;) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.renderComponent = renderComponent;</span><br><span class="line">            <span class="keyword">this</span>.removeContainer = removeContainer;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &lt;<span class="regexp">/ContainerRender&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    if (visible || this._component) &#123;</span></span><br><span class="line"><span class="regexp">      portal = (</span></span><br><span class="line"><span class="regexp">        &lt;Portal getContainer=&#123;this.getContainer&#125;&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.getComponent()&#125;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Portal&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> portal;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DialogWrap;</span><br></pre></td></tr></table></figure></p><p>ContainerRender.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerRender</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    autoMount: PropTypes.bool,</span><br><span class="line">    autoDestroy: PropTypes.bool,</span><br><span class="line">    visible: PropTypes.bool,</span><br><span class="line">    forceRender: PropTypes.bool,</span><br><span class="line">    parent: PropTypes.any,</span><br><span class="line">    getComponent: PropTypes.func.isRequired,</span><br><span class="line">    getContainer: PropTypes.func.isRequired,</span><br><span class="line">    children: PropTypes.func.isRequired,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    autoMount: <span class="literal">true</span>,</span><br><span class="line">    autoDestroy: <span class="literal">true</span>,</span><br><span class="line">    forceRender: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoMount) &#123;</span><br><span class="line">      <span class="keyword">this</span>.renderComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoMount) &#123;</span><br><span class="line">      <span class="keyword">this</span>.renderComponent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.autoDestroy) &#123;</span><br><span class="line">      <span class="keyword">this</span>.removeContainer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeContainer = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.container) &#123;</span><br><span class="line">      ReactDOM.unmountComponentAtNode(<span class="keyword">this</span>.container);</span><br><span class="line">      <span class="keyword">this</span>.container.parentNode.removeChild(<span class="keyword">this</span>.container);</span><br><span class="line">      <span class="keyword">this</span>.container = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  renderComponent = <span class="function">(<span class="params">props, ready</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; visible, getComponent, forceRender, getContainer, parent &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (visible || parent._component || forceRender) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.container) &#123;</span><br><span class="line">        <span class="keyword">this</span>.container = getContainer();</span><br><span class="line">      &#125;</span><br><span class="line">      ReactDOM.unstable_renderSubtreeIntoContainer(</span><br><span class="line">        parent,</span><br><span class="line">        getComponent(props),</span><br><span class="line">        <span class="keyword">this</span>.container,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">            ready.call(<span class="keyword">this</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children(&#123;</span><br><span class="line">      renderComponent: <span class="keyword">this</span>.renderComponent,</span><br><span class="line">      removeContainer: <span class="keyword">this</span>.removeContainer,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Portal.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Portal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    getContainer: PropTypes.func.isRequired,</span><br><span class="line">    children: PropTypes.node.isRequired,</span><br><span class="line">    didUpdate: PropTypes.func,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.createContainer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; didUpdate &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (didUpdate) &#123;</span><br><span class="line">      didUpdate(prevProps);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.removeContainer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createContainer() &#123;</span><br><span class="line">    <span class="keyword">this</span>._container = <span class="keyword">this</span>.props.getContainer();</span><br><span class="line">    <span class="keyword">this</span>.forceUpdate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeContainer() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._container) &#123;</span><br><span class="line">      <span class="keyword">this</span>._container.parentNode.removeChild(<span class="keyword">this</span>._container);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._container) &#123;</span><br><span class="line">      <span class="keyword">return</span> ReactDOM.createPortal(<span class="keyword">this</span>.props.children, <span class="keyword">this</span>._container);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考链接：<br><a href="https://github.com/react-component/dialog/blob/master/src/DialogWrap.tsx" target="_blank" rel="noopener">https://github.com/react-component/dialog/blob/master/src/DialogWrap.tsx</a><br><a href="https://github.com/react-component/util/blob/master/src/ContainerRender.js" target="_blank" rel="noopener">https://github.com/react-component/util/blob/master/src/ContainerRender.js</a><br><a href="https://github.com/react-component/util/blob/master/src/Portal.js" target="_blank" rel="noopener">https://github.com/react-component/util/blob/master/src/Portal.js</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;UI 组件中有很多弹出式组件，常见的如 &lt;code&gt;Dialog&lt;/code&gt;，&lt;code&gt;Tooltip&lt;/code&gt; 以及 &lt;code&gt;Select&lt;/code&gt; 等。这些组件都有一个特点，它们的弹出层通常不是渲染在当前的 &lt;code&gt;DOM&lt;/code&gt; 树中，而是直接插入在 &lt;code&gt;body&lt;/code&gt; （或者其它类似的地方）上的。这么做的主要目的是方便控制这些弹出层的 &lt;code&gt;z-index&lt;/code&gt; ，确保它们能够处于合适的层级上，不至于被遮挡。&lt;/p&gt;
&lt;p&gt;我们都知道 React App 的顶层某个地方肯定有这么一行代码：&lt;code&gt;ReactDOM.render(&amp;lt;App /&amp;gt;, mountNode)&lt;/code&gt;，这个 API 调用的作用是在 &lt;code&gt;mountNode&lt;/code&gt; 的位置创建一棵 React 的渲染树，React 会接管 &lt;code&gt;mountNode&lt;/code&gt; 开始的这棵 DOM 树。&lt;/p&gt;
&lt;p&gt;在 React 的这种管理模式下，会发现使用弹层似乎不太方便，因为组件树是逐层往下生长的，但React 的 API 中并没有直接提供跳出这棵组件树的方法。&lt;/p&gt;
&lt;p&gt;所以，为了实现弹层组件，我们需要先实现一个 &lt;code&gt;Portal&lt;/code&gt; 组件，这个组件只做一件事：将组件树中某些节点移出当前的DOM 树，并且渲染到指定的 DOM 节点中, 并且可以维持组件的上下文和事件冒泡。&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>AntD Modal组件的实现原理</title>
    <link href="http://blog.html-js.site/2021/03/16/AntD-Modal%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-1/"/>
    <id>http://blog.html-js.site/2021/03/16/AntD-Modal组件的实现原理-1/</id>
    <published>2021-03-16T03:37:50.000Z</published>
    <updated>2021-03-17T06:26:59.298Z</updated>
    
    <content type="html"><![CDATA[<p>Ant Design(AntD)是React的一种UI组件。开发中使用AntD的Modal,在处理用户处理事务,在当前页面弹出一个对话框,承载相应的操作。现在来看看AntD的实现原理</p><p>先写列出部分Modal基本用法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.showModal&#125;&gt;Open a modal dialog&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Modal title="Basic Modal" visible=&#123;this.state.visible&#125;</span></span><br><span class="line"><span class="regexp">          onOk=&#123;this.handleOk&#125; onCancel=&#123;this.handleCancel&#125;</span></span><br><span class="line"><span class="regexp">        &gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;some contents...&lt;/</span>p&gt;</span><br><span class="line">          &lt;p&gt;some contents...&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;some contents...&lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//----------------</span></span><br><span class="line">ReactDOM.render(&lt;App /&gt;,mountNode)</span><br></pre></td></tr></table></figure><p>这样即可使用模态对话框组件。<br>打开浏览器的开发者功能可以看到对话框的div始终在body内层中，而不是在mountNode内部。当然模态对话框本就应该存在body内存中，而不是任意其他组件元素内部,否则嵌套效果不好，添加动画会招来性能问题。<br><a id="more"></a><br>这是为什么？<br>从AntD的Modal组件源码中(components/modal/index.tsx)，可以看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> confirm <span class="keyword">from</span> <span class="string">'./confirm'</span>;</span><br><span class="line">Modal.success = <span class="function"><span class="keyword">function</span> (<span class="params">props: ModalFuncProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = assign(&#123;&#125;, &#123;</span><br><span class="line">    type: <span class="string">'success'</span>,</span><br><span class="line">    iconType: <span class="string">'check-circle'</span>,</span><br><span class="line">    okCancel: <span class="literal">false</span>,</span><br><span class="line">  &#125;, props);</span><br><span class="line">  <span class="keyword">return</span> confirm(config);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当Modal加载成功后，还需要进一步从confirm(config)获取组件。<br>我们进一步查看confirm,在confirm.tsx(components/modal/confirm.tsx)可以看到如下源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Dialog</span><br><span class="line">    className=&#123;classString&#125;</span><br><span class="line">    onCancel=&#123;close.bind(<span class="keyword">this</span>, &#123; <span class="attr">triggerCancel</span>: <span class="literal">true</span> &#125;)&#125;</span><br><span class="line">    visible</span><br><span class="line">    title=<span class="string">""</span></span><br><span class="line">    transitionName=<span class="string">"zoom"</span></span><br><span class="line">    footer=<span class="string">""</span></span><br><span class="line">    maskTransitionName=<span class="string">"fade"</span></span><br><span class="line">    maskClosable=&#123;maskClosable&#125;</span><br><span class="line">    style=&#123;style&#125;</span><br><span class="line">    width=&#123;width&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;div className=&#123;<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-body-wrapper`</span>&#125;&gt;</span><br><span class="line">      &#123;body&#125; &#123;footer&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Dialog&gt;</span><br><span class="line">, div);</span><br></pre></td></tr></table></figure><p>最后再次使用ReactDOM.render()在创建的div内部添加对话框。<br>同时这是说明,ReactDOM.render()并不是只有在顶层要嵌入的div中使用。内部同样可以再次使用。</p><p>！！！但是，ReactDOM.render()方法，虽然可以实现组件的挂载点脱离父组件，但是组件的事件无法通过冒泡机制传递给父组件，也就是说如果挂载点div脱离了顶层root组件(<code>&lt;App /&gt;</code>)，那么挂载在div上面的组件也没办法使用redux。</p><p>那么为什么Antd-Modal到底是怎么实现的呢？ 原因是Antd-Modal里面使用了<a href="https://github.com/react-component/dialog" target="_blank" rel="noopener">rc-dialog</a> 组件，里面的<code>DialogWrap</code>组件使用了<a href="https://github.com/react-component/util" target="_blank" rel="noopener">rc-util</a>这个库的<a href="https://github.com/react-component/util/blob/master/src/ContainerRender.js" target="_blank" rel="noopener">ContainerRender.js</a>和<a href="https://github.com/react-component/util/blob/master/src/Portal.js" target="_blank" rel="noopener">Portal.js</a>方法，这个库解决了 ‘组件的挂载点虽然可以脱离父组件，但组件的事件通过冒泡机制仍可以传给父组件’ 问题</p><p>详情请看下一篇博客&gt;&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ant Design(AntD)是React的一种UI组件。开发中使用AntD的Modal,在处理用户处理事务,在当前页面弹出一个对话框,承载相应的操作。现在来看看AntD的实现原理&lt;/p&gt;
&lt;p&gt;先写列出部分Modal基本用法:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Button type=&lt;span class=&quot;string&quot;&gt;&quot;primary&quot;&lt;/span&gt; onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.showModal&amp;#125;&amp;gt;Open a modal dialog&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Button&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;lt;Modal title=&quot;Basic Modal&quot; visible=&amp;#123;this.state.visible&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;          onOk=&amp;#123;this.handleOk&amp;#125; onCancel=&amp;#123;this.handleCancel&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;          &amp;lt;p&amp;gt;some contents...&amp;lt;/&lt;/span&gt;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;p&amp;gt;some contents...&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/p&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;          &amp;lt;p&amp;gt;some contents...&amp;lt;/&lt;/span&gt;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/Modal&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;      &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//----------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&amp;lt;App /&amp;gt;,mountNode)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样即可使用模态对话框组件。&lt;br&gt;打开浏览器的开发者功能可以看到对话框的div始终在body内层中，而不是在mountNode内部。当然模态对话框本就应该存在body内存中，而不是任意其他组件元素内部,否则嵌套效果不好，添加动画会招来性能问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>前端实现公式解析</title>
    <link href="http://blog.html-js.site/2021/03/11/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E5%85%AC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.html-js.site/2021/03/11/前端实现公式解析/</id>
    <published>2021-03-11T13:15:07.000Z</published>
    <updated>2021-03-11T13:20:44.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-认识-Function"><a href="#1-认识-Function" class="headerlink" title="1.认识 Function"></a>1.认识 Function</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">mdn-Function介绍</a></p><p>我们先来看一行代码<br>这是js最基本的用法，用函数来输出表达式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'哈哈哈'</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn() <span class="comment">// 哈哈哈</span></span><br></pre></td></tr></table></figure></p><p>我们稍微变一下形<br>在之前的js函数篇分析中我有提过函数也是可以用构造函数Function 来创建<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">` console.log('哈哈哈') `</span>)</span><br><span class="line">fn() <span class="comment">// 哈哈哈</span></span><br></pre></td></tr></table></figure></p><p>看到这里也行你明白了点什么，如果没有也没关系，我们接着向下看<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'哈哈哈'</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">` console.log(str) `</span>)</span><br><span class="line">fn() <span class="comment">// 哈哈哈</span></span><br></pre></td></tr></table></figure></p><p>再来复杂一点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'哈哈哈'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cons</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">` cons(str) `</span>)</span><br><span class="line">fn() <span class="comment">// 哈哈哈</span></span><br></pre></td></tr></table></figure></p><p>结合项目中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> codemirrorText = <span class="string">'LEN(text_1)'</span> <span class="comment">// 设置的公司表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text_1 = <span class="string">'哈哈哈'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LEN</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`return <span class="subst">$&#123;codemirrorText&#125;</span> `</span>)</span><br><span class="line">fn() <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>github 公式解析库<br><a href="https://github.com/WangYang-Rex/formula" target="_blank" rel="noopener">formula</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-认识-Function&quot;&gt;&lt;a href=&quot;#1-认识-Function&quot; class=&quot;headerlink&quot; title=&quot;1.认识 Function&quot;&gt;&lt;/a&gt;1.认识 Function&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mdn-Function介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们先来看一行代码&lt;br&gt;这是js最基本的用法，用函数来输出表达式&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;哈哈哈&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 哈哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们稍微变一下形&lt;br&gt;在之前的js函数篇分析中我有提过函数也是可以用构造函数Function 来创建&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;` console.log(&#39;哈哈哈&#39;) `&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 哈哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;看到这里也行你明白了点什么，如果没有也没关系，我们接着向下看&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;` console.log(str) `&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 哈哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再来复杂一点&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cons&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;` cons(str) `&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 哈哈哈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结合项目中&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; codemirrorText = &lt;span class=&quot;string&quot;&gt;&#39;LEN(text_1)&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 设置的公司表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text_1 = &lt;span class=&quot;string&quot;&gt;&#39;哈哈哈&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LEN&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(s.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;`return &lt;span class=&quot;subst&quot;&gt;$&amp;#123;codemirrorText&amp;#125;&lt;/span&gt; `&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;github 公式解析库&lt;br&gt;&lt;a href=&quot;https://github.com/WangYang-Rex/formula&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;formula&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>在线调试工具-eruda</title>
    <link href="http://blog.html-js.site/2019/07/04/%E5%9C%A8%E7%BA%BF%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-eruda/"/>
    <id>http://blog.html-js.site/2019/07/04/在线调试工具-eruda/</id>
    <published>2019-07-04T12:30:56.000Z</published>
    <updated>2021-03-12T08:42:09.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eruda-一个被人遗忘的调试神器"><a href="#Eruda-一个被人遗忘的调试神器" class="headerlink" title="Eruda 一个被人遗忘的调试神器"></a>Eruda 一个被人遗忘的调试神器</h3><p>项目中如何引入？直接上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debugInit</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'debugInit'</span>)</span><br><span class="line"><span class="keyword">var</span> debug = sessionStorage.getItem(<span class="string">'debug'</span>) || type || <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(location.href &amp;&amp; (location.href.includes(<span class="string">'debug'</span>) || location.href.includes(<span class="string">'dingnianhuiapp.superboss.cc'</span>))) &#123;</span><br><span class="line">debug = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">window</span>._debug = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(debug) &#123;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); </span><br><span class="line">    <span class="comment">// script.src="https://dingtalkcdn.superboss.cc/nianhui/front/pc/vconsole.min.js"; </span></span><br><span class="line">    script.src=<span class="string">"//cdn.bootcss.com/eruda/1.5.2/eruda.min.js"</span>; </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script); </span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">// window.vConsole = new VConsole();</span></span><br><span class="line">      eruda.init();</span><br><span class="line">&#125;</span><br><span class="line">sessionStorage.setItem(<span class="string">'debug'</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">debugInit()</span><br></pre></td></tr></table></figure></p><p><a href="https://my.oschina.net/u/4293553/blog/3708333" target="_blank" rel="noopener">Eruda 一个被人遗忘的调试神器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Eruda-一个被人遗忘的调试神器&quot;&gt;&lt;a href=&quot;#Eruda-一个被人遗忘的调试神器&quot; class=&quot;headerlink&quot; title=&quot;Eruda 一个被人遗忘的调试神器&quot;&gt;&lt;/a&gt;Eruda 一个被人遗忘的调试神器&lt;/h3&gt;&lt;p&gt;项目中如何引入？直接
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.html-js.site/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2019年Web前端入门的自学路线</title>
    <link href="http://blog.html-js.site/2019/05/13/2019%E5%B9%B4Web%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8%E7%9A%84%E8%87%AA%E5%AD%A6%E8%B7%AF%E7%BA%BF/"/>
    <id>http://blog.html-js.site/2019/05/13/2019年Web前端入门的自学路线/</id>
    <published>2019-05-13T08:37:43.000Z</published>
    <updated>2021-03-17T06:30:25.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019年Web前端入门的自学路线"><a href="#2019年Web前端入门的自学路线" class="headerlink" title="2019年Web前端入门的自学路线"></a>2019年Web前端入门的自学路线</h3><blockquote><p>新手入门前端，需要学习的基础内容有很多，如下。</p></blockquote><p>一、HTML、CSS基础、JavaScript语法基础。学完基础后，可以仿照电商网站（例如京东、小米）做首页的布局。</p><p>二、JavaScript语法进阶。包括：作用域和闭包、this和对象原型等。相信我，JS语法，永远是面试中最重要的部分。</p><p>三、jQuery、Ajax等。jQuery没有过时，它仍然是前端基础的一部分。</p><p>四、ES6语法。这部分属于JS新增的语法，面试必问。其中，关于promise、async等内容要尤其关注。</p><p>五、HTML5和CSS3。要熟悉其中的新特性。</p><p>六、canvas。面试时，有的公司不一定会问canvas，靠运气。如果时间不够，这部分的内容可以先不学。但如果你会，绝对属于加分项。</p><p>七、移动Web开发、Bootstrap等。要注意移动开发中的适配和兼容性问题。</p><p>八、前端框架：Vue.js和React。这两个框架至少要会一个。入门时，建议先学Vue.js，上手相对容易。但无论如何，同时掌握 Vue 和 React 才是合格的前端同学。</p><p>九、Node.js。属于加分项，如果时间不够，可以先不学，但至少要知道 node 环境的配置。</p><p>十、自动化工具：构建工具 Webpack、构建工具 gulp、CSS 预处理器 Sass 等。注意，Sass 比 Less 用得多，gulp 比 grunt 用得多。</p><p>十一、前端综合：HTTP协议、跨域通信、安全问题（CSRF、XSS）、浏览器渲染机制、异步和单线程、页面性能优化、防抖动（Debouncing）和节流阀（Throtting）、lazyload、前端错误监控、虚拟DOM等。</p><p>十二、编辑器相关。Sublime Text 是每个学前端的人都要用到的编辑器。另外，前端常见的IDE有两个：WebStorm 和 Visual Studio Code。WebStorm什么都好，可就是太卡顿；VS Code就相对轻量很多。个人总结一下：新手一般用 WebStorm，入门之后，用 VS Code 的人更多。</p><p>十三、TypeScript（简称TS）。ES 是 JS 的标准，TS 是 JS 的超集。TS属于进阶内容，建议把上面的基础掌握之后，再学TS。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019年Web前端入门的自学路线&quot;&gt;&lt;a href=&quot;#2019年Web前端入门的自学路线&quot; class=&quot;headerlink&quot; title=&quot;2019年Web前端入门的自学路线&quot;&gt;&lt;/a&gt;2019年Web前端入门的自学路线&lt;/h3&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
      <category term="前端" scheme="http://blog.html-js.site/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack优化</title>
    <link href="http://blog.html-js.site/2018/06/15/webpack%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.html-js.site/2018/06/15/webpack优化/</id>
    <published>2018-06-15T09:31:37.000Z</published>
    <updated>2018-06-19T12:02:54.179Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.jianshu.com/p/b9bf995f3712" target="_blank" rel="noopener">webpack优化之HappyPack 实战</a></li><li><a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="noopener">Webpack 打包优化之体积篇</a></li><li><a href="https://jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="noopener">Webpack 打包优化之速度篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/b9bf995f3712&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack优化之HappyPack 实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://blog.html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack优化之HappyPack 实战</title>
    <link href="http://blog.html-js.site/2018/06/15/webpack%E4%BC%98%E5%8C%96%E4%B9%8BHappyPack-%E5%AE%9E%E6%88%98/"/>
    <id>http://blog.html-js.site/2018/06/15/webpack优化之HappyPack-实战/</id>
    <published>2018-06-15T09:28:26.000Z</published>
    <updated>2018-06-15T09:29:44.757Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/b9bf995f3712" target="_blank" rel="noopener">https://www.jianshu.com/p/b9bf995f3712</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/b9bf995f3712&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/b9bf995f3712&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="webpack" scheme="http://blog.html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack1升2踩坑记</title>
    <link href="http://blog.html-js.site/2018/06/14/webpack1%E5%8D%872%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://blog.html-js.site/2018/06/14/webpack1升2踩坑记/</id>
    <published>2018-06-14T08:56:44.000Z</published>
    <updated>2018-06-20T06:01:25.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="webpack-从-v1-升级到-v2"><a href="#webpack-从-v1-升级到-v2" class="headerlink" title="webpack 从 v1 升级到 v2"></a>webpack 从 v1 升级到 v2</h3><p>从 v1 升级到 v2，总体来讲比较简单，跟着官方升级文档做就行了，主要是 <code>module</code> 和 <code>ExtractTextWebpackPlugin</code> 变化比较大</p><ul><li><a href="https://www.jianshu.com/p/cb8343020833" target="_blank" rel="noopener">https://www.jianshu.com/p/cb8343020833</a></li><li><a href="http://www.css88.com/doc/webpack2/guides/migrating/" target="_blank" rel="noopener">http://www.css88.com/doc/webpack2/guides/migrating/</a></li></ul><h3 id="升级后-模块热替换-HMR-失效"><a href="#升级后-模块热替换-HMR-失效" class="headerlink" title="升级后 模块热替换(HMR)失效"></a>升级后 模块热替换(HMR)失效</h3><p>直接看文档</p><ul><li><a href="http://www.css88.com/doc/webpack2/guides/hmr-react/" target="_blank" rel="noopener">http://www.css88.com/doc/webpack2/guides/hmr-react/</a></li><li><a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="noopener">https://github.com/gaearon/react-hot-loader</a></li><li><a href="https://www.jianshu.com/p/07c0666e87c7" target="_blank" rel="noopener">https://www.jianshu.com/p/07c0666e87c7</a></li><li><a href="https://segmentfault.com/a/1190000009244530" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009244530</a></li><li><a href="https://github.com/gaearon/react-hot-loader/issues/249" target="_blank" rel="noopener">https://github.com/gaearon/react-hot-loader/issues/249</a>  这个issue非常有用！！！！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;webpack-从-v1-升级到-v2&quot;&gt;&lt;a href=&quot;#webpack-从-v1-升级到-v2&quot; class=&quot;headerlink&quot; title=&quot;webpack 从 v1 升级到 v2&quot;&gt;&lt;/a&gt;webpack 从 v1 升级到 v2&lt;/h3&gt;&lt;p&gt;从 
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://blog.html-js.site/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React性能优化军规</title>
    <link href="http://blog.html-js.site/2018/05/21/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%86%9B%E8%A7%84/"/>
    <id>http://blog.html-js.site/2018/05/21/React性能优化军规/</id>
    <published>2018-05-21T09:54:21.000Z</published>
    <updated>2018-05-21T09:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发的过程中，将上面所论述的内容，总结成一个基本的军规，铭记于心，就可以保证React应用的性能不至于太差。</p><h3 id="渲染相关"><a href="#渲染相关" class="headerlink" title="渲染相关"></a>渲染相关</h3><ul><li>提升级项目性能，请使用immutable(props、state、store)</li><li>请pure-render-decorator与immutablejs搭配使用</li><li>请慎用setState，因其容易导致重新渲染</li><li>谨慎将component当作props传入</li><li>请将方法的bind一律置于constructor</li><li>请只传递component需要的props，避免其它props变化导致重新渲染（慎用spread attributes）</li><li>请在你希望发生重新渲染的dom上设置可被react识别的同级唯一key，否则react在某些情况可能不会重新渲染。</li><li>请尽量使用const element</li></ul><h3 id="tap事件"><a href="#tap事件" class="headerlink" title="tap事件"></a>tap事件</h3><ul><li>简单的tap事件，请使用react-tap-event-plugin<br>开发环境时，最好引入webpack的环境变量（仅在开发环境中初始化），在container中初始化。生产环境的时候，请将plugin跟react打包到一起（需要打包在一起才能正常使用，因为plugin对react有好多依赖），外链引入。</li></ul><p>目前参考了这个项目的打包方案：<br><a href="https://github.com/hartmamt/react-with-tap-events" target="_blank" rel="noopener">https://github.com/hartmamt/react-with-tap-events</a><br>Facebook官方issue: <a href="https://github.com/facebook/react/blob/bef45b0b1a98ea9b472ba664d955a039cf2f8068/src/renderers/dom/client/eventPlugins/TapEventPlugin.js" target="_blank" rel="noopener">https://github.com/facebook/react/blob/bef45b0b1a98ea9b472ba664d955a039cf2f8068/src/renderers/dom/client/eventPlugins/TapEventPlugin.js</a><br>React-tap-event-plugin github:<br><a href="https://github.com/zilverline/react-tap-event-plugin" target="_blank" rel="noopener">https://github.com/zilverline/react-tap-event-plugin</a></p><ul><li>复杂的tap事件，建议使用tap component<br>家校群列表页的每个作业的tap交互都比较复杂，出了普通的tap之外，还需要long tap和swipe。因此我们只好自己封装了一个tap component</li></ul><h3 id="Debug相关"><a href="#Debug相关" class="headerlink" title="Debug相关"></a>Debug相关</h3><ul><li>移动端请慎用redux-devtools，易造成卡顿</li><li>Webpack慎用devtools的inline-source-map模式<br>使用此模式会内联一大段便于定位bug的字符串，查错时可以开启，不是查错时建议关闭，否则开发时加载的包会非常大。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在开发的过程中，将上面所论述的内容，总结成一个基本的军规，铭记于心，就可以保证React应用的性能不至于太差。&lt;/p&gt;
&lt;h3 id=&quot;渲染相关&quot;&gt;&lt;a href=&quot;#渲染相关&quot; class=&quot;headerlink&quot; title=&quot;渲染相关&quot;&gt;&lt;/a&gt;渲染相关&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://blog.html-js.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript事件循环-event loop</title>
    <link href="http://blog.html-js.site/2018/04/11/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-event-loop/"/>
    <id>http://blog.html-js.site/2018/04/11/JavaScript事件循环-event-loop/</id>
    <published>2018-04-11T08:33:47.000Z</published>
    <updated>2018-04-11T10:02:53.469Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.html-js.site/tags/javascript/"/>
    
  </entry>
  
</feed>
